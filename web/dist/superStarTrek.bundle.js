/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./web/js/games/superStarTrek/superStarTrek.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./web/js/components/Errors.js":
/*!*************************************!*\
  !*** ./web/js/components/Errors.js ***!
  \*************************************/
/*! exports provided: default, GlobalErrorHandler, FetchErrorHandler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GlobalErrorHandler\", function() { return GlobalErrorHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FetchErrorHandler\", function() { return FetchErrorHandler; });\nfunction GlobalErrorHandler(logLevel) {\n  const validLogLevels = [\"error\", \"warn\", \"log\"];\n  const defaultLogLevel = \"warn\";\n\n  function setLogLevel() {\n    if (!validLogLevels.includes(logLevel)) {\n      console.error(\n        \"logLevel must be one of the following : \",\n        validLogLevels,\n        \". Setting logLevel to \",\n        defaultLogLevel\n      );\n      logLevel = defaultLogLevel;\n    }\n  }\n\n  function makeHumanReadableLog(e) {\n    switch (e) {\n      case e instanceof EvalError:\n        console.error(\"stop using eval you fuck\");\n        break;\n      case e instanceof InternalError:\n        console.error(\"looks like some JS code you made fucked up\");\n        break;\n      default:\n        console.error(\n          \"I couldn't even figure what error type that was so no snarky comment for you, sir!\"\n        );\n    }\n  }\n\n  function register() {\n    window.onerror = function(message, source, lineno, colno, error) {\n      switch (logLevel) {\n        case \"error\":\n          console.error(message, source, lineno, colno, error);\n          throw error;\n          break;\n        case \"log\":\n          console.log(message, source, lineno, colno, error);\n          break;\n        case \"warn\":\n        default:\n          console.error(message, source, lineno, colno, error);\n      }\n      makeHumanReadableLog(error);\n    };\n  }\n\n  function init() {\n    setLogLevel();\n    register();\n  }\n\n  return {\n    register,\n    init\n  };\n}\n\nfunction FetchErrorHandler() {\n  return {};\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GlobalErrorHandler);\n\n/**\n * \n * \nError types\nSection\nBesides the generic Error constructor, there are seven other core error constructors in JavaScript. For client-side exceptions, see Exception handling statements.\n\nEvalError\n    Creates an instance representing an error that occurs regarding the global function eval().\nInternalError\n    Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. \"too much recursion\".\nRangeError\n    Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.\nReferenceError\n    Creates an instance representing an error that occurs when de-referencing an invalid reference.\nSyntaxError\n    Creates an instance representing a syntax error that occurs while parsing code in eval().\nTypeError\n    Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.\nURIError\n    Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters. \n */\n\n\n//# sourceURL=webpack:///./web/js/components/Errors.js?");

/***/ }),

/***/ "./web/js/components/Navbar.js":
/*!*************************************!*\
  !*** ./web/js/components/Navbar.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Errors.js */ \"./web/js/components/Errors.js\");\n\n\n\n\nconst errorHandler = new _Errors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"error\");\nerrorHandler.init();\n\nfunction Navbar() {\n  function parseForm($form) {\n    let data = {};\n    $form.serializeArray().forEach(field => {\n      data[field.name] = field.value;\n    });\n    return data;\n  }\n\n  function redirectToOrigin() {\n    window.location.href = window.location.origin;\n  }\n\n  function handleOpenSignUp(e) {\n    let $template = $(\"#sign-up\");\n    // $(\"body\").append($template);\n    $template.find(\"input\").each(function(i, el) {\n      $(el).val(\"\");\n    });\n    $template.modal(\"show\");\n    $template\n      .find(\"#submit\")\n      .off(\"click\")\n      .on(\"click\", handleSignUp);\n  }\n\n  function handleOpenLogin(e) {\n    let $template = $(\"#login\");\n    $template.find(\"input\").each(function(i, el) {\n      $(el).val(\"\");\n    });\n    $template.modal(\"show\");\n    $template\n      .find(\"#login-btn\")\n      .off(\"click\")\n      .on(\"click\", handleLogin);\n  }\n\n  // TODO:: SETUP SOME TEMPLATING\n  function handleSignUp(e) {\n    let $modal = $(\"#sign-up\");\n    let $form = $modal.find(\"form\");\n    let data = parseForm($form);\n\n    let $button = $(\"#submit-btn\");\n    $button.addClass(\"loading\");\n\n    $form.find(\".error.message\").transition(\"hide\");\n\n    fetch(\"/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    })\n      .then(res => {\n        if (!res.ok) throw res;\n        // redirect back to /\n        redirectToOrigin();\n      })\n      .catch(async function(e) {\n        console.error(e);\n        //display error\n        $form.find(\".error.message\").transition(\"show\");\n      })\n      .then(() => $button.removeClass(\"loading\"));\n  }\n\n  function handleLogin(e) {\n    let $modal = $(\"#login\");\n    let $form = $modal.find(\"form\");\n    let data = parseForm($form);\n\n    let $button = $(\"#login-btn\");\n    $button.addClass(\"loading\");\n\n    $form.find(\".error.message\").transition(\"hide\");\n\n    fetch(\"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    })\n      .then(res => {\n        if (!res.ok) throw res;\n        // redirect back to /\n        redirectToOrigin();\n      })\n      .catch(e => {\n        console.error(e);\n        $form.find(\".error.message\").transition(\"show\");\n      })\n      .then(() => $button.removeClass(\"loading\"));\n  }\n\n  function handleLogout(e) {\n    let $btn = $(\"#logout-btn\");\n    $btn.addClass(\"loading\");\n    fetch(\"/logout\", {\n      method: \"POST\"\n    })\n      .then(res => {\n        console.log(res);\n        return res;\n      })\n      .then(res => {\n        if (!res.ok) throw res;\n        redirectToOrigin();\n      })\n      .catch(e => {\n        console.error(e);\n      })\n      .then(() => $btn.removeClass(\"loading\"));\n  }\n\n  function handleConfirmInput(e) {\n    e.stopPropagation();\n    let confirmVal = this.value;\n    let password = $(\"#sign-up input[name='password']\").val();\n    if (confirmVal !== password) {\n      $(this)\n        .closest(\".field\")\n        .addClass(\"error\");\n    } else {\n      $(this)\n        .closest(\".field\")\n        .removeClass(\"error\");\n    }\n    renderSignupValid(isSignupValid());\n  }\n\n  // change an input to concealed or show\n  function handleToggleShowInput(e) {\n    $(this).toggleClass(\"slash\");\n    let $input = $(this).siblings(\"input\");\n    if ($input.attr(\"type\") === \"password\") {\n      $input.attr(\"type\", \"text\");\n    } else {\n      $input.attr(\"type\", \"password\");\n    }\n  }\n\n  function isSignupValid() {\n    // matching passwords\n    let password = $(\"#sign-up input[name='password']\").val();\n    let confirmVal = $(\"#sign-up input[name='confirm-password']\").val();\n    if (password !== confirmVal) {\n      return false;\n    }\n    return true;\n  }\n\n  function renderSignupValid(isValid) {\n    let $signupForm = $(\"#sign-up\");\n    if (isValid) {\n      $signupForm.find(\"#submit\").removeClass(\"disabled\");\n    } else {\n      $signupForm.find(\"#submit\").addClass(\"disabled\");\n    }\n  }\n\n  function register() {\n    let $signUpModal = $(\"#sign-up\");\n    $(\"#sign-up-btn\").on(\"click\", handleOpenSignUp);\n    $(\"#login-btn\").on(\"click\", handleOpenLogin);\n    $(\"#logout-btn\").on(\"click\", handleLogout);\n\n    // sign up modal key handler\n    $signUpModal\n      .find(\"input[name='confirm-password']\")\n      .on(\"input\", handleConfirmInput);\n\n    $(\".eye.slash\").on(\"click\", handleToggleShowInput);\n\n    // set close handler for messages\n    $(\".message .close\")\n      .off()\n      .on(\"click\", function(e) {\n        e.stopPropagation();\n        $(this)\n          .closest(\".message\")\n          .transition(\"fade\");\n      });\n  }\n\n  function init() {\n    register();\n  }\n\n  return {\n    init\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Navbar);\n\n\n//# sourceURL=webpack:///./web/js/components/Navbar.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/AI.js":
/*!******************************************!*\
  !*** ./web/js/games/superStarTrek/AI.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AI; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n\n\nclass AI extends _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n    constructor(parent, galaxy, player) {\n        super(AI, parent);\n        this.parent = parent;\n        this.parent.ai = this;\n        this.galaxy = galaxy;\n        this.player = player;\n    }\n\n    static get propName() {\n        return \"ai\";\n    }\n\n    takeTurn() {\n        // debugger;\n        console.log(`${this.parent.name} taking a turn.`);\n        // decide between these\n        // move\n\n        // if power below 20% then move to ram\n        if(false) {}\n        // fire phasers\n        this.firePhasers();\n        // fire torpedo\n    }\n\n    firePhasers() {\n        // fire between 20% and 60% of our energy\n        let amountToFire = this.parent.powerGrid.capacity * (Math.random() * .4 + .2);\n        amountToFire = Math.min(amountToFire, this.parent.powerGrid.energy);\n        if(amountToFire === 0) {\n            console.error(\"OUT OF ENERGY\");\n            return;\n        }\n        if (this.parent.phasers.isOk()) {\n            this.parent.phasers.fire(amountToFire, this.player);\n            this.parent.powerGrid.useEnergy(amountToFire);  // todo:::\n            this.parent.phasers.coolDown();\n        }\n    }\n}\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/AI.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Components.js":
/*!**************************************************!*\
  !*** ./web/js/games/superStarTrek/Components.js ***!
  \**************************************************/
/*! exports provided: Component, Collider, Mover, GameObjectContainer, GameObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Component\", function() { return Component; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Collider\", function() { return Collider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mover\", function() { return Mover; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameObjectContainer\", function() { return GameObjectContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameObject\", function() { return GameObject; });\n/* harmony import */ var _Terminal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Terminal.js */ \"./web/js/games/superStarTrek/Terminal.js\");\n/* harmony import */ var _Game_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Game.js */ \"./web/js/games/superStarTrek/Game.js\");\n// game objects and containers work together\n// is something that can contain game objects\n\n\n\n// these are treated as collider class variables\nlet _colliderMaxHitToDamageDevices = 275.0;\nlet _colliderMinHitToDamageDevices = 50.0;\n\n/**\n * Our base component class\n * All components appear on their parents on the same prop name\n * for a given kind of component (ex : all phasers are on .phasers)\n * all components can access their parent\n */\nclass Component {\n    constructor(_class, parent) {\n        if(!_class.propName) {\n            debugger;\n            throw new Error(\"To inherit component you need to define a static propName\");\n        }\n        this.parent = parent;\n        this.parent[_class.propName] = this;\n        this.parent.hasComponent = Component.hasComponent.bind(this.parent);\n    }\n    static hasComponent(_class) {\n        return this[_class.propName];\n    }\n}\n\n// can collide into other colliders\n// width and height are in units 1/100 * sector width\nclass Collider extends Component {\n    constructor(parent, gameObject, width = 0, length = 0, health = 1) {\n        super(Collider, parent);\n        this.health = health;\n        this.maxHealth = this.health;\n        this.terminal = _Terminal_js__WEBPACK_IMPORTED_MODULE_0__[\"terminal\"];\n        this.width = width;\n        this.length = length;\n        this.gameObject = gameObject;\n        this._indestructible = false;\n    }\n\n    static propName() {\n        return \"collider\";\n    }\n\n    static setDeviceDamageRange(min, max) {\n        _colliderMinHitToDamageDevices = min;\n        _colliderMaxHitToDamageDevices = max;\n    }\n\n    static get minHitToDamageDevices() {\n        return _colliderMinHitToDamageDevices\n    }\n\n    static get maxHitToDamageDevices() {\n        return _colliderMaxHitToDamageDevices;\n    }\n\n    repair() {\n        this.health = this.maxHealth;\n    }\n\n    makeIndestructible() {\n        this._indestructible = true;\n    }\n\n    getCoordinates() {\n        let topLeft = {x: this.gameObject.x, y: this.gameObject.y};\n        let bottomLeft = {x: topLeft.x, y: topLeft.y + this.length};\n        let topRight = {x: topLeft.x + this.width, y: topLeft.y};\n        let bottomRight = {x: topRight.x, y: bottomLeft.y};\n        let center = {x: topLeft.x + this.width / 2, y: topLeft.y + this.width / 2};\n        return {\n            topLeft,\n            bottomLeft,\n            topRight,\n            bottomRight,\n            center\n        }\n    }\n\n    getLeftSideX() {\n        return this.gameObject.x;\n    }\n\n    getRightSideX() {\n        return this.gameObject.x + (this.width / 100);\n    }\n\n    getTopSideY() {\n        return this.gameObject.y;\n    }\n\n    getBottomSideY() {\n        return this.gameObject.y + (this.length / 100);\n    }\n\n    collision(a) {\n        if (!a.collider) {\n            console.log(a, ' is not a collider.');\n            return false;\n        }\n        return Collider.collision(this, a.collider);\n    }\n\n    static collision(a, b) {\n        if (!a instanceof Collider || !b instanceof Collider) {\n            console.error('both a and b need to be colliders, ', a, b);\n            return false;\n        }\n        if (a === b) {\n            return false;\n        }\n        // if a left side < b right side\n        // and a right side is > b left side\n        // and a top side is < b bottom side\n        // and a bottom side is > b top side then collision\n        if (a.getLeftSideX() < b.getRightSideX()\n            && a.getRightSideX() > b.getLeftSideX()\n            && a.getTopSideY() < b.getBottomSideY()\n            && a.getBottomSideY() > b.getTopSideY()\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    //\n    hitWillDamageDevices(damage) {\n        let threshold = Math.random() * (Collider.maxHitToDamageDevices - Collider.minHitToDamageDevices) + Collider.minHitToDamageDevices;\n        console.log('device damage threshold = ', threshold);\n        return damage > threshold;\n    }\n\n    takeHit(damage) {\n        if (this._indestructible) {\n            this.terminal.printLine(`Consumed by ${this.gameObject.name} at ${this.gameObject.getSectorLocation()}`)\n            return;\n        }\n\n        this.health -= damage;\n        this.terminal.printLine(`${damage.toFixed(2)} unit hit on ${this.gameObject.name} at ${this.gameObject.getSectorLocation()}`)\n\n        // damage devices\n        if(_Game_js__WEBPACK_IMPORTED_MODULE_1__[\"DEVICE_DAMAGE_ENABLED\"] && this.hitWillDamageDevices(damage)) {\n            if(this.parent.deviceContainer) {\n                // determine amount of damage (for moment just the original damage)\n                let deviceDamage = damage / (75.0 * (25 * Math.random()));\n                this.parent.deviceContainer.damageRandomDevices(deviceDamage);\n            }\n        }\n\n        if (this.health <= 0) {\n            if (this.parent.die) {\n                this.parent.die();\n            } else {\n                this.terminal.echo(`${this.gameObject.name} destroyed.`);\n            }\n        }\n    }\n}\n\n// things that can move\nclass Mover extends Component {\n    constructor(parent, gameObject) {\n        super(Mover, parent);\n        this.gameObject = gameObject;\n    }\n\n    static get propName() {\n        return \"mover\";\n    }\n\n    calculateDisplacement(sector) {\n        // find delta x, delta y in global coordinates\n        let deltaX = sector.globalX - this.gameObject.sector.globalX;\n        let deltaY = sector.globalY - this.gameObject.sector.globalY;\n        return {x: deltaX, y: deltaY};\n    }\n\n    calculateDestination(deltaQx = 0, deltaQy = 0, deltaSx = 0, deltaSy = 0) {\n        let sector = this.gameObject.sector;\n        let x = sector.globalX + (deltaQx * 10) + deltaSx;\n        let y = sector.globalY + (deltaQy * 10) + deltaSy;\n        return this.gameObject.galaxy.getSectorGlobal(x, y);\n    }\n\n    // @returns float\n    static calculateDistance(x1, y1, x2, y2) {\n        let deltaX = Math.abs(x2 - x1);\n        let deltaY = Math.abs(y2 - y1);\n        return Math.hypot(deltaX, deltaY);\n    }\n\n    // theta is our direction, delta is our distance per move\n    * moveInDirection(theta, delta = .5, dist) {\n        // find deltaX and deltaY (amount to move each move)\n        // this finds the x and y of the right triangle using delta as hypotenuse\n        let deltaX = delta * Math.cos(theta);\n        let deltaY = -1 * (delta * Math.sin(theta));  // y axis is inverted\n        let i = 0;  // failsafe\n        let keepGoing = true;\n        while (keepGoing) {\n            if (i > 1000) return;\n            // todo:: check bounds\n            this.gameObject.x += deltaX;\n            this.gameObject.y += deltaY;\n            this.gameObject.updateCoordinates();\n            keepGoing = yield;\n            i++;\n        }\n        return;\n    }\n\n    // delta = max amount to move per move\n    * moveTo(globalX, globalY, delta = .5) {\n        debugger;\n        // find total distance\n        let distance = Mover.calculateDistance(this.gameObject.x, this.gameObject.y, globalX, globalY);\n        let remaining = distance;\n        // total x and y\n        // let distanceX = Math.abs(this.gameObject.x - globalX);\n        // let distanceY = Math.abs(this.gameObject.y - globalY);\n        // angle  // todo:: check this later\n        let theta = Math.atan2(this.gameObject.y - globalY / this.gameObject.x - globalX);\n        // find deltaX and deltaY (amount to move each move)\n        // this finds the x and y of the right triangle using delta as hypotenuse\n        let deltaX = delta * Math.cos(theta);\n        let deltaY = delta * Math.sin(theta);\n\n        let keepGoing = true;\n        while (remaining > 0 && keepGoing) {\n            // todo:: check bounds\n            // move by deltax deltay, or the remaining distance (whichever is less)\n            let remainingX = Math.abs(globalX - this.gameObject.x);\n            let remainingY = Math.abs(globalY - this.gameObject.y);\n            // don't overshoot the landing\n            if (remainingX < deltaX) {\n                deltaX = globalX - this.gameObject.x;\n            }\n            if (remainingY < deltaY) {\n                deltaY = globalY - this.gameObject.y;\n            }\n            this.gameObject.x += deltaX;\n            this.gameObject.y += deltaY;\n            this.gameObject.updateCoordinates();\n            remaining -= delta; // technically incorrect if deltas modified but whatever\n            if (remaining <= 0) {\n                return;\n            }\n            keepGoing = yield;\n        }\n        return;\n    }\n\n    // only basic collision detection\n    // drops the object into the sector\n    moveToSector(sector) {\n        // collision detection\n        if (sector.isFull()) {\n            debugger;\n        }\n        this.gameObject.sector.container.removeGameObject(this.parent);\n        this.gameObject.quadrant.container.removeGameObject(this.parent);\n        this.gameObject.placeIn(this.gameObject.galaxy, sector.quadrant, sector);\n    }\n}\n\n// a thing that holds game objects\nclass GameObjectContainer extends Component {\n    constructor(parent) {\n        super(GameObjectContainer, parent);\n        this.gameObjects = [];\n    }\n    static get propName() {\n        return \"container\";\n    }\n    isEmpty() {\n        return this.gameObjects.length === 0;\n    }\n\n    getCountOfGameObjects(type) {\n        return this.gameObjects.reduce((count, object) => {\n            if (object instanceof type) count++;\n            return count;\n        }, 0);\n    }\n\n    getGameObjectsOfType(type) {\n        return this.gameObjects.filter(object => object instanceof type);\n    }\n\n    getAllGameObjects() {\n        return this.gameObjects.slice();\n    }\n\n    addGameObject(obj) {\n        this.gameObjects.push(obj);\n    }\n\n    removeGameObject(obj) {\n        this.gameObjects = this.gameObjects.filter(o => o !== obj);\n    }\n}\n\n// a game object is simply a thing with a position in\n// the game\nclass GameObject  extends  Component {\n    constructor(parent, takesWholeSector = false) {\n        super(GameObject, parent);\n        this.galaxy = null;\n        this.quadrant = null;\n        this.sector = null;\n        // x and y are floats\n        this._x = null;\n        this._y = null;\n        this.takesWholeSector = takesWholeSector;\n    }\n\n    static get propName() {\n        return \"gameObject\";\n    }\n    // if something was removed from the game...\n    isInGame() {\n        if(!this.galaxy || !this.quadrant || !this.sector) {\n            return false;\n        }\n        return true;\n    }\n\n    get name() {\n        if (this.parent.name) {\n            return this.parent.name;\n        } else {\n            return this.parent.constructor.name;\n        }\n    }\n\n    removeSelf() {\n        this.galaxy.container.removeGameObject(this.parent);\n        this.quadrant.container.removeGameObject(this.parent);\n        this.sector.container.removeGameObject(this.parent);\n        this.galaxy = null;\n        this.quadrant = null;\n        this.sector = null;\n        // this._x = null;\n        // this._y = null;\n        this.x = null;\n        this.y = null;\n        this.userSectorX = null;\n        this.userSectorY = null;\n        this.userQuadrantX = null;\n        this.userQuadrantY = null;\n    }\n    // global coordinates\n    // get x() {\n    //     return this._x;\n    // }\n    // set x(x) {\n    //     if(x === this._x) return;\n    //     this._x = x;\n    //     this.updateCoordinates();\n    // }\n    // get y() {\n    //     return this._y;\n    // }\n    // set y(y) {\n    //     if(y === this._y) return;\n    //     this._y = y;\n    //     this.updateCoordinates();\n    // }\n\n    // calculate coordinates\n    // update our containers\n    // update our user coordinates\n    updateCoordinates() {\n        try {\n            let currentSector = this.galaxy.getSectorGlobal(this.x, this.y);\n            if (currentSector !== this.sector) {\n                if (!this.canMoveTo(currentSector)) {\n                    throw new Error(\"Cant place object in non empty sector\");\n                }\n                this.quadrant.container.removeGameObject(this.parent);\n                this.sector.container.removeGameObject(this.parent);\n                this.quadrant = currentSector.quadrant;\n                this.sector = currentSector;\n            }\n            // locations\n            let x = ((this.x % this.quadrant.width) + .5).toFixed(1);\n            let y = ((this.y % this.quadrant.width) + .5).toFixed(1);\n            this.userSectorX = this.sector.x + 1;\n            this.userSectorY = this.sector.y + 1;\n            this.userQuadrantX = this.quadrant.x + 1;\n            this.userQuadrantY = this.quadrant.y + 1;\n        } catch(e) {\n            // left galaxy\n            this.removeSelf();\n        }\n    }\n\n    // check that sector is empty\n    canMoveTo(sector) {\n        if (this.takesWholeSector && !sector.container.isEmpty()) {\n            return false;\n        }\n        return true;\n    }\n\n    // the x and y in the sector 0 - 0 is top left\n    // .5 - .5 is center\n    placeIn(galaxy, quadrant, sector, x = .5, y = .5) {\n        if (!this.canMoveTo(sector)) {\n            throw new Error(\"Cant place object in non empty sector\");\n        }\n        if(!sector) {\n            debugger;\n        }\n        this.galaxy = galaxy;\n        this.quadrant = quadrant;\n        this.sector = sector;\n        this.galaxy.container.addGameObject(this.parent);\n        this.quadrant.container.addGameObject(this.parent);\n        this.sector.container.addGameObject(this.parent);\n\n        // set global x y\n        this.x = this.sector.globalX + x;\n        this.y = this.sector.globalY + y;\n        this.updateCoordinates();\n    }\n    // functions for printing out our location to the user\n    getSectorLocation(includeSector = true, float) {\n        return `${includeSector ? 'Sector ' : ''}${this.userSectorX} - ${this.userSectorY}`;\n    }\n\n    getSectorLocationFloat(includeSector = true) {\n        let x = ((this.x % this.quadrant.width) + .5).toFixed(1);\n        let y = ((this.y % this.quadrant.width) + .5).toFixed(1);\n        return `${includeSector ? 'Sector ' : ''}${x} - ${y}`\n    }\n\n    getLocation() {\n        return `${this.getQuadrantLocation()}; ${this.getSectorLocation()}`;\n    }\n\n    getQuadrantLocation() {\n        return `Quadrant ${this.userQuadrantX} - ${this.userQuadrantY}`;\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Components.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Devices.js":
/*!***********************************************!*\
  !*** ./web/js/games/superStarTrek/Devices.js ***!
  \***********************************************/
/*! exports provided: shortRangeSensorType, longRangeSensorType, phaserType, powerGridType, warpEngineType, impulseEngineType, lifeSupportType, shieldType, photonTorpedoLauncherType, Device, REPAIR_STRATEGY_EVEN, REPAIR_STRATEGY_LEAST, REPAIR_STRATEGY_MOST, REPAIR_STRATEGY_PRIORITY, DeviceContainer, PowerGrid, WarpDrive, ImpulseEngines, LifeSupport, Shields, Phasers, PhotonTorpedoLauncher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shortRangeSensorType\", function() { return shortRangeSensorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"longRangeSensorType\", function() { return longRangeSensorType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"phaserType\", function() { return phaserType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"powerGridType\", function() { return powerGridType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"warpEngineType\", function() { return warpEngineType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"impulseEngineType\", function() { return impulseEngineType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lifeSupportType\", function() { return lifeSupportType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shieldType\", function() { return shieldType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"photonTorpedoLauncherType\", function() { return photonTorpedoLauncherType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Device\", function() { return Device; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REPAIR_STRATEGY_EVEN\", function() { return REPAIR_STRATEGY_EVEN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REPAIR_STRATEGY_LEAST\", function() { return REPAIR_STRATEGY_LEAST; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REPAIR_STRATEGY_MOST\", function() { return REPAIR_STRATEGY_MOST; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REPAIR_STRATEGY_PRIORITY\", function() { return REPAIR_STRATEGY_PRIORITY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DeviceContainer\", function() { return DeviceContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PowerGrid\", function() { return PowerGrid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WarpDrive\", function() { return WarpDrive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImpulseEngines\", function() { return ImpulseEngines; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LifeSupport\", function() { return LifeSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shields\", function() { return Shields; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Phasers\", function() { return Phasers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PhotonTorpedoLauncher\", function() { return PhotonTorpedoLauncher; });\n/* harmony import */ var _Terminal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Terminal.js */ \"./web/js/games/superStarTrek/Terminal.js\");\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n/* harmony import */ var _GameClock_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameClock.js */ \"./web/js/games/superStarTrek/GameClock.js\");\n/* harmony import */ var _PlayerShips_Enterprise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PlayerShips/Enterprise.js */ \"./web/js/games/superStarTrek/PlayerShips/Enterprise.js\");\n\n\n\n\n\n/**\n * Device Types, defined constants make it easier to check the type of device\n * Commands use these to indicate what devices they require to function\n *\n * The alternative approach would be to make a new Device class to extend Device\n * for every type of device, but for the moment at least it seems there are\n * many device types that don't require additional functionality\n * beyond what the Device class itself has, so by defining types\n * we can keep many Devices as instances of just the Device class\n * while still getting the ability to have well defined type attributes\n * propName = the property that the device holder stores the device on\n * name = the name that will be displayed to the user\n */\nclass DeviceType {\n    constructor(name, propName) {\n        this.name = name;\n        this.propName = propName;\n        Object.freeze(this);\n    }\n}\n\n/// Device Type Singletons\nconst shortRangeSensorType = new DeviceType('Short Range Sensors', 'shortRangeSensors');\nconst longRangeSensorType = new DeviceType(\"Long Range Sensors\", 'longRangeSensors');\nconst phaserType = new DeviceType(\"Phasers\", \"phasers\");\nconst powerGridType = new DeviceType(\"Power Circuits\", \"powerGrid\");\nconst warpEngineType = new DeviceType(\"Warp Engines\", \"warpEngines\");\nconst impulseEngineType = new DeviceType(\"Impulse Engines\", \"impulseEngines\");\nconst lifeSupportType = new DeviceType(\"Life Support\", \"lifeSupport\");\nconst shieldType = new DeviceType(\"Shields\", \"shields\");\nconst photonTorpedoLauncherType = new DeviceType(\"Photon Torpedo Launcher\", \"photons\");\n\n// export const\n\n/**\n * Our base device class\n * Handles all the logic for devices:\n * 1) taking damage\n * 2) getting repaired\n * 3) checking the type of device\n */\nclass Device extends _Components_js__WEBPACK_IMPORTED_MODULE_1__[\"Component\"] {\n    constructor(parent, type, chanceOfBeginDamaged = .65) {\n        super(type, parent);\n        this.parent = parent;\n        this.name = type.name;\n        this.type = type;\n\n        this._chanceOfBeingDamaged = chanceOfBeginDamaged;\n\n        if (!this.parent.deviceContainer) {\n            this.parent.deviceContainer = new DeviceContainer(this.parent);\n        }\n        this.parent.deviceContainer.addDevices(this);\n\n        this._damage = 0;\n    }\n\n    isType(deviceType) {\n        if (!deviceType instanceof DeviceType) return false;\n        return this.type.name === deviceType.name;\n    }\n\n    get damage() {\n        return this._damage;\n    }\n\n    checkDamage() {\n        if (this.isDamaged()) {\n            throw new Error(`${this.name} is damaged!`);\n        }\n    }\n\n    isOk() {\n        return this._damage === 0;\n    }\n\n    isDamaged() {\n        return this._damage > 0;\n    }\n\n    takeDamage(damage) {\n        if (this._damage === 0) {\n            _Terminal_js__WEBPACK_IMPORTED_MODULE_0__[\"terminal\"].printLine(`***${this.parent.name}'s ${this.name} has been damaged.`);\n        }\n        this._damage += damage;\n    }\n\n    repair(amount) {\n        if (this._damage === 0) return;\n        this._damage -= amount;\n        if (this._damage === 0) {\n            _Terminal_js__WEBPACK_IMPORTED_MODULE_0__[\"terminal\"].printLine(`${this.parent.name}'s ${this.name} have been repaired.`);\n        }\n        /// don't go negative\n        this._damage = Math.max(this._damage, 0);\n    }\n\n    randomlyDamage() {\n        this.takeDamage(Math.random() * 5);\n    }\n\n    // roll the dice to see if it becomes damaged\n    hitDoesDamage() {\n        return Math.random() < this._chanceOfBeingDamaged;\n    }\n\n    timeToRepairInFlight() {\n        return this._damage / DEVICE_REPAIR_SPEED_IN_FLIGHT;\n    }\n\n    timeToRepairAtDock() {\n        return this._damage / DEVICE_REPAIR_SPEED_DOCKED;\n    }\n\n    // timeToRepair()\n}\n\nconst REPAIR_STRATEGY_EVEN = 'even';\nconst REPAIR_STRATEGY_LEAST = 'least';\nconst REPAIR_STRATEGY_MOST = 'most';\nconst REPAIR_STRATEGY_PRIORITY = 'priority';\nconst REPAIR_MODES = [REPAIR_STRATEGY_EVEN, REPAIR_STRATEGY_LEAST, REPAIR_STRATEGY_MOST, REPAIR_STRATEGY_PRIORITY];\nconst DEVICE_REPAIR_SPEED_DOCKED = 1;\nconst DEVICE_REPAIR_SPEED_IN_FLIGHT = .3;\n/**\n * An array of devices\n */\nclass DeviceContainer {\n    constructor(parent) {\n        this.parent = parent;\n        this.parent.deviceContainer = this;\n        this.devices = [];\n        this.repairSpeed = DEVICE_REPAIR_SPEED_IN_FLIGHT;   //speed at which devices are repaired (docked = 1)\n        this.repairMode = REPAIR_STRATEGY_EVEN;\n        this.onTimeElapse = this.onTimeElapse.bind(this);\n        _GameClock_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].register(this.onTimeElapse);\n        // <int> priority # => List <device>\n        // also <string> device type name => priority #\n        this.repairPriorities = new Map();\n        this.prioritiesInUse = new Set();\n    }\n\n    setRepairSpeed(n) {\n        this.repairSpeed = n;\n    }\n\n    setRepairMode(mode) {\n        if (!REPAIR_MODES.some(m => mode === m)) {\n            throw new Error(`${mode} is not a valid repair mode.`);\n        }\n        this.repairMode = mode;\n    }\n\n    _repairDevicesEvenly(devices, totalAmount) {\n        // r = amount to repair per device\n        let r = totalAmount / devices.length;\n        let repairAmountLeft = totalAmount;\n        let remainingDevices = devices.slice();\n        // dont over-repair devices .....\n        // if we have devices that have less damage than we're repairing each device\n        // then repair them first and recalculate how much we can repair the\n        // remaining devices\n        let devicesWithLessDamage;\n        do {\n            devicesWithLessDamage = remainingDevices.filter(d => d.damage < r && d.damage > 0);\n            if(devicesWithLessDamage.length === 0) break;\n            remainingDevices = remainingDevices.filter(d => d.damage >= r && d.damage > 0);\n            devicesWithLessDamage.forEach(d => {\n                let toRepair = Math.min(d.damage, r, repairAmountLeft);\n                if(toRepair <= 0) return;\n                d.repair(toRepair);\n                repairAmountLeft -= toRepair;\n            });\n            r = repairAmountLeft / remainingDevices.length;\n        } while (devicesWithLessDamage.length > 0 && repairAmountLeft > 0);\n\n        if(repairAmountLeft <= 0) return;\n        // repair the remaining devices\n        remainingDevices.forEach(d => {\n            let toRepair = Math.min(d.damage, r, repairAmountLeft);\n            if(toRepair <= 0) return;\n            d.repair(toRepair);\n            repairAmountLeft -= toRepair;\n        });\n    }\n\n    onTimeElapse(days) {\n        // debugger;\n        // todo:: check for repair priority\n        let repairAmount = days * this.repairSpeed;\n        let damagedDevices = this.devices.filter(d => d.isDamaged());\n        switch (this.repairMode) {\n            case REPAIR_STRATEGY_EVEN:\n                // spread repairs across damaged devices evenly\n                this._repairDevicesEvenly(damagedDevices, repairAmount);\n                break;\n            case REPAIR_STRATEGY_LEAST:\n                // repair the least damaged device first\n                damagedDevices.sort((a, b) => {\n                    return a.damage - b.damage;\n                });\n                // repair loop\n                for (let i = 0; i < damagedDevices.length && repairAmount > 0; i++) {\n                    let device = damagedDevices[i];\n                    let toRepair = Math.min(repairAmount, device.damage);\n                    device.repair(toRepair);\n                    repairAmount -= toRepair;\n                }\n                break;\n            case REPAIR_STRATEGY_MOST:\n                // repair the most damaged device first\n                damagedDevices.sort((a, b) => {\n                    return b.damage - a.damage;\n                });\n                // repair loop\n                for (let i = 0; i < damagedDevices.length && repairAmount > 0; i++) {\n                    let device = damagedDevices[i];\n                    let toRepair = Math.min(repairAmount, device.damage);\n                    device.repair(toRepair);\n                    repairAmount -= toRepair;\n                }\n                break;\n            case REPAIR_STRATEGY_PRIORITY:\n                // spread repairs evenly amongst devices on the same priority level\n                // sort the used priority numbers\n                let priorityNumbers = [...this.prioritiesInUse.keys()];\n                priorityNumbers.sort();\n                // iterate through the devices by their priority number\n                for(let i = 0; i < priorityNumbers.length && repairAmount > 0; i++) {\n                    let priorityNumber = priorityNumbers[i];\n                    // get device list\n                    let deviceList = this.repairPriorities.get(priorityNumber) || [];\n                    // calc total current device damage\n                    let totalDamage = deviceList.reduce((carry, d) => d.damage + carry, 0);\n                    // do the repairs\n                    this._repairDevicesEvenly(deviceList, repairAmount);\n                    // calculate amount repaired and decrement from total\n                    let newTotalDamage = deviceList.reduce((carry, d) => d.damage + carry, 0);\n                    let repaired = totalDamage - newTotalDamage;\n                    repairAmount -= repaired;\n                }\n                // todo:: update the info section to include an explanation of this stuff....\n                break;\n            default:\n                console.error(`repair mode ${this.repairMode} invalid.`);\n        }\n\n    }\n\n    addDevices(...devices) {\n        let prevLength = this.devices.length;\n        this.devices.push(...devices);\n        // don't remake the whole repair priority structure , just add the new entries\n        // set the priority of the new devices to their index in this.devices + 1\n        devices.forEach((d, i) => this.setRepairPriority(d.type, prevLength + 1 + i));\n        // this.makeRepairPriority();\n    }\n\n    getRandomDevice() {\n        let idx = Math.trunc(this.devices.length * Math.random());\n        return this.devices[idx];\n    }\n\n    damageRandomDevices(damage) {\n        let minDamage = Math.max(damage / 10, 2);\n        let originalDamage = damage;\n        // distribute damage amongst devices\n        while (damage > 0) {\n            // take a portion of this (make this better latter)\n            let portion = Math.max(originalDamage * Math.random(), minDamage);\n            let device;\n            do {\n                device = this.getRandomDevice();\n            } while (device.hitDoesDamage());\n\n            device.takeDamage(portion);\n            damage -= portion;\n        }\n    }\n\n    getDevice(type) {\n        return this.parent[type.propName];\n    }\n\n    getDevices() {\n        return this.devices.slice();\n    }\n\n    /**\n     * @param deviceType DeviceType\n     * @param priority int\n     */\n    setRepairPriority(deviceType, priority) {\n        // get device and check that we have that device\n        let device = this.devices.find(d => d.type.name === deviceType.name);\n        if(!device) return;\n\n        // remove old record\n        if(this.repairPriorities.has(deviceType.name)) {\n            let oldP = this.repairPriorities.get(deviceType.name);\n            if(oldP === priority) return;\n            let list = this.repairPriorities.get(oldP);\n            // remove device from list\n            list = list.filter(d => {\n                return d.type.name !== deviceType.name;\n            });\n\n            if(list.length === 0) {\n                // if there's no devices on that priority #\n                // remove the list from the map and remove the number from the set\n                this.repairPriorities.delete(oldP);\n                this.prioritiesInUse.delete(oldP);\n            } else {\n                this.repairPriorities.set(oldP, list);\n            }\n        }\n\n        // add new record\n        this.prioritiesInUse.add(priority);\n        this.repairPriorities.set(deviceType.name, priority);\n        let pList = this.repairPriorities.get(priority) || [];\n        pList.push(device);\n        this.repairPriorities.set(priority, pList);\n    }\n\n    makeRepairPriority() {\n        this.devices.forEach((device, i) => {\n            this.setRepairPriority(device.type, i + 1);\n        });\n    }\n\n    // return map <device type name> => int ?\n    getRepairPriorities() {\n        return this.repairPriorities;\n    }\n    getDeviceRepairPriority(deviceType) {\n        return this.repairPriorities.get(deviceType.name) || 0;\n    }\n}\n\n/**\n * Has max, has min 0, can be damaged\n */\nclass PowerGrid extends Device {\n    constructor(capacity, parent) {\n        super(parent, powerGridType, .12);\n        this.capacity = capacity;\n        this._energy = capacity;\n    }\n\n    get energy() {\n        return this._energy;\n    }\n\n    set energy(e) {\n        e = Math.min(e, this.capacity);\n        e = Math.max(e, 0);\n        this._energy = e;\n    }\n\n    getPercent() {\n        return this._energy / this.capacity;\n    }\n\n    atMax() {\n        return this._energy === this.capacity;\n    }\n\n    recharge() {\n        this._energy = this.capacity;\n    }\n\n    useEnergy(e) {\n        this.checkDamage();\n        if (this._energy - e < -0.01) {\n            debugger;\n            throw new Error(\"Not enough energy!\");\n        }\n        this._energy -= e;\n    }\n\n    addEnergy(e) {\n        this.checkDamage();\n        if (this._energy + e > this.capacity) {\n            throw new Error(\"Too much energy.\");\n        }\n        this._energy += e;\n    }\n}\n\n// todo:::\nclass WarpDrive extends Device {\n    constructor(parent, powerGrid) {\n        super(parent, warpEngineType);\n        this.powerGrid = powerGrid;\n        this._warpFactor = 5.0;\n    }\n\n    get warpFactor() {\n        return this._warpFactor;\n    }\n\n    set warpFactor(n) {\n        this.checkDamage();\n        if (typeof n !== \"number\" || Number.isNaN(n)) {\n            return;\n        } else if (n < 1.0 || n > 10.0) {\n            return;\n        }\n        this._warpFactor = n;\n    }\n\n    // moveTo(){\n    //\n    // }\n}\n\nclass ImpulseEngines extends Device {\n    constructor(parent, powerGrid) {\n        super(parent, impulseEngineType);\n        this.powerGrid = powerGrid;\n    }\n}\n\nclass LifeSupport extends Device {\n    constructor(parent, reserves, clock) {\n        super(parent, lifeSupportType);\n        this.maxReserves = reserves;\n        this.reserves = reserves;\n        this.onTimeElapsed = this.onTimeElapsed.bind(this);\n        this.clock = clock;\n        this.clock.register(this.onTimeElapsed);\n        this.terminal = _Terminal_js__WEBPACK_IMPORTED_MODULE_0__[\"terminal\"];\n    }\n\n    kill() {\n        this.clock.unregister(this.onTimeElapsed);\n    }\n\n    atMax() {\n        return this.reserves === this.maxReserves;\n    }\n\n    recharge() {\n        this.reserves = this.maxReserves;\n    }\n\n    onTimeElapsed(days) {\n        if (this.isDamaged()) {\n            this.reserves -= days;\n            this.reserves = Math.max(this.reserves, 0);\n            if (this.reserves === 0) {\n                if (this.parent.die) this.parent.die();\n                this.terminal.printLine(`${this.parent.name}'s crew suffocates.`);\n            }\n        } else if (!this.isDamaged() && !this.atMax()) {\n            this.recharge();\n        }\n    }\n}\n\nclass Shields extends Device {\n    constructor(parent, capacity) {\n        super(parent, shieldType);\n        this.capacity = capacity;\n        this.up = false;\n        this.units = this.capacity;\n        this.terminal = _Terminal_js__WEBPACK_IMPORTED_MODULE_0__[\"terminal\"];\n    }\n\n    printInfo() {\n        return `${this.up ? \"UP\" : \"DOWN\"}, ${this.units.toFixed(2)} ${(this.units * 100 / this.capacity).toFixed(1)}%`;\n    }\n\n    recharge() {\n        this.checkDamage();\n        this.units = this.capacity;\n    }\n\n    lower() {\n        this.checkDamage();\n        if (!this.up) {\n            this.terminal.printLine(\"Shields already down.\");\n            return;\n        }\n        this.up = false;\n        this.terminal.printLine(\"Shields lowered.\");\n    }\n\n    raise() {\n        this.checkDamage();\n        if (this.up) {\n            this.terminal.printLine(\"Shields already up.\");\n            return;\n        }\n        if (this.isDamaged()) {\n            this.terminal.printLine(\"Shields are damaged.\");\n            return;\n        }\n        this.up = true;\n        this.terminal.printLine(\"Shields raised.\");\n    }\n\n    // returns amount drained\n    drain(e) {\n        this.checkDamage();\n        if (this.units - e < 0) {\n            throw new Error(\"Not enough energy\");\n        }\n        this.units -= e;\n\n        if (this.units === 0) {\n            this.lower();\n        }\n        return this.units;\n    }\n\n    // returns amount charged\n    charge(e) {\n        this.checkDamage();\n        // don't exceed capacity\n        if (this.units + e > this.capacity) {\n            e = this.capacity - this.units;\n        }\n        this.units += e;\n        if (this.units === this.capacity) {\n            this.terminal.printLine(\"Shields at max.\");\n        }\n    }\n\n    takeHit(amount) {\n        if (!this.up || this.isDamaged()) {\n            this.parent.collider.takeHit(amount);\n            return;\n        }\n        this.terminal.printLine(`${amount.toFixed(2)} hit to shields.`);\n        if (this.units < amount) {\n            amount -= this.units;\n            this.drain(this.units);\n            this.parent.collider.takeHit(amount);\n        } else {\n            this.drain(amount);\n        }\n    }\n}\n\nclass Phasers extends Device {\n    constructor(parent, energySystem) {\n        super(parent, phaserType);\n        if (!energySystem) {\n            throw new Error('Phaser must have energy');\n        }\n        this.energySystem = energySystem;\n        this.overheated = false;\n        this.amountRecentlyFired = 0;\n        this.overheatThreshold = 1500;\n        this.terminal = _Terminal_js__WEBPACK_IMPORTED_MODULE_0__[\"terminal\"];\n        // this is used to calculate the energy that dissipates over distance\n        this.scalingFactor = .9;\n        this.maxScalingFactor = this.scalingFactor + .01;\n        this.minScalingFactor = this.scalingFactor;\n    }\n\n    // energy * (scaling ** distance) = damage\n    // so energy = damage / (scaling ** distance)\n    calculateSureKill(distance, damage) {\n        return damage / (this.minScalingFactor ** distance);\n    }\n\n    calculateDamage(distance, energy) {\n        let scalingBase = this.scalingFactor + (.01 * Math.random());\n        return energy * (scalingBase ** distance);\n    }\n\n    coolDown() {\n        this.amountRecentlyFired = 0;\n    }\n\n    // check to see if the phasers overheated\n    checkOverHeat() {\n        if (this.amountRecentlyFired > this.overheatThreshold) {\n            /**\n             double chekbrn = (rpow-1500.)*0.00038;\n             if (Rand() <= chekbrn) {\n                prout(\"Weapons officer Sulu-  \\\"Phasers overheated, sir.\\\"\");\n                damage[DPHASER] = damfac*(1.0 + Rand()) * (1.0+chekbrn);\n            }**/\n            let diff = this.amountRecentlyFired - this.overheatThreshold;\n            // if (Math.random() <= diff * .00038) {\n            //     this.terminal.printLine(`Phasers overheated!`);\n            //     this._damaged = true;\n            // }\n            if (Math.random() <= diff * .0038) {\n                this.terminal.printLine(`Phasers overheated!`);\n                this.randomlyDamage();\n            }\n        }\n    }\n\n    fire(amount, target) {\n        if (amount <= 0) {\n            console.error(\"Can't fire amount \", amount);\n            return;\n        }\n        if (!target) {\n            console.error(\"Need a target, \", target);\n            return;\n        }\n        // target needs to be targetable\n        if (!(target.collider instanceof _Components_js__WEBPACK_IMPORTED_MODULE_1__[\"Collider\"])) {\n            console.error(\"You can't hit that\", target);\n            return;\n        }\n        // device can't be damaged\n        this.checkDamage();\n        if (this.isDamaged()) {\n            this.terminal.printLine('Phaser control damaged.');\n            return;\n        }\n        if (!this.parent.gameObject) {\n            console.error('derp a lerp.');\n            debugger;\n            return;\n        }\n\n        if (!target.gameObject || !target.gameObject.isInGame()) {\n            console.error(\"Can't shoot something removed from the game.\");\n            return;\n        }\n\n        // get distance\n        let distance = Galaxy.calculateDistance(this.parent.gameObject.sector, target.gameObject.sector);\n        // distance scaling\n        let damage = this.calculateDamage(distance, amount);\n\n        // if they have shields hit the shields\n        if (target.shields instanceof Shields) {\n            target.shields.takeHit(damage);\n        } else if (target.collider instanceof _Components_js__WEBPACK_IMPORTED_MODULE_1__[\"Collider\"]) {   // else the thing itself takes a beating\n            target.collider.takeHit(damage);\n        }\n        // target.collider.takeHit(damage);\n\n        this.amountRecentlyFired += amount;\n        this.checkOverHeat();\n    }\n}\n\nclass Torpedo {\n    constructor() {\n        this.gameObject = new _Components_js__WEBPACK_IMPORTED_MODULE_1__[\"GameObject\"](this, false);\n        this.mover = new _Components_js__WEBPACK_IMPORTED_MODULE_1__[\"Mover\"](this, this.gameObject);\n        this.collider = new _Components_js__WEBPACK_IMPORTED_MODULE_1__[\"Collider\"](this, this.gameObject, 100, 100, 1);\n        this.damage = 100;\n    }\n\n    die() {\n        this.gameObject.removeSelf();\n    }\n}\n\nclass PhotonTorpedoLauncher extends Device {\n    constructor(parent, count = 0, capacity = 0) {\n        super(parent, photonTorpedoLauncherType);\n        this.terminal = _Terminal_js__WEBPACK_IMPORTED_MODULE_0__[\"terminal\"];\n        this._capacity = capacity;\n        this._torpedoes = count;\n    }\n\n    addTorpedoes(n) {\n        this.checkDamage();\n        if (n <= 0) {\n            return;\n        } else if (this._torpedoes + n > this._capacity) {\n            this._torpedoes = this._capacity;\n            return;\n        }\n        this._torpedoes += n;\n    }\n\n    getTorpedoCount() {\n        return this._torpedoes;\n    }\n\n    calcAngleDegrees(x, y) {\n        return Math.atan2(y, x) * 180 / Math.PI;\n    }\n\n    // fire at sector x y , can be floats or ints\n    fire(sectorX, sectorY) {\n        this.checkDamage();\n        if (this.isDamaged()) {\n            this.terminal.echo(\"Photon torpedoes are damaged and can't fire.\");\n            return;\n        }\n        if (this._torpedoes <= 0) {\n            this.terminal.echo(\"Not enough torpedoes.\");\n            return;\n        }\n        this._torpedoes--;\n        // get global x y for target\n        let x = this.parent.gameObject.quadrant.globalX + sectorX;\n        let y = this.parent.gameObject.quadrant.globalY + sectorY;\n\n        // make torpedo\n        let torpedo = new Torpedo();\n        // place torpedo at our current position\n        torpedo.gameObject.placeIn(this.parent.gameObject.galaxy,\n            this.parent.gameObject.quadrant,\n            this.parent.gameObject.sector);\n\n        /// calculate the direction to shoot the torpedo\n        let quadrant = this.parent.gameObject.quadrant;\n        // deltas are to - from, BUT because the y axis is inverted from\n        // the normal math y axis you'll need to flip the y\n        let deltaX = x - this.parent.gameObject.x;\n        let deltaY = -1 * (y - this.parent.gameObject.y);\n        let theta = Math.atan2(deltaY, deltaX);    // -PI , PI\n\n        //\n        let moveGenerator = torpedo.mover.moveInDirection(theta, .5, Math.hypot(deltaX, deltaY));\n        let ret;\n        let keepGoing = true;\n        let hit = false;\n        let thingHit = null;\n        let trackingLocations = [];\n        do {\n            ret = moveGenerator.next(keepGoing);\n            // if we've left the quadrant then stop\n            if (torpedo.gameObject.quadrant !== quadrant) {\n                console.log(\"We've left the quadrant.\", quadrant, torpedo.gameObject.quadrant);\n                moveGenerator.next(false);\n                break;\n            }\n            trackingLocations.push(torpedo.gameObject.getSectorLocationFloat(false));\n            // check for collisions, could do a better job of broad sweeping here...\n            // get stuff in the torpedo's current sector, and the adjacent ones\n            // and nearby sectors\n            let sectors = torpedo.gameObject.sector.getAdjacentSectors(true);\n\n            sectors.forEach(sector => {\n                if (hit) return;\n                sector.container.getAllGameObjects().forEach(obj => {\n                    if (hit) return;\n                    // check that it's a collider and not the thing firing the torpedo, and it's not the torpedo\n                    if (obj.collider && obj !== torpedo && obj !== this.parent) {\n                        hit = torpedo.collider.collision(obj);\n                        if (hit) {\n                            thingHit = obj;\n                            console.log(\"HIT!!!\", obj);\n                        }\n                    }\n                });\n            });\n            if (hit) {\n                moveGenerator.next(false);\n                break;\n            }\n        } while (!ret.done);\n        // print tracking coordinates\n        for (let i = 0; i < trackingLocations.length; i++) {\n            //print first and last, otherwise skip every other one\n            if (i === 0) {\n                this.terminal.echo(`${trackingLocations[i]}    `);\n            } else if (i === trackingLocations.length - 1) {\n                this.terminal.echo(`${trackingLocations[i]}`);\n            } else if (i % 2 === 0) {\n                this.terminal.echo(`${trackingLocations[i]}    `);\n            }\n\n        }\n        this.terminal.echo(\"\\n\");\n        // we've hit something or left the quadrant\n        if (hit) {\n            thingHit.collider.takeHit(torpedo.damage);\n        } else {\n            this.terminal.printLine(\"Torpedo missed and has left the quadrant!\");\n        }\n        torpedo.die();\n    }\n}\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Devices.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Enemies/Enemies.js":
/*!*******************************************************!*\
  !*** ./web/js/games/superStarTrek/Enemies/Enemies.js ***!
  \*******************************************************/
/*! exports provided: ShipBuilder, AbstractEnemy, AbstractKlingon, Klingon, KlingonCommander, KlingonSuperCommander, Romulan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShipBuilder\", function() { return ShipBuilder; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractEnemy\", function() { return AbstractEnemy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbstractKlingon\", function() { return AbstractKlingon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Klingon\", function() { return Klingon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KlingonCommander\", function() { return KlingonCommander; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KlingonSuperCommander\", function() { return KlingonSuperCommander; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Romulan\", function() { return Romulan; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n/* harmony import */ var _Terminal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Terminal.js */ \"./web/js/games/superStarTrek/Terminal.js\");\n/* harmony import */ var _AI_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../AI.js */ \"./web/js/games/superStarTrek/AI.js\");\n/* harmony import */ var _Devices_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Devices.js */ \"./web/js/games/superStarTrek/Devices.js\");\n/* harmony import */ var _GameClock_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../GameClock.js */ \"./web/js/games/superStarTrek/GameClock.js\");\n\n\n\n\n\n\n// todo:: redo the ship classes as types\nclass ShipBuilder {\n    constructor() {\n        this.kHealth  = 40;\n        this.kEnergy  = 400;\n        this.kcHealth = 100;\n        this.kcEnergy = 1200;\n        this.kscHealth = 400;\n        this.kscEnergy = 1750;\n        this.rHealth = 40;\n        this.rEnergy = 700;\n    }\n\n    makeKlingon(galaxy, player, game, quadrant, sector) {\n        let k = new Klingon(galaxy, player, game);\n        k.collider.health = this.kHealth;\n        k.powerGrid.energy = this.kEnergy;\n        k.gameObject.placeIn(galaxy, quadrant, sector);\n        return k;\n    }\n\n    makeKlingonCommander(galaxy, player, game, quadrant, sector) {\n        let k = new KlingonCommander(galaxy, player, game);\n        k.collider.health = this.kcHealth;\n        k.powerGrid.energy = this.kcEnergy;\n        k.gameObject.placeIn(galaxy, quadrant, sector);\n        return k;\n    }\n    makeKlingonSuperCommander(galaxy, player, game, quadrant, sector) {\n        let k = new KlingonSuperCommander(galaxy, player, game);\n        k.collider.health = this.kscHealth;\n        k.powerGrid.energy = this.kscEnergy;\n        k.gameObject.placeIn(galaxy, quadrant, sector);\n        return k;\n    }\n    makeRomulan(galaxy, player, game, quadrant, sector) {\n        let k = new Romulan(galaxy, player, game);\n        k.collider.health = this.rHealth;\n        k.powerGrid.energy = this.rEnergy;\n        k.gameObject.placeIn(galaxy, quadrant, sector);\n        return k;\n    }\n\n}\n\nclass AbstractEnemy {\n    constructor(galaxy, player, game) {\n        this.powerGrid = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"PowerGrid\"](200, this);\n        this.galaxy = galaxy;\n        this.player = player;\n        this.game = game;\n        this.gameObject = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObject\"](this, true);\n        this.collider = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Collider\"](this, this.gameObject, 80, 80);\n\n        this.deviceContainer = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"DeviceContainer\"](this);\n        this.phasers = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"Phasers\"](this, this.powerGrid);\n        // this.photons = new PhotonTorpedoLauncher(this);\n        this.lifeSupport = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"LifeSupport\"](this, 2.0, _GameClock_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n        this.ai = new _AI_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this, galaxy, player);\n        this.terminal = _Terminal_js__WEBPACK_IMPORTED_MODULE_1__[\"terminal\"];\n        this.name = this.constructor.name;\n    }\n\n    die() {\n        this.lifeSupport.kill();\n        this.terminal.printLine(`${this.name} at ${this.gameObject.getSectorLocation()} was destroyed.`);\n        console.log(\"You killed \", this);\n        this.gameObject.removeSelf();\n        this.game.killEnemy(this);\n    }\n}\n\nclass AbstractKlingon extends AbstractEnemy {\n    constructor(galaxy, player, game) {\n        super(galaxy, player, game);\n    }\n}\n\nclass Klingon extends AbstractKlingon {\n    constructor(galaxy, player, game) {\n        super(galaxy, player, game);\n        this.collider.health = 40;\n        this.powerGrid.energy = 400;\n        this.name = \"Klingon Warbird\";\n    }\n}\n\nclass KlingonCommander extends AbstractKlingon {\n    constructor(galaxy, player, game) {\n        super(galaxy, player, game);\n        this.collider.health = 100;\n        this.powerGrid.energy = 1200;\n        this.name = \"Klingon Commander\";\n    }\n}\n\nclass KlingonSuperCommander extends AbstractKlingon {\n    constructor(galaxy, player, game) {\n        super(galaxy, player, game);\n        this.collider.health = 400;\n        this.powerGrid.energy = 1750;\n        this.name = \"Klingon Super Commander\";\n    }\n}\n\nclass Romulan extends AbstractEnemy {\n    constructor(galaxy, player, game) {\n        super(galaxy, player, game);\n        this.collider.health = 40;\n        this.powerGrid.energy = 700;\n        this.name = \"Romulan\";\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Enemies/Enemies.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Galaxy.js":
/*!**********************************************!*\
  !*** ./web/js/games/superStarTrek/Galaxy.js ***!
  \**********************************************/
/*! exports provided: Sector, Quadrant, Galaxy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sector\", function() { return Sector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Quadrant\", function() { return Quadrant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Galaxy\", function() { return Galaxy; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n\n\n/**\n Coordinate System\n Both internal and external are x then y (x - y)\n Quadrant is specified first or omitted, then the sector in that quadrant\n Users interact with a 1 based system with centered sectors\n so 1 - 1, 1 - 1 refers to the top left quadrant and the top left sector in it, the dead center of that sector\n 1 - 1, .5 - .5 refers to the same quadrant and sector but the top left corner of it\n\n Internally is basically the same but sectors are considered to start at the top left point\n and it's 0 based\n so 0 - 0, 0 - 0 refers to the top left quadrant and the top left sector in it at the top left corner of that sector\n and 0 - 0, 0.5 - 0.5 refers to the same quadrant and sector but the dead center of it\n **/\n\n\nclass Sector {\n    constructor(x, y, quadrant) {\n        this.container = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObjectContainer\"](this);\n        this.quadrant = quadrant;\n        this.galaxy = quadrant.galaxy;\n        // both x and y are 1 based\n        this.x = x; // my column # in the galaxy\n        this.y = y; // my row # in the galaxy\n        let coordinates = this.galaxy.getGlobalCoordinates(this);\n        this.globalX = coordinates.x;\n        this.globalY = coordinates.y;\n    }\n\n    getAdjacentSectors(includeSelf = false) {\n        return this.quadrant.getSectorsAdjacentTo(this, includeSelf);\n    }\n\n    // game object that take up the whole sector\n    // fill up the whole sector (Planets, Bases, Stars, BlackHoles, Ships, etc..)\n    isFull() {\n        return this.container.getAllGameObjects().some(obj => obj.gameObject.takesWholeSector);\n    }\n}\n\n// do quadrant know what's in them ?\n// or do what's in them know where they are ?\nclass Quadrant {\n    constructor(width, length, x, y, galaxy) {\n        this.container = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObjectContainer\"](this);\n        // todo:: setup number of stars per quadrant\n        this.galaxy = galaxy;\n        // both x and y are 1 based\n        this.x = x; // my column # in the galaxy\n        this.y = y; // my row # in the galaxy\n        // global coordinates\n        let coordinates = this.galaxy.getGlobalCoordinatesForQuadrant(this);\n        this.globalX = coordinates.x;\n        this.globalY = coordinates.y;\n        this.width = width;\n        this.length = length;\n        this.sectors = [];\n        this.hasSupernova = false;\n        // make sectors\n        for (let i = 0; i < this.length; i++) {\n            let row = [];\n            for (let j = 0; j < this.width; j++) {\n                row.push(new Sector(j, i, this));\n            }\n            this.sectors.push(row);\n        }\n    }\n\n    // internal coordinates x y\n    getSectorsAdjacentTo(sector, includeSelf = false) {\n        if(!sector instanceof Sector) return [];\n        let sectorX = sector.x;\n        let sectorY = sector.y;\n        let sectors = [];\n        for (let y = sectorY - 1; y <= sectorY + 1; y++) {\n            for (let x = sectorX - 1; x <= sectorX + 1; x++) {\n                if (this.areValidCoordinates(x, y)) {\n                    if (includeSelf || x !== sectorX && y !== sectorY) {\n                        sectors.push(this.sectors[y][x]);\n                    }\n                }\n            }\n        }\n        return sectors;\n    }\n\n    areValidCoordinates(x, y) {\n        if (y < 0 || y > this.length - 1) {\n            return false;\n        }\n        if (x < 0 || x > this.width - 1) {\n            return false;\n        }\n        return true;\n    }\n\n    getRandomSector() {\n        let x = Math.round(Math.random() * (this.width - 1));\n        let y = Math.round(Math.random() * (this.length - 1));\n        return this.sectors[y][x];\n    }\n\n    // x and y may be floats\n    // internal coordinates\n    getSector(x, y) {\n        if (!this.areValidCoordinates(x, y)) {\n            throw new Error(`There is no sector ${x} - ${y}.`);\n        }\n        x = Math.trunc(x);\n        y = Math.trunc(y);\n        return this.sectors[y][x];\n    }\n\n    // is there something in every sector ?\n    isFull() {\n        if (this.hasSupernova) {\n            return true;\n        }\n        return this.sectors.every(row => {\n            return row.every(sector => !sector.container.isEmpty())\n        });\n    }\n\n    getRandomEmptySector() {\n        // get all the empty sectors then randomly choose one\n        let emptySectors = this.sectors\n            .map(sectors => {\n                return sectors.filter(sector => sector.container.isEmpty());\n            })\n            .flat();\n        if (emptySectors.length === 0) return;\n        let idx = Math.round(Math.random() * (emptySectors.length - 1));\n        return emptySectors[idx];\n    }\n\n    getEdge(startX, startY, angle) {\n\n        return {\n            x: 0,\n            y: 0\n        }\n    }\n}\n\n/**\n * Holds quadrants\n * Has some spatial logic\n */\nclass Galaxy {\n    constructor(width, length, quadrantWidth = 10, quadrantLength = 10, initEmptyQuadrants = true) {\n        this.container = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObjectContainer\"](this);\n        this.width = width; // number of columns of quadrants\n        this.length = length;   // number of rows of quadrants\n        this.quadrantWidth = quadrantWidth; // number of columns of sectors in each quadrant\n        this.quadrantLength = quadrantLength;   // number of rows of sectors in each quadrant\n        // setup our grid\n        this.quadrants = [];\n        for (let i = 0; i < length; i++) {\n            this.quadrants.push(new Array(width));\n        }\n        // make quadrants\n        if (initEmptyQuadrants) {\n            for (let i = 0; i < this.quadrants.length; i++) {\n                let row = this.quadrants[i];\n                for (let j = 0; j < row.length; j++) {\n                    row[j] = new Quadrant(this.quadrantWidth, this.quadrantLength, j, i, this);\n                }\n            }\n        }\n    }\n\n    // return positive int value\n    static calculateDistance(sectorA, sectorB) {\n        let deltaX = Math.abs(sectorA.globalX - sectorB.globalX);\n        let deltaY = Math.abs(sectorA.globalY - sectorB.globalY);\n        return Math.hypot(deltaX, deltaY);\n    }\n\n    // convert user global coordinates\n    static convertUserCoordinates(x, y) {\n        return {x: x - .5, y: y - .5};\n    }\n\n    getRandomQuadrant() {\n        let x = Math.round(Math.random() * (this.width - 1));\n        let y = Math.round(Math.random() * (this.length - 1));\n\n        return this.quadrants[y][x];\n    }\n\n    // i is 0 based\n    getRow(i) {\n        return this.quadrants[i];\n    }\n\n    // calculate globalX and globalY\n    // refers to the top left point of the sector\n    getGlobalCoordinates(sector) {\n        let x = sector.quadrant.x * this.quadrantWidth + sector.x;\n        let y = sector.quadrant.y * this.quadrantLength + sector.y;\n        return {x, y};\n    }\n\n    // calculate globalX and globalY\n    // refers to the top left point of the sector\n    getGlobalCoordinatesForQuadrant(quadrant) {\n        let x = quadrant.x * this.quadrantWidth;\n        let y = quadrant.y * this.quadrantLength;\n        return {x, y};\n    }\n\n    // using global coordinates\n    // x and y can be floats\n    getSectorGlobal(x, y) {\n        let quadrantX = Math.floor(x / this.quadrantWidth);\n        let quadrantY = Math.floor(y / this.quadrantLength);\n        let sectorX = Math.floor(x % this.quadrantWidth);\n        let sectorY = Math.floor(y % this.quadrantLength);\n        return this.getSector(quadrantX, quadrantY, sectorX, sectorY);\n    }\n\n    // coordinates are 0 based\n    getSector(quadrantX, quadrantY, sectorX, sectorY) {\n        return this.getQuadrant(quadrantX, quadrantY).getSector(sectorX, sectorY);\n    }\n\n    // coordinates are 0 based\n    getQuadrant(quadrantX, quadrantY) {\n        // check bounds\n        if (quadrantY < 0 || quadrantY > this.length - 1) {\n            throw new Error(`There is no quadrant ${quadrantX + 1} - ${quadrantY + 1}.`);\n        }\n        if (quadrantX < 0 || quadrantX > this.width - 1) {\n            throw new Error(`There is no quadrant ${quadrantX + 1} - ${quadrantY + 1}.`);\n        }\n        return this.quadrants[quadrantY][quadrantX];\n    }\n}\n\nwindow.Galaxy = Galaxy;\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Galaxy.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Game.js":
/*!********************************************!*\
  !*** ./web/js/games/superStarTrek/Game.js ***!
  \********************************************/
/*! exports provided: GAME_LENGTH_SHORT, GAME_LENGTH_MEDIUM, GAME_LENGTH_LONG, SKILL_NOVICE, SKILL_FAIR, SKILL_GOOD, SKILL_EXPERT, SKILL_EMERITUS, GAME_MODE_REGULAR, GAME_MODE_TOURNAMENT, GAME_MODE_FROZEN, DEVICE_DAMAGE_ENABLED, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GAME_LENGTH_SHORT\", function() { return GAME_LENGTH_SHORT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GAME_LENGTH_MEDIUM\", function() { return GAME_LENGTH_MEDIUM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GAME_LENGTH_LONG\", function() { return GAME_LENGTH_LONG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SKILL_NOVICE\", function() { return SKILL_NOVICE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SKILL_FAIR\", function() { return SKILL_FAIR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SKILL_GOOD\", function() { return SKILL_GOOD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SKILL_EXPERT\", function() { return SKILL_EXPERT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SKILL_EMERITUS\", function() { return SKILL_EMERITUS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GAME_MODE_REGULAR\", function() { return GAME_MODE_REGULAR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GAME_MODE_TOURNAMENT\", function() { return GAME_MODE_TOURNAMENT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GAME_MODE_FROZEN\", function() { return GAME_MODE_FROZEN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEVICE_DAMAGE_ENABLED\", function() { return DEVICE_DAMAGE_ENABLED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Game; });\n/* harmony import */ var _utils_Service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Service.js */ \"./web/js/games/superStarTrek/utils/Service.js\");\n/* harmony import */ var _Galaxy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Galaxy.js */ \"./web/js/games/superStarTrek/Galaxy.js\");\n/* harmony import */ var _PlayerShips_Enterprise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PlayerShips/Enterprise.js */ \"./web/js/games/superStarTrek/PlayerShips/Enterprise.js\");\n/* harmony import */ var _Objects_Star_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Objects/Star.js */ \"./web/js/games/superStarTrek/Objects/Star.js\");\n/* harmony import */ var _Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Objects/StarBase.js */ \"./web/js/games/superStarTrek/Objects/StarBase.js\");\n/* harmony import */ var _Objects_Planet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Objects/Planet.js */ \"./web/js/games/superStarTrek/Objects/Planet.js\");\n/* harmony import */ var _Objects_BlackHole_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Objects/BlackHole.js */ \"./web/js/games/superStarTrek/Objects/BlackHole.js\");\n/* harmony import */ var _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Enemies/Enemies.js */ \"./web/js/games/superStarTrek/Enemies/Enemies.js\");\n/* harmony import */ var _commands_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./commands.js */ \"./web/js/games/superStarTrek/commands.js\");\n/* harmony import */ var _superStarTrek_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./superStarTrek.js */ \"./web/js/games/superStarTrek/superStarTrek.js\");\n/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Components */ \"./web/js/games/superStarTrek/Components.js\");\n/* harmony import */ var _GameClock_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./GameClock.js */ \"./web/js/games/superStarTrek/GameClock.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Game length options **/\nconst GAME_LENGTH_SHORT = 1;\nconst GAME_LENGTH_MEDIUM = 2;\nconst GAME_LENGTH_LONG = 4;\n\n/** Difficulty options **/\nconst SKILL_NOVICE = 1;\nconst SKILL_FAIR = 2;\nconst SKILL_GOOD = 3;\nconst SKILL_EXPERT = 4;\nconst SKILL_EMERITUS = 5;\n\n/** Game Mode **/\nconst GAME_MODE_REGULAR = 1;\nconst GAME_MODE_TOURNAMENT = 2;\nconst GAME_MODE_FROZEN = 3;\n\nconst DEVICE_DAMAGE_ENABLED = true;\n\n\n/**\n *\n */\nclass Game {\n    constructor(terminal, pane1, pane2, screen, features) {\n        this.terminal = terminal;\n        this.pane1 = pane1;\n        this.pane2 = pane2;\n        this.screen = screen;\n        this.screen.addSizeChangeCallback(this.onScreenSizeChange.bind(this));\n        this.hideInfoPanes();\n        this.service = new _utils_Service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.shipBuilder = new _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"ShipBuilder\"]();\n        this.galaxy = new _Galaxy_js__WEBPACK_IMPORTED_MODULE_1__[\"Galaxy\"](8, 8, 10, 10, true);\n        this.commands = [];\n\n        // defaults for testing\n        this.length = GAME_LENGTH_LONG;\n        this.clock = _GameClock_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\n        this.clock.init(100.0 * (31.0 * Math.random() + 20.0));\n        this.onElapseTime = this.onElapseTime.bind(this);\n        this.clock.register(this.onElapseTime);\n\n        this.timeRemaining = 7;\n        this.skill = SKILL_GOOD;\n        this.secretPassword = null;\n\n        // place player in random quad and sector\n        this.player = new _PlayerShips_Enterprise_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.terminal, this.clock);\n        if (false) {} else {\n            let quad = this.galaxy.getRandomQuadrant();\n            let sector = quad.getRandomSector();\n            this.player.gameObject.placeIn(this.galaxy, quad, sector);\n        }\n\n        if (_superStarTrek_js__WEBPACK_IMPORTED_MODULE_9__[\"DEBUG\"]) {\n            this.player.deviceContainer.damageRandomDevices(2);\n            // this.player.powerGrid._damage = 0;\n            // this.player.warpEngines._damage = 0;\n            // this.player.shortRangeSensors._damage = 0;\n        }\n        this.setDifficulty(this.skill);\n\n\n        // user input stuff\n        this.resolveUserCommand = null; // our promise function for awaiting input\n\n        // initial counts of enemies\n        this.initialEnemies = null;\n        this.initialKlingons = null;\n        this.initialCommanders = null;\n        this.initialSuperCommands = null;\n        this.initialRomulans = null;\n        this.fallenFoes = [];\n\n        this.federationPowerRemaining = null;\n    }\n\n    // set all the difficulty related game variables\n    setDifficulty(skill) {\n        switch (skill) {\n            case SKILL_NOVICE:\n                this.player.phasers.overheatThreshold = 1500;\n                // enemy values\n                this.shipBuilder.kHealth = 40;\n                this.shipBuilder.kEnergy = 400;\n                this.shipBuilder.kcHealth = 100;\n                this.shipBuilder.kcEnergy = 1200;\n                this.shipBuilder.kscHealth = 400;\n                this.shipBuilder.kscEnergy = 1750;\n                this.shipBuilder.rHealth = 40;\n                this.shipBuilder.rEnergy = 700;\n                _Components__WEBPACK_IMPORTED_MODULE_10__[\"Collider\"].setDeviceDamageRange(100.0, 275.0);\n                break;\n            case SKILL_FAIR:\n                this.player.phasers.overheatThreshold = 1500;\n                // enemy values\n                this.shipBuilder.kHealth = 40;\n                this.shipBuilder.kEnergy = 400;\n                this.shipBuilder.kcHealth = 100;\n                this.shipBuilder.kcEnergy = 1200;\n                this.shipBuilder.kscHealth = 400;\n                this.shipBuilder.kscEnergy = 1750;\n                this.shipBuilder.rHealth = 40;\n                this.shipBuilder.rEnergy = 700;\n                _Components__WEBPACK_IMPORTED_MODULE_10__[\"Collider\"].setDeviceDamageRange(80.0, 275.0);\n                break;\n            case SKILL_GOOD:\n                this.player.phasers.overheatThreshold = 1200;\n                // enemy values\n                this.shipBuilder.kHealth = 100;\n                this.shipBuilder.kEnergy = 700;\n                this.shipBuilder.kcHealth = 200;\n                this.shipBuilder.kcEnergy = 1500;\n                this.shipBuilder.kscHealth = 600;\n                this.shipBuilder.kscEnergy = 2500;\n                this.shipBuilder.rHealth = 100;\n                this.shipBuilder.rEnergy = 700;\n                _Components__WEBPACK_IMPORTED_MODULE_10__[\"Collider\"].setDeviceDamageRange(50.0, 250.0);\n                break;\n            case SKILL_EXPERT:\n                this.player.phasers.overheatThreshold = 1000;\n                // enemy values\n                this.shipBuilder.kHealth = 100;\n                this.shipBuilder.kEnergy = 700;\n                this.shipBuilder.kcHealth = 200;\n                this.shipBuilder.kcEnergy = 1500;\n                this.shipBuilder.kscHealth = 600;\n                this.shipBuilder.kscEnergy = 2500;\n                this.shipBuilder.rHealth = 100;\n                this.shipBuilder.rEnergy = 700;\n                _Components__WEBPACK_IMPORTED_MODULE_10__[\"Collider\"].setDeviceDamageRange(50.0, 200.0);\n                break;\n            case SKILL_EMERITUS:\n                this.player.phasers.overheatThreshold = 800;\n                // enemy values\n                this.shipBuilder.kHealth = 100;\n                this.shipBuilder.kEnergy = 700;\n                this.shipBuilder.kcHealth = 200;\n                this.shipBuilder.kcEnergy = 1500;\n                this.shipBuilder.kscHealth = 600;\n                this.shipBuilder.kscEnergy = 2500;\n                this.shipBuilder.rHealth = 100;\n                this.shipBuilder.rEnergy = 700;\n                _Components__WEBPACK_IMPORTED_MODULE_10__[\"Collider\"].setDeviceDamageRange(50.0, 200.0);\n                break;\n            default:\n                console.error(\"invalid skill setting.\", skill);\n                return;\n        }\n        this.skill = skill;\n        /**\n         *\n         */\n    }\n\n    calculateKlingonStrength() {\n        let remainingKlingons = this.galaxy.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"Klingon\"]);\n        let remainingCommanders = this.galaxy.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"KlingonCommander\"]);\n        let remainingSuperCommanders = this.galaxy.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"KlingonSuperCommander\"]);\n        return remainingKlingons + (remainingCommanders * 4) + (remainingSuperCommanders * 10);\n    }\n\n    decrementFederationPower(timePassed) {\n        this.federationPowerRemaining -= timePassed * this.calculateKlingonStrength();\n    }\n\n    recalculateTimeRemaining() {\n        // resources is the way that federation power is tracked\n        // given the enemy strength federation power will be exhausted by the end of the remaining time\n        this.timeRemaining = this.federationPowerRemaining / this.calculateKlingonStrength();\n    }\n\n    onElapseTime(days) {\n        this.decrementFederationPower(days);\n        this.recalculateTimeRemaining();\n    }\n\n    calculateScore() {\n        let killedKlingonsAll = this.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractKlingon\"]);\n        let killedKlingons = this.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"Klingon\"]);\n        let killedCommanders = this.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"KlingonCommander\"]);\n        let killedSuperCommanders = this.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"KlingonSuperCommander\"]);\n        let killedRomulans = this.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"Romulan\"]);\n        let score = killedKlingons * 10 + killedCommanders * 50 + killedSuperCommanders * 200;\n        score += killedRomulans * 20;\n\n        let timeElapsed = this.clock.getElapsedTime();\n        if (timeElapsed === 0) timeElapsed = 1;\n        let klingonsPerDate = killedKlingonsAll / timeElapsed;\n        score += klingonsPerDate * 500;\n\n        // victory adds 100 * skill\n        if (this.isVictory()) {\n            score += this.skill * 100;\n        }\n        if (this.player.isDead()) {\n            score -= 200;\n        }\n        return score;\n    }\n\n    getGameLengthStr() {\n        switch (this.length) {\n            case GAME_LENGTH_SHORT:\n                return 'short';\n            case GAME_LENGTH_MEDIUM:\n                return 'medium';\n            case GAME_LENGTH_LONG:\n                return 'long';\n            default:\n                console.error(\"unknown game length\");\n        }\n    }\n\n    getDifficultyStr() {\n        switch (this.skill) {\n            case SKILL_NOVICE:\n                return 'novice';\n            case SKILL_FAIR:\n                return 'fair';\n            case SKILL_GOOD:\n                return 'good';\n            case SKILL_EXPERT:\n                return 'expert';\n            case SKILL_EMERITUS:\n                return 'emeritus';\n            default:\n                console.error(\"unknown difficulty\");\n        }\n    }\n\n    killEnemy(enemy) {\n        this.fallenFoes.push(enemy);\n    }\n\n    getNumberOfTypeKilled(type) {\n        return this.fallenFoes.reduce((carry, foe) => {\n            if (foe instanceof type) carry++;\n            return carry;\n        }, 0);\n    }\n\n    async onScreenSizeChange() {\n        // unregister / register commands from or to the main terminal\n        // depending on screen size\n        // then render\n        if (this.screen.isSmallScreen || this.screen.isTinyScreen) {\n            this.terminal.registerCommand(this.scanCommand);\n            this.terminal.registerCommand(this.chartCommand);\n        } else if (this.screen.isMediumScreen) {\n            this.terminal.registerCommand(this.chartCommand);\n            this.terminal.unregisterCommand(this.scanCommand);\n        } else if (this.screen.isLargeScreen) {\n            this.terminal.unregisterCommand(this.scanCommand);\n            this.terminal.unregisterCommand(this.chartCommand);\n        }\n        await this.render();\n    }\n\n    async render() {\n        if (this.screen.isSmallScreen) {\n            // render only main pane\n        } else if (this.screen.isMediumScreen) {\n            // render info pane 1 only\n            await this.renderPane1();\n        } else if (this.screen.isLargeScreen) {\n            // render all panes\n            await this.renderPane1();\n            await this.renderPane2();\n        } else {\n            // assume tiny screen\n            // render only main pane\n        }\n    }\n\n    hideInfoPanes() {\n        this.pane1.$el.hide();\n        this.pane2.$el.hide();\n    }\n\n    showInfoPanes() {\n        if (this.screen.isSmallScreen) {\n            // render only main pane\n        } else if (this.screen.isMediumScreen) {\n            // render info pane 1 only\n            this.pane1.$el.show();\n        } else if (this.screen.isLargeScreen) {\n            // render all panes\n            this.pane1.$el.show();\n            this.pane2.$el.show();\n        } else {\n            // assume tiny screen\n            // render only main pane\n        }\n    }\n\n\n    async renderPane1() {\n        this.pane1.clearAll();\n        await this.pane1Command.run();\n        this.pane1.print();\n    }\n\n    async renderPane2() {\n        this.pane2.clearAll();\n        await this.pane2Command.run();\n        this.pane2.print();\n    }\n\n    setup() {\n        this.makeCommands();\n\n        // these methods should probably be on the game .... whatever\n        // do some setup for our galaxy, make the immovable objects\n        // stars, planets, bases\n        this.makeStars();\n        this.makePlanets();\n        this.makeBases();\n        this.makeBlackHoles();\n\n        /// make our moveable object (klingons, klingonCommanders, Romulans)\n        this.makeEnemies();\n\n        // set time remaining, and federation power\n        //\n        this.timeRemaining = 7 * this.length;\n        this.federationPowerRemaining = this.calculateKlingonStrength() * this.timeRemaining;\n\n        // technically this should be last so we can't have users trying to do stuff\n        this.registerCommands();\n        this.showInfoPanes();\n        this.onScreenSizeChange();\n        this.loop();\n    }\n\n    start() {\n        this.setup();\n\n        let starBases = this.galaxy.container.getGameObjectsOfType(_Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n        // quadrants are listed x - y\n        let sbq = starBases.map(base =>\n            [base.gameObject.quadrant.x + 1, base.gameObject.quadrant.y + 1].join(\" - \")\n        );\n\n        let baseStr = sbq.join(\"   \");\n        // change terminal settings\n        let startText = `It is stardate ${this.clock.starDate.toFixed(0)}. Federation is being attacked by\na deadly Klingon invasion force. As captain of the United Starship U.S.S. Enterprise, it is your mission to seek out and destroy this invasion force of ${this.numberOfKlingons} klingons.\n\nThe Klingons will overpower the Federation in ${this.timeRemaining} days, every Klingon you destroy will weaken this invasion force and buy us more time.\n\nYou will have ${starBases.length} supporting starbases.\nStarbase locations-   ${baseStr}\n\nThe Enterprise is currently in ${this.player.gameObject.getLocation()}\n\nTRY TYPING \"COMMANDS\"\n\nGood Luck!\n`;\n        this.terminal.$terminal.echo(startText);\n    }\n\n    // if there are enemies in the player's current quadrant\n    isInCombat() {\n        let quadrant = this.player.gameObject.quadrant;\n        return quadrant.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractEnemy\"]) > 0;\n    }\n\n    // maybe this could be a generator function\n    // or use generator functions\n    async loop() {\n        let wasInCombat = false;\n\n        while (!this.isDefeat() && !this.isVictory()) {\n            // user turn\n            let userTurn = true;\n            let hasMovedInCombat = false;\n            let justArrivedIntoCombat = false;\n            let inCombat = false;\n            while (userTurn && !this.isVictory() && !this.isDefeat()) {\n                await this.render();\n                let command;\n                try {\n                    let response = await this.terminal.runUserCommand();\n                    command = response.command;\n                    await command.run();\n                    if(this.player.docked) this.player.rechargeEverything();\n                } catch (e) {\n                    this.terminal.printLine(e.message || `Can't do that, Captain!`);\n                }\n\n\n                this.terminal.print();\n                // when does the command run ?\n\n                // info commands and instant ship commands (like scan or set warp) never consume a turn\n                if (command.isInfoCommand() || command.isInstantShipCommand()) {\n                    continue;\n                }\n                // update time remaining in case the balance of power has shifted\n                this.recalculateTimeRemaining();\n\n                inCombat = this.isInCombat();\n                // don't let the ai shoot us when we don't let them shoot us immediately\n                justArrivedIntoCombat = inCombat && !wasInCombat;\n\n                // in combat you can move, then attack\n                if (inCombat) {\n                    if (command.isMoveCommand()) {\n                        // if we already moved in combat, or just arrived into combat\n                        // then moves consume a turn\n                        if (hasMovedInCombat || !wasInCombat) {\n                            userTurn = false;\n                        }\n                        hasMovedInCombat = true;\n                    } else if (command.isAttackCommand()) {\n                        userTurn = false;\n                    } else {\n                        userTurn = false;\n                    }\n                } else {    // if not in combat then keep going I guess ?\n                    hasMovedInCombat = false;\n                    continue;\n                }\n            }\n\n            if (this.isVictory() || this.isDefeat()) break;\n\n            // now it's the ai's turn, start shooting if we're in combat\n            if (inCombat && !justArrivedIntoCombat) {\n                this.player.gameObject.quadrant.container.getGameObjectsOfType(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractEnemy\"]).forEach(enemy => {\n                    enemy.ai.takeTurn();\n                });\n            }\n            wasInCombat = inCombat;\n            this.terminal.print();\n            // update time remaining in case the balance of power has shifted\n            this.recalculateTimeRemaining();\n        }\n        let victory = this.isVictory();\n        let defeat = this.isDefeat();\n\n        // save a log of the game\n        let score = this.calculateScore();\n        this.service.createGameLog(score, victory);\n\n        this.terminal.skipLine(2);\n\n        // show end game screen\n        if (victory) {\n            this.terminal.printLine(\"You win!\");\n            this.terminal.printLine(`It is stardate ${this.clock.starDate.toFixed(1)}.`);\n            this.terminal.print();\n        } else if (defeat) {\n            this.terminal.printLine(\"You lose...\");\n            this.terminal.printLine(`It is stardate ${this.clock.starDate.toFixed(1)}.`);\n            if (this.timeRemaining <= 0) {\n                this.terminal.printLine(`Your time has run out and the Federation has been conquered.\nWith your starship confiscated by the Klingon High Command, you relocate to a mining facility and learn to love gagh.`);\n            } else if (this.player.isDead()) {\n                this.terminal.printLine(`The Enterprise has been destroyed in battle.`);\n                this.terminal.skipLine();\n                this.terminal.printLine(`Dulce et decorum est pro patria mori.\\nThe Federation will be destroyed.`);\n                this.terminal.skipLine();\n            }\n            this.terminal.print();\n        }\n\n        //print score\n        this.terminal.silent = false;\n        let scorePrinter = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ScoreCommand\"](this, this.terminal, this.player);\n        scorePrinter.run({});\n        this.terminal.print();\n    }\n\n    // time ran out\n    // enterprise destroyed\n    isDefeat() {\n        return this.player.isDead() || this.timeRemaining <= 0;\n    }\n\n    // destroy all klingons\n    isVictory() {\n        return this.galaxy.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractKlingon\"]) === 0;\n    }\n\n    makeCommands() {\n        this.commands = [];\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"RepairCommand\"](this.terminal, this.player));\n        this.chartCommand = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ChartCommand\"](this, this.terminal, this.player);\n        let commandsCommand = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"CommandsCommand\"](this, this.terminal);\n        let statusCommand = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"StatusCommand\"](this, this.terminal, this.player, this.galaxy);\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ShieldsCommand\"](this, this.terminal, this.player));\n        this.commands.push(commandsCommand);\n        this.commands.push(statusCommand);\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"RequestCommand\"](this, this.terminal, statusCommand));\n        this.commands.push(this.chartCommand);\n        this.scanCommand = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ShortRangeScanCommand\"](this, this.terminal, this.player, this.chartCommand, statusCommand);\n        this.commands.push(this.scanCommand);\n        if (_superStarTrek_js__WEBPACK_IMPORTED_MODULE_9__[\"DEBUG\"]) {\n            this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"LongRangeScanCommand\"](this, this.terminal, this.player));\n        }\n\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"GetHelpCommand\"](this, this.terminal, commandsCommand));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"MoveCommand\"](this, this.terminal, this.player, this.galaxy));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"PhasersCommand\"](this, this.terminal, this.player));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"DockCommand\"](this, this.terminal, this.player));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"PhotonsCommand\"](this, this.terminal, this.player));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ReportCommand\"](this, this.terminal, this.galaxy, this.player));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ScoreCommand\"](this, this.terminal, this.player));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"WarpFactorCommand\"](this.terminal, this.player));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"DamageReportCommand\"](this, this.terminal, this.player));\n        this.commands.push(new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"RestCommand\"](this, this.terminal));\n\n        let status = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"StatusCommand\"](this, this.pane1, this.player, this.galaxy);\n        let chart = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ChartCommand\"](this, this.pane2, this.player);\n        this.pane1Command = new _commands_js__WEBPACK_IMPORTED_MODULE_8__[\"ShortRangeScanCommand\"](this, this.pane1, this.player, chart, status);\n        this.pane2Command = chart;\n    }\n\n    // register all our commands with our terminal,\n    // all commands get pass to runCommand with the command name\n    // and the terminal's commandObj, we add a few things onto that object\n    // note : we return the result of runCommand in case it wants to\n    // modify the output\n    registerCommands() {\n        this.commands.forEach(command => {\n            this.terminal.registerCommand(command);\n        });\n    }\n\n    makeBlackHoles() {\n        let blackHolesPerQuadrant = 3;\n        this.galaxy.quadrants.forEach(row => {\n            row.forEach(quad => {\n                for (let i = 0; i < blackHolesPerQuadrant; i++) {\n                    let sector = quad.getRandomEmptySector();\n                    let b = new _Objects_BlackHole_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n                    b.gameObject.placeIn(this.galaxy, quad, sector);\n                }\n            });\n        });\n    }\n\n    makeStars() {\n        let minNumberOfStars = 1;\n        let maxNumberOfStars = 9;\n\n        // place random stars in each quadrant\n        this.galaxy.quadrants.forEach((row, i) => {\n            row.forEach((quadrant, j) => {\n                // for this quandrant, randomly generate number of stars\n                let numStars = Math.round(\n                    Math.random() * (maxNumberOfStars - minNumberOfStars) +\n                    minNumberOfStars\n                );\n                for (let s = 0; s < numStars; s++) {\n                    let star = new _Objects_Star_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n                    let sector = quadrant.getRandomEmptySector();\n                    if (!sector.container.isEmpty()) debugger;\n                    star.gameObject.placeIn(this.galaxy, sector.quadrant, sector);\n                }\n            });\n        });\n    }\n\n    // planets seem to be new ?\n    makePlanets() {\n        let minNumberOfPlanets = 5;\n        let maxNumberOfPlanets = 10;\n        let numberOfPlanets = Math.round(\n            minNumberOfPlanets + (maxNumberOfPlanets / 3) * Math.random()\n        );\n        console.log(`number of planets = ${numberOfPlanets}`);\n\n        // place planets\n        for (\n            let planetsPlaced = 0;\n            planetsPlaced < numberOfPlanets;\n            planetsPlaced++\n        ) {\n            // find a random quadrant without a planet\n            let quadrant;\n            do {\n                quadrant = this.galaxy.getRandomQuadrant();\n            } while (quadrant.container.getCountOfGameObjects(_Objects_Planet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]) > 0);\n            let sector = quadrant.getRandomEmptySector();\n            // set up planet\n            let planet = new _Objects_Planet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n            planet.randomlyGenerate();\n\n            // place in galaxy\n            planet.gameObject.placeIn(this.galaxy, quadrant, sector);\n\n            console.log(`planet at ${planet.gameObject.getLocation()}`);\n        }\n    }\n\n    makeBases() {\n        let minNumberOfBases = 2;\n        let maxNumberOfBases = 5;\n        let numberOfBases = Math.round(\n            Math.random() * (maxNumberOfBases - minNumberOfBases) + minNumberOfBases\n        );\n        let bases = [];\n\n        while (bases.length < numberOfBases) {\n            // pick a quandrant\n            let quadrant = this.galaxy.getRandomQuadrant();\n            // if it doesn't already have a base\n            if (quadrant.container.getCountOfGameObjects(_Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) === 0) {\n                // and if it's not too close to an existing base\n                let tooClose = false;\n                for (let i = 0; i < bases.length; i++) {\n                    let previousBase = bases[i];\n                    let previousQuadrant = previousBase.gameObject.quadrant;\n                    let xDiff = quadrant.x - previousQuadrant.x;\n                    let yDiff = quadrant.y - previousQuadrant.y;\n                    let distanceSquared = xDiff * xDiff + yDiff * yDiff;\n                    if (\n                        distanceSquared < 6.0 * (6 - numberOfBases) &&\n                        Math.random() < 0.75\n                    ) {\n                        tooClose = true;\n                        break;\n                    }\n                }\n                // then place a base in that quandrant\n                if (!tooClose) {\n                    // what sector ????\n                    // for the moment choose a random sector\n                    console.log(\"making starbase\");\n                    let newBase = new _Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n                    let sector = quadrant.getRandomEmptySector(); // todo:: check that sector is empty\n                    newBase.gameObject.placeIn(this.galaxy, quadrant, sector);\n                    bases.push(newBase);\n                }\n            }\n        }\n        // todo:: update the star chart to show a base (we always know where bases are)\n    }\n\n    makeEnemies() {\n        let numberOfEnemies = Math.round(\n            this.length *\n            14 *\n            ((this.skill + 1 - 2 * Math.random()) * this.skill * 0.1 + 0.15)\n        );\n        console.log(`number of enemies = ${numberOfEnemies}`);\n        // split out the enemies into klingons and such\n        let numberOfCommanders = Math.round(\n            this.skill + 0.0625 * numberOfEnemies * Math.random()\n        );\n        let maxNumberOfCommanders = 10;\n        numberOfCommanders = Math.min(maxNumberOfCommanders, numberOfCommanders);\n\n        let numberOfSuperCommanders = this.skill > SKILL_FAIR ? 1 : 0;\n        // make klingons\n        let numberOfKlingons =\n            numberOfEnemies - numberOfCommanders - numberOfSuperCommanders;\n        this.numberOfKlingons = numberOfKlingons;\n        let numberOfRomulans = Math.round(2.0 * Math.random() * this.skill);\n        this.initialEnemies = numberOfEnemies;\n        this.initialKlingons = numberOfKlingons;\n        this.initialCommanders = numberOfCommanders;\n        this.initialSuperCommands = numberOfSuperCommanders;\n        this.initialRomulans = numberOfRomulans;\n        this.makeKlingons(numberOfKlingons);\n        this.makeKlingonCommanders(numberOfCommanders);\n        this.makeKlingonSuperCommanders(numberOfSuperCommanders);\n        this.makeRomulans(numberOfRomulans);\n    }\n\n    makeKlingonSuperCommanders(n) {\n        // todo:::find a random quadrant with < 9 enemies in it\n        // place in random sector\n        // place in quadrant without enemies or the player\n        for (let i = 0; i < n; i++) {\n            let quadrant;\n            if (this.skill >= SKILL_GOOD) {\n                do {\n                    quadrant = this.galaxy.getRandomQuadrant();\n                } while (quadrant.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractKlingon\"]) === 0 || this.player.gameObject.quadrant === quadrant);\n            } else if (this.skill >= SKILL_FAIR) {\n                do {\n                    quadrant = this.galaxy.getRandomQuadrant();\n                } while (this.player.gameObject.quadrant === quadrant);\n            } else {\n                do {\n                    quadrant = this.galaxy.getRandomQuadrant();\n                } while (quadrant.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractKlingon\"]) > 0 || this.player.gameObject.quadrant === quadrant);\n            }\n            console.log(\"placing super commander\");\n            let sector = quadrant.getRandomEmptySector();\n            this.shipBuilder.makeKlingonSuperCommander(this.galaxy, this.player, this, quadrant, sector);\n        }\n    }\n\n    makeKlingonCommanders(n) {\n        // place in quadrant without enemies\n        for (let i = 0; i < n; i++) {\n            let quadrant;\n            if (this.skill >= SKILL_GOOD) {\n                do {\n                    quadrant = this.galaxy.getRandomQuadrant();\n                } while (quadrant.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractKlingon\"]) === 0 || this.player.gameObject.quadrant === quadrant);\n            } else if (this.skill >= SKILL_FAIR) {\n                do {\n                    quadrant = this.galaxy.getRandomQuadrant();\n                } while (this.player.gameObject.quadrant === quadrant);\n            } else {\n                do {\n                    quadrant = this.galaxy.getRandomQuadrant();\n                } while (quadrant.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_7__[\"AbstractKlingon\"]) > 0 || this.player.gameObject.quadrant === quadrant);\n            }\n\n            console.log(\"placing commander\");\n            let sector = quadrant.getRandomEmptySector();\n            this.shipBuilder.makeKlingonCommander(this.galaxy, this.player, this, quadrant, sector);\n        }\n    }\n\n    makeKlingons(n) {\n        // place klingons into quadrants in clumps\n        let maxSize = 9;\n        let clumpSize = Math.min(\n            0.25 * this.skill * (9 - this.length) + 1,\n            maxSize\n        );\n        // since we're getting a lot of random quadrants here\n        // we'll not repeatedly call this.galaxy.getRandomly() and test\n        let quadrants = this.galaxy.quadrants.flat();\n        // filter our the player quadrant\n        quadrants = quadrants.filter(q => q !== this.player.gameObject.quadrant);\n        while (n > 0) {\n            // get a random quadrant without klingons\n            let idx = Math.round(Math.random() * (quadrants.length - 1));\n            let quadrant = quadrants.splice(idx, 1)[0];\n            if (!quadrant) { // if we somehow ran out of quadrants then just peace out\n                break;  //\n            }\n            // randomize the amount of klingons to place a bit\n            let r = Math.random();\n            let toPlace = Math.round((1 - r * r) * clumpSize);\n            toPlace = Math.min(toPlace, n);\n            for (let i = 0; i < toPlace; i++) {\n                // check if quadrant is full\n                if (quadrant.isFull()) {\n                    break;\n                }\n                // place klingons at random sectors (todo:: figure how they're actually dropped in)\n                let sector = quadrant.getRandomEmptySector();\n                console.log(\"placing klingon\");\n                this.shipBuilder.makeKlingon(this.galaxy, this.player, this, quadrant, sector);\n                n--;\n            }\n        }\n    }\n\n    makeRomulans(n) {\n        for (let i = 0; i < n; i++) {\n            // don't place in players quadrant\n            let quadrant;\n            do {\n                quadrant = this.galaxy.getRandomQuadrant();\n            } while (this.player.gameObject.quadrant === quadrant);\n\n            let sector = quadrant.getRandomEmptySector();\n            console.log(\"placing romulan\");\n            this.shipBuilder.makeRomulan(this.galaxy, this.player, this, quadrant, sector);\n        }\n    }\n}\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Game.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/GameClock.js":
/*!*************************************************!*\
  !*** ./web/js/games/superStarTrek/GameClock.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_dist_mitt_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/dist/mitt.es.js */ \"./web/lib/dist/mitt.es.js\");\n\n\nclass GameClock {\n    constructor() {\n        this.emitter = new _lib_dist_mitt_es_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this._initialStarDate = null;\n        this._starDate = null;\n    }\n\n    init(date) {\n        this._initialStarDate = date;\n        this._starDate = date;\n    }\n\n    get starDate() {\n        return this._starDate;\n    }\n\n    getElapsedTime() {\n        return this._starDate - this._initialStarDate;\n    }\n\n    elapseTime(days) {\n        this._starDate += days;\n        this.emitter.emit(\"timeElapse\", days);\n    }\n    unregister(fn) {\n        this.emitter.off('timeElapse', fn);\n    }\n\n    register(fn) {\n        this.emitter.on(\"timeElapse\", fn);\n    }\n}\nconst clock = new GameClock();\n/* harmony default export */ __webpack_exports__[\"default\"] = (clock);\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/GameClock.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Menu.js":
/*!********************************************!*\
  !*** ./web/js/games/superStarTrek/Menu.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Menu; });\n/* harmony import */ var _Game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game.js */ \"./web/js/games/superStarTrek/Game.js\");\n/* harmony import */ var _superStarTrek_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./superStarTrek.js */ \"./web/js/games/superStarTrek/superStarTrek.js\");\n\n\n\n\n// starting a game\n// choose mode\n// if regular\n// choose length\n// choose difficulty\n// choose secret password\n// if tournament\n// choose tournament #\n// choose length\n// choose difficulty\n// choose secret password\n// start\n// if frozen\n// choose file name\n// if not found start menu again\nclass Menu {\n    constructor(terminal) {\n        this.mode = null;\n        this.length = null;\n        this.difficulty = null;\n        this.secretPassword = null;\n        this.tournamentNumber = null;\n        this.terminal = terminal;\n        this.startGamePs = \"COMMAND>\";\n        this.game = null;\n    }\n\n    skipLine(n) {\n        var str = \"\";\n        for (let i = 0; i < n; i++) {\n            str += \"\\n\";\n        }\n        this.terminal.$terminal.echo(str);\n    }\n\n    start() {\n        this.mode = null;\n        this.length = null;\n        this.difficulty = null;\n        this.secretPassword = null;\n        this.skipLine(2);\n        // tag line\n        this.terminal.$terminal.echo(`Latest update- ${_superStarTrek_js__WEBPACK_IMPORTED_MODULE_1__[\"LAST_UPDATED_AT\"]}.`);\n        this.skipLine(1);\n        // ask mode\n        this.ask(\n            \"Would you like a regular, tournament, or frozen game?\",\n            [\"regular\", \"tournament\", \"frozen\"],\n            this.chooseMode.bind(this)\n        );\n    }\n\n    chooseMode(input) {\n        input = input.toLowerCase();\n        if (/regular/.test(input)) {\n            this.mode = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"GAME_MODE_REGULAR\"];\n            this.skipLine(1);\n            this.ask(\n                \"Would you like a Short, Medium, or Long game? \",\n                [\"short\", \"medium\", \"long\"],\n                this.chooseLength.bind(this)\n            );\n        } else if (/tournament/.test(input)) {\n            this.mode = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"GAME_MODE_TOURNAMENT\"];\n            this.terminal.$terminal.echo(\"Sorry that's not implemented.\");\n            this.start();\n        } else if (/frozen/.test(input)) {\n            this.mode = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"GAME_MODE_FROZEN\"];\n            this.terminal.$terminal.echo(\"Sorry that's not implemented.\");\n            this.start();\n        }\n    }\n\n    chooseLength(input) {\n        input = input.toLowerCase();\n        if (/short/.test(input)) {\n            this.length = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"GAME_LENGTH_SHORT\"];\n        } else if (/medium/.test(input)) {\n            this.length = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"GAME_LENGTH_MEDIUM\"];\n        } else if (/long/.test(input)) {\n            this.length = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"GAME_LENGTH_LONG\"];\n        }\n        this.ask(\n            \"Are you a Novice, Fair, Good, Expert, or Emeritus player? \",\n            [\"novice\", \"fair\", \"good\", \"expert\", \"emeritus\"],\n            this.chooseDifficulty.bind(this)\n        );\n    }\n\n    chooseDifficulty(input) {\n        input = input.toLowerCase();\n        if (/novice/.test(input)) {\n            this.difficulty = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"SKILL_NOVICE\"];\n        } else if (/fair/.test(input)) {\n            this.difficulty = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"SKILL_FAIR\"];\n        } else if (/good/.test(input)) {\n            this.difficulty = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"SKILL_GOOD\"];\n        } else if (/expert/.test(input)) {\n            this.difficulty = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"SKILL_EXPERT\"];\n        } else if (/emeritus/.test(input)) {\n            this.difficulty = _Game_js__WEBPACK_IMPORTED_MODULE_0__[\"SKILL_EMERITUS\"];\n        } else {\n            // hmmm ....\n        }\n        this.prompt(\n            \"Please type in a secret password (9 characters maximum)-\",\n            this.chooseSecretPassword.bind(this), this.startGamePs\n        );\n    }\n\n    chooseSecretPassword(input) {\n        this.secretPassword = input;\n        this.finish();\n    }\n\n    finish() {\n        this.terminal.$terminal.change_settings({ps: this.startGamePs});\n        // give the game our settings\n        this.game.setDifficulty(this.difficulty);\n        this.game.length = this.length;\n        this.game.secretPassword = this.secretPassword;\n\n        // start game now !!!!\n        this.game.start();\n    }\n\n    /**\n     *  register question\n     // intercept response\n     // unregister question\n     // call method , pass input\n     **/\n    prompt(question, method, ps) {\n        this.terminal.$terminal.echo(question);\n        this.terminal.$terminal.register(\"command\", {\n            name: \"ask\",\n            method: cmd => {\n                let input = this.terminal.$terminal.get_input(); // save this\n                this.terminal.$terminal.unregister(\"command\", \"ask\");\n                // delay a bit so our terminal can finish processing\n                setTimeout(() => method(input), 10);\n                if (ps) {\n                    return {ps};\n                }\n            },\n            regex: new RegExp(`[\\s\\S]*`, \"i\")\n        });\n    }\n\n    /**\n     *  register question\n     // intercept response\n     // unregister question\n     // call method , pass input\n     **/\n    ask(question, options, method) {\n        this.terminal.$terminal.echo(question);\n        this.terminal.$terminal.register(\"command\", {\n            name: \"ask\",\n            method: cmd => {\n                let input = this.terminal.$terminal.get_input(); // save this\n                this.terminal.$terminal.unregister(\"command\", \"ask\");\n                // delay a bit so our terminal can finish processing\n                setTimeout(() => method(input), 10);\n            },\n            regex: new RegExp(`(${options.join(\"|\")})`, \"i\")\n        });\n        // saving the input and then running a callback would be better but\n        // my modifications broke the plugin\n        // todo:: fix callbacks\n        // $ptty.register(\"callback\", {\n        //   name: \"ask\",\n        //   method: cmd => {\n        //     console.log(\"done\");\n        //   }\n        // });\n    }\n}\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Menu.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Objects/BlackHole.js":
/*!*********************************************************!*\
  !*** ./web/js/games/superStarTrek/Objects/BlackHole.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return BlackHole; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n\n\nclass BlackHole {\n    constructor() {\n        this.gameObject = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObject\"](this, true);\n        this.collider = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Collider\"](this, this.gameObject, 100, 100);\n        this.collider.makeIndestructible();\n        this.name = \"black hole\";\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Objects/BlackHole.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Objects/Planet.js":
/*!******************************************************!*\
  !*** ./web/js/games/superStarTrek/Objects/Planet.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Planet; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n\n\nclass Planet {\n    constructor(pClass, hasCrystals, known = false) {\n        this.gameObject = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObject\"](this, true);\n        this.collider = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Collider\"](this, this.gameObject, 80, 80, 1000);\n        this._planetClass = null;\n        this.planetClass = pClass; // M N or O\n        this.hasCrystals = hasCrystals;\n        this.known = false;\n        this.name = \"planet\";\n    }\n\n    get planetClass() {\n        return this._planetClass;\n    }\n\n    set planetClass(c) {\n        if (!c) return;\n        c = c.toLowerCase();\n        if (c !== \"m\" && c !== \"n\" && c !== \"o\") {\n            throw new Error(`Planet Class ${c} invalid.`);\n        }\n        this._planetClass = c;\n    }\n\n    // randomly set the values for our planet\n    randomlyGenerate() {\n        // set the class\n        let r = Math.random();\n        if (r > 2 / 3) {\n            this.planetClass = \"m\";\n        } else if (r > 1 / 3) {\n            this.planetClass = \"n\";\n        } else {\n            this.planetClass = \"o\";\n        }\n        // determine if it has crystals\n        this.hasCrystals = Math.random() > 2 / 3;\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Objects/Planet.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Objects/Star.js":
/*!****************************************************!*\
  !*** ./web/js/games/superStarTrek/Objects/Star.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Star; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n\n\nclass Star {\n    constructor() {\n        this.gameObject = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObject\"](this, true);\n        this.collider = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Collider\"](this, this.gameObject, 80, 80, 1000);\n        this.collider.makeIndestructible();\n        this.name = \"Star\";\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Objects/Star.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Objects/StarBase.js":
/*!********************************************************!*\
  !*** ./web/js/games/superStarTrek/Objects/StarBase.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return StarBase; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n\n\nclass StarBase {\n    constructor() {\n        this.gameObject = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObject\"](this, true);\n        this.collider = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Collider\"](this, this.gameObject, 100, 100, 1000);\n        this.name = \"star base\";\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Objects/StarBase.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/PlayerShips/Enterprise.js":
/*!**************************************************************!*\
  !*** ./web/js/games/superStarTrek/PlayerShips/Enterprise.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Enterprise; });\n/* harmony import */ var _Components_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Components.js */ \"./web/js/games/superStarTrek/Components.js\");\n/* harmony import */ var _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Enemies/Enemies.js */ \"./web/js/games/superStarTrek/Enemies/Enemies.js\");\n/* harmony import */ var _Galaxy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Galaxy.js */ \"./web/js/games/superStarTrek/Galaxy.js\");\n/* harmony import */ var _Devices_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Devices.js */ \"./web/js/games/superStarTrek/Devices.js\");\n\n\n\n\n\n\nconst CONDITION_GREEN = 1;\nconst CONDITION_YELLOW = 2;\nconst CONDITION_RED = 3;\nconst CONDITION_DOCKED = 4;\n\nclass Enterprise {\n    constructor(terminal, clock) {\n        this.gameObject = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"GameObject\"](this);\n        this.mover = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Mover\"](this, this.gameObject);\n        this.deviceContainer = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"DeviceContainer\"](this);\n        this.powerGrid = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"PowerGrid\"](3000.0, this);\n        this.collider = new _Components_js__WEBPACK_IMPORTED_MODULE_0__[\"Collider\"](this, this.gameObject, 80, 80, 1500);\n\n        this.warpFactor = 5.0;\n\n        this.dockedRepairSpeed = 1;\n        this.undockedRepairSpeed = .3;\n        this.docked = false;\n        this.dockedAt = null;\n        this.name = \"Enterprise\";\n        this.dead = false;\n        this.terminal = terminal;\n\n        // devices\n        this.phasers = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"Phasers\"](this, this.powerGrid);\n\n        this.photons = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"PhotonTorpedoLauncher\"](this, 10, 10);\n        this.shields = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"Shields\"](this, 2500, this.powerGrid);\n\n        this.shortRangeSensors = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"Device\"](this, _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"shortRangeSensorType\"]);\n        // this.longRangeSensors = new Device(this, \"Long Range Sensors\");\n        this.lifeSupport = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"LifeSupport\"](this, 4.0, clock);\n        this.warpEngines = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"Device\"](this, _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"warpEngineType\"]);\n        this.impulseEngines = new _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"Device\"](this, _Devices_js__WEBPACK_IMPORTED_MODULE_3__[\"impulseEngineType\"]);\n        // this.subspaceRadio = new Device(this, \"Subspace Radio\");\n        // this.shuttleCraft = new Device(this, \"Shuttle Craft\");\n        // this.computer = new Device(this, \"Computer\");\n        // this.transporter = new Device(this, \"Transporter\");\n        // this.shieldControl = new Device(this, \"Shield Control\");\n        // this.probesLauncher = new Device(this, \"Probe Launcher\");\n        window.e = this;\n    }\n\n    isDead() {\n        return this.lifeSupport.reserves <= 0 || this.dead;\n    }\n\n    die() {\n        this.lifeSupport.kill();\n        this.terminal.echo(\"Enterprise destroyed!!!!\\n\");\n        this.dead = true;\n        this.gameObject.removeSelf();\n    }\n\n    firePhasersMultiTarget(targets) {\n        let totalToFire = targets.reduce((carry, entry) => carry + entry.amount, 0);\n        if (totalToFire > this.powerGrid.energy) {\n            throw new Error(\"Not enough energy.\");\n        }\n        // expend energy\n        this.powerGrid.useEnergy(totalToFire);\n        targets.forEach(entry => {\n            this.phasers.fire(entry.amount, entry.enemy)\n        });\n        // consider putting this somewhere else\n        this.phasers.coolDown();\n    }\n\n    repairHull() {\n        this.collider.repair();\n    }\n\n    dock(starbase) {\n        if (this.docked) {\n            return;\n        }\n        this.rechargeEverything();\n        this.docked = true;\n        this.dockedAt = starbase;\n        this.deviceContainer.setRepairSpeed(this.dockedRepairSpeed);\n    }\n\n    rechargeEverything() {\n        this.lifeSupport.recharge();\n        if(this.powerGrid.isOk()) this.powerGrid.recharge();\n        if(this.photons.isOk()) this.photons.addTorpedoes(this.photons._capacity - this.photons.getTorpedoCount());\n        if(this.shields.isOk()) this.shields.recharge();\n        this.repairHull();\n    }\n\n    undock() {\n        debugger;\n        this.docked = false;\n        this.dockedAt = null;\n        this.deviceContainer.setRepairSpeed(this.undockedRepairSpeed);\n    }\n\n    impulseTo(sector) {\n        // same as warp using warp factor = 1\n        if (!sector instanceof _Galaxy_js__WEBPACK_IMPORTED_MODULE_2__[\"Sector\"]) {\n            throw new Error(\"Can't move there\");\n        }\n        this.impulseEngines.checkDamage();\n        this.powerGrid.checkDamage();\n        if(this.docked) this.undock();\n\n        // calculate distance, and energy required\n        let distance = Galaxy.calculateDistance(this.gameObject.sector, sector);\n        //( .1 * distance in sectors = distance in quadrants ) * warpFactor ^ 3\n        let energy = .1 * distance;\n        if(this.shields.up) energy *= 2;\n        if(this.powerGrid.energy < energy) {\n            throw new Error(\"Not enough energy.\");\n        }\n\n        this.mover.moveToSector(sector);\n        this.powerGrid.useEnergy(energy);\n    }\n\n    setWarpFactor(warpFactor) {\n        if(typeof warpFactor !== \"number\" || Number.isNaN(warpFactor)) {\n            return;\n        } else if (warpFactor < 1.0 || warpFactor > 10.0) {\n            return;\n        }\n        this.warpFactor = warpFactor;\n    }\n\n    warpTo(sector) {\n        if (!sector instanceof _Galaxy_js__WEBPACK_IMPORTED_MODULE_2__[\"Sector\"]) {\n            throw new Error(\"Can't move there\");\n        }\n        this.warpEngines.checkDamage();\n        this.powerGrid.checkDamage();\n        if(this.docked) this.undock();\n\n        // calculate distance, and energy required\n        let distance = Galaxy.calculateDistance(this.gameObject.sector, sector);\n        //( .1 * distance in sectors = distance in quadrants ) * warpFactor ^ 3\n        let energy = .1 * distance * Math.pow(this.warpFactor, 3);\n        if(this.shields.up) energy *= 2;\n        if(this.powerGrid.energy < energy) {\n            throw new Error(\"Not enough energy.\");\n        }\n\n        this.mover.moveToSector(sector);\n        this.powerGrid.useEnergy(energy);\n    }\n\n    getCondition() {\n        let enemies = this.gameObject.quadrant.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_1__[\"AbstractEnemy\"]);\n        if (this.docked) {\n            return CONDITION_DOCKED;\n        } else if (enemies > 0) {\n            return CONDITION_RED;\n        } else if (this.powerGrid.energy < 1000) {\n            return CONDITION_YELLOW;\n        } else {\n            return CONDITION_GREEN;\n        }\n    }\n\n    shieldsUp() {\n        this.powerGrid.useEnergy(50);\n        this.shields.raise();\n    }\n\n    shieldsDown() {\n        this.shields.lower();\n    }\n\n    printCondition() {\n        switch (this.getCondition()) {\n            case CONDITION_DOCKED:\n                return \"DOCKED\";\n            case CONDITION_GREEN:\n                return \"GREEN\";\n            case CONDITION_YELLOW:\n                return \"YELLOW\";\n            case CONDITION_RED:\n                return \"RED\";\n            default:\n                console.error('condition not recognized.');\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/PlayerShips/Enterprise.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Terminal.js":
/*!************************************************!*\
  !*** ./web/js/games/superStarTrek/Terminal.js ***!
  \************************************************/
/*! exports provided: terminal, pane1, pane2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"terminal\", function() { return terminal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pane1\", function() { return pane1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pane2\", function() { return pane2; });\n/**\n *\n */\nclass Terminal {\n    constructor(takesInput = true) {\n        this.$el = null;\n        this.$terminal = null;\n        this._out = \"\";\n        this.silent = false;\n        this._command = null;\n        this._input = null;\n        this._argumentStr = null;\n        this._arguments = null;\n        this.questionMode = false;\n        this.question = \"\";\n        this.commands = [];\n        window.terminal = this;\n        this.paging = true;\n        this.takesInput = takesInput;\n    }\n\n    hideInput() {\n        this.$el.find(\".prompt\").hide();\n    }\n\n    init($terminal, theme) {\n        this.$el = $terminal;\n        this.$terminal = this.$el.Ptty({\n            ps: \"\",\n            autocomplete: true,\n            // native_css: false,\n            theme: theme,\n            i18n: {\n                welcome: \"-SUPER- STAR TREK\\n\\n\",\n                error_not_found: \"Command not recognized, try 'help'.\",\n                error_bad_methdo: \"Command malformed. Try 'help'.\"\n            }\n        });\n        if(!this.takesInput) {\n            this.hideInput();\n        }\n    }\n\n    setPrompt(ps) {\n        this.$terminal.change_settings({ps});\n        this.$terminal.run_command();\n        // clear fake command\n        this.$el.find(\".content > div\").last().remove();\n    }\n\n    echo(str) {\n        if(this.silent) return;\n        this._out += str;\n    }\n\n    newLine() {\n        if(this.silent) return;\n        this._out += \"\\n\";\n    }\n\n    printLine(str = '') {\n        if(this.silent) return;\n        this._out += str + \"\\n\";\n    }\n\n    skipLine(n = 1) {\n        if(this.silent) return;\n        for(let i = 0; i < n; i++) {\n            this._out += \"\\n\";\n        }\n    }\n\n    getOutput() {\n        return this._out;\n    }\n\n    clear() {\n        if(this.silent) return;\n        this._out = \"\";\n    }\n\n    clearAll() {\n        this.$el.find(\".content\").empty();\n        this._out = \"\";\n    }\n\n    /**\n     * Print my output\n     */\n    print() {\n        if(this.silent) return;\n        if(!this._out) return;\n        this.$terminal.echo(this._out);\n        this._out = \"\";\n    }\n\n\n    // register all our commands with our terminal,\n    // all commands get pass to runCommand with the command name\n    // and the terminal's commandObj, we add a few things onto that object\n    // note : we return the result of runCommand in case it wants to\n    // modify the output\n    registerCommand(command) {\n        // check that we don't already have the command\n        let has = this.commands.find(c => command.name === c.name);\n        if(has) return;\n        this.commands.push(command);\n        this.$terminal.register(\"command\", {\n            name: command.name,\n            method:  commandObj => this.runCommand(command.name, commandObj),\n            regex: command.regex\n        });\n    }\n\n    unregisterCommand(command) {\n        let idx = this.commands.findIndex(c => command.name === c.name);\n        if(idx === -1) return;\n        this.commands.splice(idx, 1);\n        this.$terminal.unregister(\"command\", command.name);\n    }\n\n    parseCommand(commandObj, command) {\n        let input = this.$terminal.get_input();\n        let args = input.replace(command.regex, \"\");    // remove the command from the arguments\n        this._command = command;\n        this._input = input; // original input\n        this._argumentStr = args;    //string arguments\n        this._arguments = args.split(/\\s/).filter(str => str.length > 0);    //array of args\n    }\n\n    getArguments() {\n        return this._arguments;\n    }\n\n    hasOption(regex) {\n        return regex.test(this._argumentStr);\n    }\n\n    // the only hitch here is question mode\n    // in question mode we have the\n    async runCommand(commandName, commandObj) {\n        // find a command by name\n        let command = this.commands.find(c => c.name === commandName);\n        if (!command) {\n            commandObj.out = \"Not recognized.\";\n            return commandObj;\n        }\n\n        // get input parsing arguments\n        this.parseCommand(commandObj, command);\n        try {\n            this.resolveUserCommand({command});\n        } catch(e) {\n            console.error(e);\n            this.printLine(\"OOOF, that went really wrong. Try that again.\");\n            this.print();\n        }\n    }\n\n    runUserCommand() {\n        return new Promise((resolve, reject) => {\n            this.resolveUserCommand = resolve;\n        });\n    }\n\n    /**\n     * Ask a question, returns resolved user input\n     * @param question\n     * @returns {Promise<void>}\n     */\n    async ask(question) {\n        // print existing stuff ?\n        this.print();\n        // this.questionMode = true;\n        // this.question = question;\n        let oldPrompt = this.$terminal.get_settings().ps;\n        this.setPrompt(question);\n        return new Promise((resolve, reject) => {\n            this.answer = (commandObj) => {\n                let userInput = this.$terminal.get_input();\n                this.$terminal.unregister('command','answer');\n                this.$terminal.change_settings({ps: oldPrompt});\n                this.$terminal.set_command_option({next: null});\n                resolve(userInput);\n                return commandObj;\n            };\n            this.$terminal.register('command', {\n                name: \"answer\",\n                method: this.answer.bind(this),\n                regex: /answer/\n            });\n            this.$terminal.set_command_option({next: 'answer'});\n        })\n    }\n\n    /**\n     *\n     * Specify a column width or defaults to the largest\n     * @param grid array<array<string>>\n     * @param padLeft bool add padding to left (true), add padding to right (false)\n     * @param columnWidth int\n     * @param individualWidths bool (set the column widths individually or use the widest column)\n     * @returns array<array<string>>\n     */\n    formatGrid(grid, padLeft = true, columnWidth = null, individualWidths = false) {\n        if(!individualWidths) {\n            if (columnWidth === null) {\n                // get longest string that we'll use for data\n                var longest = grid.reduce((l, row) => {\n                    var l2 = row.reduce((carry, d) => {\n                        return carry > d.length ? carry : d.length;\n                    }, 0);\n                    return l > l2 ? l : l2;\n                }, 0);\n                columnWidth = longest;\n            }\n            return grid.map(row => {\n                return row.map(str => {\n                    if (padLeft) {\n                        return str.padStart(columnWidth)\n                    } else {\n                        return str.padEnd(columnWidth);\n                    }\n                });\n            });\n        } else {\n            let widths = [];\n            grid.forEach(row => {\n                row.forEach((str, i) => {\n                    if(!widths[i]) {\n                        widths[i] = str.length;\n                        return;\n                    }\n                    let prev = widths[i];\n                    if(str.length > prev) {\n                        widths[i] = str.length;\n                    }\n                })\n            });\n            return grid.map(row => {\n                return row.map((str, i) => {\n                    if (padLeft) {\n                        return str.padStart(widths[i])\n                    } else {\n                        return str.padEnd(widths[i]);\n                    }\n                });\n            });\n        }\n    }\n\n    /**\n     * @param grid\n     * @param columnSeparator\n     * @param rowSeparator\n     */\n    printGrid(grid, columnSeparator = \" \", rowSeparator = \"\\n\", echo = false) {\n        var rows = [];\n        for (var i = 0; i < grid.length; i++) {\n            // make line of text for row\n            var row = grid[i];\n            var line = row.join(columnSeparator);\n            rows.push(line + \"\\n\");\n        }\n        var text = rows.join(rowSeparator);\n        if (echo) {\n            this.$terminal.echo(text);\n        }\n        return text;\n    };\n}\n\nconst terminal = new Terminal();\nconst pane1 = new Terminal(false);\nconst pane2 = new Terminal(false);\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Terminal.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/Tests.js":
/*!*********************************************!*\
  !*** ./web/js/games/superStarTrek/Tests.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Tests; });\nclass Tests {\n    calcAngle(from, to) {\n        let deltaX = to[0] - from[0];\n        let deltaY = -1 * (to[1] - from[1]);\n        return Math.atan2(deltaY, deltaX);\n    }\n\n    convertToDegrees(rad) {\n        return rad * 180 / Math.PI;\n    }\n\n    testAngle() {\n        let me = [0, 0];\n        let topLeft = [-1, -1];\n        let top = [0, -1];\n        let topRight = [1, -1];\n        let right = [1, 0];\n        let bottomRight = [1, 1];\n        let bottom = [0, 1];\n        let bottomLeft = [-1, 1];\n        let left = [-1, 0];\n\n        let points = [topLeft, top, topRight, right, bottomRight, bottom, bottomLeft, left];\n        points.forEach(point => {\n            let angle = this.calcAngle(me, point);\n            console.log(angle);\n            console.log(this.convertToDegrees(angle));\n            debugger;\n        })\n    }\n}\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/Tests.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/commands.js":
/*!************************************************!*\
  !*** ./web/js/games/superStarTrek/commands.js ***!
  \************************************************/
/*! exports provided: optionRegexifier, regexifier, RepairCommand, RestCommand, WarpFactorCommand, DamageReportCommand, ScoreCommand, ReportCommand, PhotonsCommand, PhasersCommand, ShieldsCommand, CommandsCommand, GetHelpCommand, MoveCommand, StatusCommand, RequestCommand, ChartCommand, ShortRangeScanCommand, LongRangeScanCommand, DockCommand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"optionRegexifier\", function() { return optionRegexifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regexifier\", function() { return regexifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RepairCommand\", function() { return RepairCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RestCommand\", function() { return RestCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WarpFactorCommand\", function() { return WarpFactorCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DamageReportCommand\", function() { return DamageReportCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScoreCommand\", function() { return ScoreCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReportCommand\", function() { return ReportCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PhotonsCommand\", function() { return PhotonsCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PhasersCommand\", function() { return PhasersCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShieldsCommand\", function() { return ShieldsCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CommandsCommand\", function() { return CommandsCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetHelpCommand\", function() { return GetHelpCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MoveCommand\", function() { return MoveCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StatusCommand\", function() { return StatusCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RequestCommand\", function() { return RequestCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChartCommand\", function() { return ChartCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShortRangeScanCommand\", function() { return ShortRangeScanCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LongRangeScanCommand\", function() { return LongRangeScanCommand; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DockCommand\", function() { return DockCommand; });\n/* harmony import */ var _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Enemies/Enemies.js */ \"./web/js/games/superStarTrek/Enemies/Enemies.js\");\n/* harmony import */ var _Devices_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Devices.js */ \"./web/js/games/superStarTrek/Devices.js\");\n/* harmony import */ var _Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Objects/StarBase.js */ \"./web/js/games/superStarTrek/Objects/StarBase.js\");\n/* harmony import */ var _Objects_Star_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Objects/Star.js */ \"./web/js/games/superStarTrek/Objects/Star.js\");\n/* harmony import */ var _PlayerShips_Enterprise_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PlayerShips/Enterprise.js */ \"./web/js/games/superStarTrek/PlayerShips/Enterprise.js\");\n/* harmony import */ var _Objects_Planet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Objects/Planet.js */ \"./web/js/games/superStarTrek/Objects/Planet.js\");\n/* harmony import */ var _Objects_BlackHole_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Objects/BlackHole.js */ \"./web/js/games/superStarTrek/Objects/BlackHole.js\");\n// command structure\n// abbreviation (alias for command entry)\n// name (command name used for entry )\n// helpName (the title of the help file)\n// device used\n// full name (the full name of the command)\n// options ?\n// exact matcher\n\n\n\n\n\n\n\n\n// same thing as the regexifier but with the end of line character added\n// so that you when we break apart the command by \\s it identifies it correctly\nfunction optionRegexifier(...strings) {\n    strings = strings.sort((a, b) => b.length - a.length);\n    strings = strings.map(str => str + \"\\\\s*\"); // 0 or more white space characters\n    return new RegExp(`^\\\\s*(${strings.join(\"|\")})\\\\s*$`, 'i');\n}\n\n// handy function for taking a bunch of strings that work as aliases and\n// making a regex to match any of them that begin a string\nfunction regexifier(...strings) {\n    // sort the possible command names by length that way\n    // it'll match the longest possible thing first\n    strings = strings.sort((a, b) => b.length - a.length);\n    strings = strings.map(str => str + \"(\\\\s+|$)\"); // one or more white space characters\n    // otherwise p is matched when given the word \"photons\"\n    // the capture group is so that \"p\" with no whitespace is still matched\n    return new RegExp(`^\\\\s*(${strings.join(\"|\")})\\\\s*`, 'i');\n}\n\nconst INFO_COMMAND = \"info\";\nconst ATTACK_COMMAND = \"attack\";\nconst MOVE_COMMAND = \"move\";\nconst TIME_EXPENDING_SHIP_COMMAND = \"not instant ship command\";\nconst INSTANT_SHIP_COMMAND = \"instant ship command\";\n\n// what to do for options\n// todo:: make command classes\nclass Command {\n    constructor() {\n        // defaults\n        this.abbreviation = null;\n        this.name = null;\n        this.regex = null;\n        this.fullName = null;\n        this.deviceUsed = \"\";\n        this.info = \"No info.\";\n        this.type = null;\n        this.options = {};\n        this.modes = {};\n    }\n\n    // makes an option for you\n    addOption(name, ...matchingStrs) {\n        this.options[name] = optionRegexifier(...matchingStrs);\n    }\n\n    // makes a mode for you\n    addMode(name, ...matchingStrs) {\n        this.modes[name] = optionRegexifier(...matchingStrs);\n    }\n\n    // one of the arguments given matches some option regex then option\n    // is true\n    // returns map of options {optionName => found, ...}\n    getOption(args) {\n        let matched = {};\n        Object.keys(this.options).forEach(prop => {\n            matched[prop] = args.some(str => this.options[prop].test(str));\n        });\n        return matched;\n    }\n\n    // the first argument given matches a mode regex then mode is true\n    // returns map of modes {modeName => found, ...}\n    getMode(args) {\n        let matched = {};\n        Object.keys(this.modes).forEach(prop => {\n            matched[prop] = this.modes[prop].test(args[0])\n        });\n        return matched;\n    }\n\n    /** Command Type functions **/\n    isInstantShipCommand() {\n        return this.type === INSTANT_SHIP_COMMAND;\n    }\n\n    isInfoCommand() {\n        return this.type === INFO_COMMAND;\n    }\n\n    isAttackCommand() {\n        return this.type === ATTACK_COMMAND;\n    }\n\n    isMoveCommand() {\n        return this.type === MOVE_COMMAND;\n    }\n\n    makeInfo() {\n        // set mnemonic shortest abbrev full name text\n    }\n}\n\nclass RepairCommand extends Command {\n    constructor(terminal, player) {\n        super();\n        this.terminal = terminal;\n        this.player = player;\n        this.abbreviation = \"rep\";\n        this.name = \"repair\";\n        this.fullName = \"set repair mode\";\n        this.regex = regexifier(this.abbreviation, this.name, this.fullName);\n        this.type = INSTANT_SHIP_COMMAND;\n        this.addMode(\"setRepairMode\", \"m\", \"mode\");\n        this.addMode(\"setRepairPriority\", \"set-priority\", \"p\", \"priority\");\n        this.info = `\n    Mnemonic: REPAIR\n    Abbreviation: REP\n    Syntax: \n        1) REPAIR mode [mode]\n        2) REPAIR set priority \n    Syntax 1) Modes: \n        \"even\"  - tell repair crews to spread their time evenly across all damaged devices\n        \"least\" - tell repair crews to repair the least damaged devices first\n        \"most\"  - tell repair crews to repair the most damaged devices first\n        \"priority\" (alias \"p\")    - tell repair to repair devices by their priorities\n     Examples : \n     repair even\n     repair set-priority\n      \n     Syntax 2) REPAIR set priority \n        This is how you set the priorities for your devices. You'll be asked to give a repair priority (a number 1 - # of devices) for each device. Lower numbers are higher priority.   \n        `;\n    }\n\n    async setRepairPriority() {\n        // consider printing off the current priorities\n\n        // go through each device\n        let devices = this.player.deviceContainer.getDevices();\n        for(let i = 0; i < devices.length; i++) {\n            let device = devices[i];\n            let priority = this.player.deviceContainer.getDeviceRepairPriority(device.type);\n            this.terminal.printLine(`${device.type.name}'s priority is currently ${priority}.`);\n            let validResponse = false;\n            let newPriority;\n            while(!validResponse) {\n                let response = await this.terminal.ask(`Set ${device.type.name} priority to : `);\n                newPriority = Number.parseInt(response);\n                if(Number.isNaN(newPriority) || newPriority < 0) {\n                    this.terminal.printLine(\"Beg pardon, Captain?\");\n                } else {\n                    validResponse = true;\n                }\n            }\n            this.player.deviceContainer.setRepairPriority(device.type, newPriority);\n        }\n    }\n\n    setRepairMode() {\n        let args = this.terminal.getArguments();\n        let argEven = optionRegexifier('e', 'even');\n        let argLeast = optionRegexifier('l', 'least');\n        let argMost = optionRegexifier('m', 'most');\n        let argPrio = optionRegexifier('p', 'priority');\n        if (argEven.test(args[1])) {\n            this.player.deviceContainer.setRepairMode(_Devices_js__WEBPACK_IMPORTED_MODULE_1__[\"REPAIR_STRATEGY_EVEN\"]);\n        } else if (argLeast.test(args[1])) {\n            this.player.deviceContainer.setRepairMode(_Devices_js__WEBPACK_IMPORTED_MODULE_1__[\"REPAIR_STRATEGY_LEAST\"]);\n        } else if (argMost.test(args[1])) {\n            this.player.deviceContainer.setRepairMode(_Devices_js__WEBPACK_IMPORTED_MODULE_1__[\"REPAIR_STRATEGY_MOST\"]);\n        } else if (argPrio.test(args[1])) {\n            this.player.deviceContainer.setRepairMode(_Devices_js__WEBPACK_IMPORTED_MODULE_1__[\"REPAIR_STRATEGY_PRIORITY\"]);\n        } else {\n            this.terminal.printLine(\"repair mode not recognized (even, least, most, or priority is acceptable.)\");\n        }\n    }\n\n    async run() {\n        let args = this.terminal.getArguments();\n        let {setRepairMode, setRepairPriority} = this.getMode(args);\n        if (setRepairMode) {\n            this.setRepairMode();\n        } else if (setRepairPriority) {\n            // begin interactive questioning\n            await this.setRepairPriority();\n        } else {\n            this.terminal.printLine(\"Beg pardon, Captain?\");\n            return;\n        }\n    }\n}\n\nclass RestCommand extends Command {\n    constructor(game, terminal) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.name = \"rest\";\n        this.regex = regexifier(this.name);\n        this.type = TIME_EXPENDING_SHIP_COMMAND;\n        this.info = `\n  Mnemonic:  REST\n  Shortest abbreviation:  R\n  Full command:  REST <NUMBER OF STARDATES>\n\nThis command simply allows the specified number of stardates to go\nby.  This is useful if you have suffered damages and wish to wait\nuntil repairs are made before you go back into battle.\n\nIt is not generally advisable to rest while you are under attack by\nKlingons.\n        `\n    }\n\n    run() {\n        let days = Number.parseFloat(this.terminal.getArguments());\n        this.game.clock.elapseTime(days);\n    }\n}\n\nclass WarpFactorCommand extends Command {\n    constructor(terminal, player) {\n        super();\n        this.terminal = terminal;\n        this.player = player;\n        this.abbreviation = \"w\";\n        this.name = \"warp\";\n        this.fullName = \"Warp Factor\";\n        this.regex = regexifier(this.abbreviation, this.name, this.fullName);\n        this.type = INSTANT_SHIP_COMMAND;\n        this.info = `\n  Mnemonic:  WARP\n  Shortest abbreviation:  W\n  Full command:  WARP <number>\n\nYour warp factor controls the speed of your starship.  The larger the\nwarp factor, the faster you go and the more energy you use.\n\nYour minimum warp factor is 1.0 and your maximum warp factor is 10.0\n(which is 100 times as fast and uses 1000 times as much energy).  At\nspeeds above warp 6 there is some danger of causing damage to your\nwarp engines; this damage is larger at higher warp factors and also\ndepends on how far you go at that warp factor.\n\nAt exactly warp 10 there is some probability of entering a so-called\n\"time warp\" and being thrown forward or backward in time.  The farther\nyou go at warp 10, the greater is the probability of entering the\ntime warp.`\n    }\n\n    run() {\n        let warpFactor = Number.parseFloat(this.terminal.getArguments()[0]);\n        if (Number.isNaN(warpFactor)) {\n            this.terminal.printLine(\"Beg your pardon, Captain?\");\n            return;\n        }\n        if (warpFactor < 1.0) {\n            this.terminal.printLine(`Helmsman Sulu- \"We can't go below warp 1, Captain.\"`);\n        } else if (warpFactor <= 6.0) {\n            this.terminal.printLine(`Helmsman Sulu- \"Warp factor ${warpFactor.toFixed(1)}, Captain.\"`);\n        } else if (warpFactor < 8.0) {\n            this.terminal.printLine(`Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\"`);\n        } else if (warpFactor >= 8.0 && warpFactor < 10.0) {\n            this.terminal.printLine(`Engineer Scott- \"Aye, Captain, but our engines may not take it.\"`);\n        } else if (warpFactor === 10.0) {\n            this.terminal.printLine(`Engineer Scott- \"Aye, Captain, we'll try it.\"`);\n        } else if (warpFactor > 10.0) {\n            this.terminal.printLine(`Helmsman Sulu- \"Our top speed is warp 10, Captain.\"`);\n        } else {\n            this.terminal.printLine(\"Beg your pardon, Captain?\");\n            return;\n        }\n        this.player.setWarpFactor(warpFactor);\n    }\n}\n\nclass DamageReportCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.abbreviation = \"da\";\n        this.name = \"damages\";\n        this.fullName = \"damage report\";\n        this.regex = regexifier(this.abbreviation, this.name, \"damage\", this.fullName);\n        this.type = INFO_COMMAND;\n        this.addOption(\"alpha\", \"a\", \"alpha\", \"alphabetically\");\n        this.addOption(\"all\", \"all\");\n        this.info = `\n  Mnemonic:  DAMAGES\n  Shortest abbreviation:  DA \n  Syntax: [command] [options]\n  Options: all, alpha \n  \n    example usage : \n    COMMAND> damage alpha    \n    - sorted by alphabetically by device name\n    COMMAND> da\n    - sorted by time \n    COMMAND> da all\n    - show all devices, sort by default (damage descending)\n    \n========    DETAILS =========    \nAt any time you may ask for a damage report to find out what devices\nare damaged and how long it will take to repair them.  Naturally,\nrepairs proceed faster at a starbase.\n\nIf you suffer damages while moving, it is possible that a subsequent\ndamage report will not show any damage.  This happens if the time\nspent on the move exceeds the repair time, since in this case the\ndamaged devices were fixed en route.\n\nDamage reports are free.  They use no energy or time, and can be done\nsafely even in the midst of battle.`;\n    }\n\n    run() {\n        // get sort option if any\n        let {alpha, all} = this.getOption(this.terminal.getArguments());\n\n        let sortedDevices = this.player.deviceContainer.devices.slice();\n        if (alpha) { // sort alphabetically\n            sortedDevices.sort((a, b) => a.name.localeCompare(b.name));\n        } else {    // sort by damage\n            sortedDevices.sort((a, b) => b.damage - a.damage);\n        }\n\n        // filter out non-damaged devices\n        if (!all) {\n            sortedDevices = sortedDevices.filter(d => d.damage > 0);\n        }\n\n        if (sortedDevices.length === 0) {\n            this.terminal.skipLine(1);\n            this.terminal.printLine(\"All systems operational.\");\n            this.terminal.skipLine(1);\n            return;\n        }\n        this.terminal.skipLine(1);\n        this.terminal.printLine(`Repair mode: ${this.player.deviceContainer.repairMode}`);\n        let report = [\n            [\"\", \"\", \"\", \"-REPAIR TIMES-\"],\n            [\"Priority\", \"DEVICE\", \"IN FLIGHT\", \"DOCKED\"],\n            ...sortedDevices.map(d => {\n                return [\n                    '' + this.player.deviceContainer.getDeviceRepairPriority(d.type),\n                    d.name,\n                    d.timeToRepairInFlight().toFixed(2),\n                    d.timeToRepairAtDock().toFixed(2)\n                ]\n            })\n        ];\n\n        this.terminal.printLine(this.terminal.printGrid(this.terminal.formatGrid(report, false, null, true), \"  \", \"\"));\n        this.terminal.skipLine(1);\n    }\n}\n\nclass ScoreCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.abbreviation = \"sc\";\n        this.name = \"score\";\n        this.regex = regexifier(this.abbreviation, this.name);\n        this.type = INFO_COMMAND;\n        this.info = `\n  Mnemonic:  SCORE\n  Shortest abbreviation: SC\n\nShows what the score would be if the game were to end naturally at\nthis point. Since the game hasn't really ended and you lose points if\nyou quit, this is perhaps a meaningless command, but it gives you a\ngeneral idea of how well you are performing.\n        `\n    }\n\n    run() {\n        let score = 0;\n        let killedKlingonsAll = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"AbstractKlingon\"]);\n        let killedKlingons = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"Klingon\"]);\n        let kScore = killedKlingons * 10;\n        let killedCommanders = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"KlingonCommander\"]);\n        let cScore = killedCommanders * 50;\n        let killedSuperCommanders = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"KlingonSuperCommander\"]);\n        let scScore = killedSuperCommanders * 200;\n        let killedRomulans = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"Romulan\"]);\n        let romulanScore = killedRomulans * 20;\n        score += kScore + cScore + scScore + romulanScore;\n\n        let timeElapsed = this.game.clock.getElapsedTime();\n        if (timeElapsed === 0) timeElapsed = 1;\n        let klingonsPerDate = killedKlingonsAll / timeElapsed;\n        let kPerDateScore = klingonsPerDate * 500;\n        score += kPerDateScore;\n\n        let lineLength = 60;\n        this.terminal.printLine('Your score --');\n        // make these strings fixed length\n        this.terminal.printLine(`${killedRomulans} Romulan ships destroyed`.padEnd(lineLength, ' ') + romulanScore);\n        this.terminal.printLine(`${killedKlingons} Klingon war birds destroyed`.padEnd(lineLength, ' ') + kScore);\n        this.terminal.printLine(`${killedCommanders} Klingon Commander ships destroyed`.padEnd(lineLength, ' ') + cScore);\n        this.terminal.printLine(`${killedSuperCommanders} Klingon Super Commander ships destroyed`.padEnd(lineLength) + scScore);\n        this.terminal.printLine(`${klingonsPerDate.toFixed(2)} Klingons per stardate`.padEnd(lineLength) + kPerDateScore.toFixed(2));\n        // victory adds 100 * skill\n        if (this.game.isVictory()) {\n            let v = this.game.skill * 100;\n            score += v;\n            this.terminal.printLine(`Bonus for winning ${this.game.getDifficultyStr()} game `.padEnd(lineLength) + v);\n        }\n        if (this.player.isDead()) {\n            let d = -200;\n            score += d;\n            this.terminal.printLine(`Penalty for getting yourself killed`.padEnd(lineLength) + d);\n        }\n        this.terminal.skipLine(2);\n        this.terminal.printLine(`TOTAL SCORE`.padEnd(lineLength) + score.toFixed(0));\n    }\n}\n\nclass ReportCommand extends Command {\n    constructor(game, terminal, galaxy, player) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.galaxy = galaxy;\n        this.abbreviation = \"rep\";\n        this.name = \"report\";\n        this.regex = regexifier(this.abbreviation, this.name);\n        this.type = INFO_COMMAND;\n        this.info = `\n    Mnemonic:  REPORT\n    Shortest abbreviation: REP\n\nThis command supplies you with information about the state of the\ncurrent game.  Its purpose is to remind you of things that you have\nlearned during play, but may have forgotten, and cannot otherwise\nretrieve if you are not playing at a hard-copy terminal.\n\n     You are told the following things:\n\n       . The length and skill level of the game you are playing\n       . The original number of Klingons\n       . How many Klingons you have destroyed\n       . Whether the Super-Commander has been destroyed\n       . How many bases have been destroyed\n       . How many bases are left\n       . What bases (if any) are under attack; your subspace radio\n         must have been working since the attack to get this \n         information.\n       . How many casualties you have suffered\n       . How many times you have called for help.\n\nThis same information is automatically given to you when you start to\nplay a frozen game.`\n    }\n\n    run() {\n        this.terminal.printLine(`You are now playing a ${this.game.getGameLengthStr()} ${this.game.getDifficultyStr()} game.`);\n        let killedKlingonsAll = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"AbstractKlingon\"]);\n        let killedKlingons = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"Klingon\"]);\n        let killedCommanders = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"KlingonCommander\"]);\n        let killedSuperCommanders = this.game.getNumberOfTypeKilled(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"KlingonSuperCommander\"]);\n\n        this.terminal.printLine(`${killedKlingonsAll} of ${this.game.initialEnemies} klingons have been killed.`);\n        this.terminal.printLine(`${killedKlingons} klingon warbirds killed.`);\n        this.terminal.printLine(`${killedCommanders} klingon commanders killed.`);\n        this.terminal.printLine(`${killedSuperCommanders} klingon super commanders killed.`);\n\n        // remaining bases\n        let remainingBases = this.galaxy.container.getCountOfGameObjects(_Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n        this.terminal.printLine(`There are ${remainingBases} remaining bases.`);\n        // todo:: bases destroyed, bases under attack, casualties, times called for help\n    }\n}\n\n// how do the commands and the player communicate ?\n// how much logic should be in the command as opposed to the player ?\n\n\nclass PhotonsCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.abbreviation = \"pho\";\n        this.name = \"photon\";\n        this.fullName = \"photon torpedoes\";\n        this.regex = regexifier(this.abbreviation, this.name, this.fullName, \"photons\", \"photon torpedo\");\n        this.deviceUsed = \"\";\n        this.maxPerBurst = 3;\n        this.options = {};\n        this.type = ATTACK_COMMAND;\n        this.info = `\n  Mnemonic:  PHOTONS\n  Shortest abbreviation:  PHO\n  Full commands:  PHOTONS <NUMBER> <TARG1> <TARG2> <TARG3>\n\nPhoton torpedoes are projectile weapons--you either hit what you aim\nat, or you don't.  There are no \"partial hits\".\n\nOne photon torpedo will usually kill one ordinary Klingon, but it\nusually takes about two for a Klingon Commander.  Photon torpedoes\ncan also blow up stars and starbases, if you aren't careful.\n\nYou may fire photon torpedoes singly, or in bursts of two or three.\nEach torpedo is individually targetable.  The computer will prompt\nyou, asking for the target sector for each torpedo.  Alternately, you\nmay specify each target in the command line.\n\nPhoton torpedoes cannot be aimed precisely--there is always some\nrandomness involved in the direction they go.  Photon torpedoes may\nbe fired with your shields up, but as they pass through the shields\nthey are randomly deflected from their intended course even more.\n\nPhoton torpedoes are proximity-fused.  The closer they explode to the\nenemy, the more damage they do.  There is a hit \"window\" about one\nsector wide.  If the torpedo misses the hit window, it does not\nexplode and the enemy is unaffected.  Photon torpedoes are only\neffective within the quadrant.  They have no effect on things in\nadjacent quadrants.\n\nIf more than one torpedo is fired and only one target sector is\nspecified, all torpedoes are fired at that sector.  For example, to\nfire two torpedoes at sector 3 - 4, you type\n\n     PHO 2 3 4           (or)           PHO 2 3 4 3 4\n\nTo fire torpedoes at, consecutively, sectors 2 - 6, 1 - 10, and 4 -\n7, type\n\n     PHO 3 2 6 1 10 4 7\n\nThere is no restriction to fire directly at a sector.  For example,\nyou can enter\n\n       PHO 1 3 2.5\n\nto aim between two sectors.  However, sector numbers must be 1 to 10\ninclusive.\n\n`;\n    }\n\n    run() {\n        // torpedo launcher is damaged\n        if (this.player.photons.isDamaged()) {\n            this.terminal.echo(`Torpedo launcher is damaged.`);\n            return;\n        }\n\n        let args = this.terminal.getArguments();\n        let number = args.shift();\n        let targets = [];\n        for (let i = 0; i < args.length; i += 2) {\n            let x = Number.parseFloat(args[i]);\n            let y = Number.parseFloat(args[i + 1]);\n            if (Number.isNaN(x) || Number.isNaN(y)) {\n                this.terminal.echo(`${x} or ${y} is not a number.`);\n                return;\n            }\n            // check that those sector numbers make sense ???\n            targets.push({x, y});\n        }\n\n        if (number > this.maxPerBurst) {\n            this.terminal(`Maximum of ${this.maxPerBurst} torpedoes per burst.`);\n            // todo:: supposed to go into interactive mode\n            return;\n        }\n\n        // if number and args don't match\n        if (targets.length === 1) {  // assume all torpedoes will be launched at same target\n            // make copies\n            while (targets.length < number) {\n                let copy = Object.assign({}, targets[0]);\n                targets.push(copy);\n            }\n        } else if (number < targets.length) {\n            this.terminal.echo(\"Please specify destinations for every torpedo.\");\n            return;\n        } else if (number > targets.length) {\n            this.terminal.echo(\"Number of targets and the number to launch don't match.\");\n            return;\n        }\n\n        // not enough torpedoes\n        let torpedoCount = this.player.photons.getTorpedoCount();\n        if (number > torpedoCount) {\n            this.terminal.echo(`You only have ${torpedoCount} torpedoes.`);\n            return;\n        }\n\n        // convert coordinates\n        targets = targets.map(target => Galaxy.convertUserCoordinates(target.x, target.y));\n\n        // fire photon torpedoes (translate coordinates)\n        // this makes no sense\n        // coordinate system changes incoming .....\n        targets.forEach((target, i) => {\n            this.terminal.echo(`\\nTrack for torpedo number ${i + 1}:  `);\n            this.player.photons.fire(target.x, target.y)\n        });\n    }\n}\n\n// then add the no option (if no appears anywh  ere then don't raise shields using high speed control)\nclass PhasersCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.name = \"phasers\";\n        this.abbreviation = \"p\";\n        this.fullName = \"phasers\";\n        this.regex = regexifier(this.name, this.abbreviation, this.fullName);\n        this.type = ATTACK_COMMAND;\n        this.addOption(\"no\", \"n\", \"no\");\n        this.addMode(\"auto\", \"a\", \"auto\", \"automatic\");\n        this.addMode(\"manual\", \"m\", \"man\", \"manual\");\n        this.info = `\n  Mnemonic:  PHASERS\n  Shortest abbreviation:  P\n  Full commands:  PHASERS AUTOMATIC <AMOUNT TO FIRE> <NO>\n                  PHASERS <AMOUNT TO FIRE> <NO>\n                  PHASERS MANUAL <NO> <AMOUNT 1> <AMOUNT 2>...<AMOUNT N>\n\nPhasers are energy weapons. As you fire phasers at Klingons, you\nspecify an \"amount to fire\" which is drawn from your energy reserves.\nThe amount of total hit required to kill an enemy is partly random.\nbut also depends on skill level.\n\nThe average hit required to kill an ordinary Klingon varies from 200\nunits in the Novice game to 250 units in the Emeritus game.\nCommanders normally require from 600 (Novice) to 700 (Emeritus).  The\nSuper-commander requires from 875 (Good) to 1000 (Emeritus). Romulans\nrequire an average of 350 (Novice) to 450 (Emeritus).\n\nHits on enemies are cumulative, as long as you don't leave the\nquadrant.\n\nIn general, not all that you fire will reach the Klingons.  The\nfarther away they are, the less phaser energy will reach them. If a\nKlingon is adjacent to you, he will receive about 90% of the phaser\nenergy directed at him; a Klingon 5 sectors away will receive about\n60% and a Klingon 10 sectors away will receive about 35%. There is\nsome randomness involved, so these figures are not exact. Phasers\nhave no effect beyond the boundaries of the quadrant you are in.\n\nPhasers may overheat (and be damaged) if you fire too large a burst\nat once. Firing up to 1500 units is safe.  From 1500 on up the\nprobability of overheat increases with the amount fired.\n\nIf phaser firing is automatic, the computer decides how to divide up\nyour <amount to fire> among the Klingons present.  If phaser firing\nis manual, you specify how much energy to fire at each Klingon\npresent (nearest first), rather than just specifying a total amount.\nYou can abbreviate \"MANUAL\" and \"AUTOMATIC\" to one or more letters; if\nyou mention neither, automatic fire is usually assumed.\n\nBattle computer information is available by firing phasers manually,\nand allowing the computer to prompt you.  If you enter zero for the\namount to fire at each enemy, you will get a complete report, without\ncost.  The battle computer will tell you how much phaser energy to\nfire at each enemy for a sure kill.  This information appears in\nparentheses prior to the prompt for each enemy.  SInce the amount is\ncomputed from sensor data, if either the computer or the S.R. sensors\nare damaged, this information will be unavailable, and phasers must\nbe fired manually.\n\\f                                                                       13\nA safety interlock prevents phasers from being fired through the\nshields.  If this were not so, the shields would contain your fire\nand you would fry yourself.  However, you may utilize the\n\"high-speed shield control\" to drop shields, fire phasers, and raise\nshields before the enemy can react.  Since it takes more energy to\nwork the shields rapidly with a shot, it costs you 200 units of\nenergy each time you activate this control.  It is automatically\nactivated when you fire phasers while the shields are up. By\nspecifying the <no> option, shields are not raised after firing.\n\nPhasers have no effect on starbases (which are shielded) or on stars.`;\n    }\n\n    run() {\n        // find enemies to fire upon, check that we can fire on something\n        let quadrant = this.player.gameObject.quadrant;\n        let playerSector = this.player.gameObject.sector;\n        let enemies = quadrant.container.getGameObjectsOfType(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"AbstractEnemy\"]);\n        if (enemies.length === 0) {\n            this.terminal.printLine(\"No enemies to fire upon.\");\n            return;\n        }\n\n        // figure out the mode\n        let args = this.terminal.getArguments();\n        let {auto, manual} = this.getMode(args);\n        let {no} = this.getOption(args);\n        let noOption = no;\n\n        // automatic is assumed\n        let amounts = [];\n        if (!auto && !manual) {\n            auto = true;\n            amounts = args.slice(0);  // no mode option specified in args\n        } else {\n            amounts = args.slice(1);  // ignore mode option specified in args\n        }\n\n        let shieldControl = 200;\n        // if(no) shieldControl = 150;\n\n        // strip out the options\n        if (auto) {\n            // in automatic mode the ship automatically fires kill shots\n            // at each target, closest first, until the energy amount\n            // specified is expended\n            let amount = Number.parseInt(amounts[0]);\n            if (Number.isNaN(amount)) {\n                this.terminal.printLine(`Try again.`);\n                return;\n            } else if (amount <= 0) {\n                this.terminal.printLine(`Can't fire ${amount}, specify an amount greater than 0.`);\n                return;\n            } else if (amount + shieldControl > this.player.powerGrid.energy) {\n                this.terminal.printLine(`Units available = ${this.player.powerGrid.energy}.`);\n                return;\n            }\n            // sort entries by distance\n            let enemyArr = [];\n            enemies.forEach(e => {\n                let distance = Galaxy.calculateDistance(e.gameObject.sector, playerSector);\n                //calculate kill shot\n                let energy = this.player.phasers.calculateSureKill(distance, e.collider.health);\n                enemyArr.push({\n                    enemy: e,\n                    distance: distance,\n                    amount: energy\n                });\n            });\n            enemyArr.sort((a, b) => a.distance - b.distance);\n            // fire kill shots until the amount of energy to use is exhausted\n            // add the entries into toFire, until we run out of energy\n            let toFire = [];\n            let amountToFire = amount;\n            for (let i = 0; amount > 0 && i < enemyArr.length; i++) {\n                let {amount} = enemyArr[i];\n                if (amountToFire < amount) {\n                    amount = amountToFire;\n                }\n                // amount = Math.ceil(amount);\n                amountToFire -= amount;\n                enemyArr[i].amount = amount;\n                toFire.push(enemyArr[i]);\n                if (amountToFire <= 0) {\n                    break;\n                }\n            }\n            // fast shield control\n            if (this.player.shields.up) {\n                this.terminal.printLine(`Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\"`);\n                // do fast shield control\n                this.player.shields.lower();\n                // lower shields\n                if (noOption) {\n                    // leave shields down\n                    this.player.powerGrid.useEnergy(200);\n                } else {\n                    this.player.shields.raise();    // costs 50\n                    this.player.powerGrid.useEnergy(150);\n                }\n            }\n\n            this.player.firePhasersMultiTarget(toFire);\n\n            // fire excess energy into space\n            if (amountToFire > 0) {\n                this.terminal.echo(`Firing ${amountToFire.toFixed(2)} excess units into space.`);\n                this.player.powerGrid.useEnergy(amountToFire);\n            }\n            //\n        } else if (manual) {\n            // get amounts (phasers manual ...n\n            let toFire = amounts.map(str => Number.parseInt(str));\n\n            // parse, and check for errors\n            let hasParseErrors = toFire.some(n => Number.isNaN(n));\n            if (hasParseErrors) {\n                this.terminal.printLine(`Try again.`);\n                return;\n            }\n            // filter out 0 values and negatives because they're pointless\n            toFire = toFire.filter(n => n > 0);\n\n            // check that we have that much energy to fire\n            let total = toFire.reduce((carry, n) => carry + n, 0);\n            if (total + shieldControl > this.player.powerGrid.energy) {\n                this.terminal.printLine(`Units available = ${this.player.powerGrid.energy}.`);\n                return;\n            }\n\n            // if they specified more targets than\n            if (enemies.length < toFire.length) {\n                this.terminal.printLine(`There are only ${enemies.length} enemies here.`);\n                return;\n            }\n\n            // sort entries by distance\n            let enemyArr = [];\n            enemies.forEach(e => {\n                enemyArr.push({\n                    enemy: e,\n                    distance: Galaxy.calculateDistance(e.gameObject.sector, playerSector),\n                    amount: null\n                });\n            });\n            enemyArr.sort((a, b) => a.distance - b.distance);\n\n            // now grab the entries that we're going to fire at\n            let targetArray = [];\n            for (let i = 0; i < toFire.length; i++) {\n                let enemyEntry = enemyArr[i];\n                enemyEntry.amount = toFire[i];\n                targetArray.push(enemyEntry);\n            }\n\n            // fast shield control\n            if (this.player.shields.up) {\n                this.terminal.printLine(`Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\"`);\n                // do fast shield control\n                this.player.shields.shieldsDown();\n                // lower shields\n                if (noOption) {\n                    // leave shields down\n                    this.player.powerGrid.useEnergy(200);\n                } else {\n                    this.player.shieldsUp();    // costs 50\n                    this.player.powerGrid.useEnergy(150);\n                }\n            }\n\n            // have our player fire away\n            this.player.firePhasersMultiTarget(targetArray, false);\n        }\n    }\n}\n\n// todo::: shields transfer command mode\nclass ShieldsCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.name = \"shields\";\n        this.abbreviation = \"sh\";\n        this.fullName = \"deflector shields\";\n        this.regex = regexifier(this.abbreviation, this.name, this.fullName);\n        this.info = `  Mnemonic:  SHIELDS\n  Shortest abbreviation:  SH\n  Full commands:  SHIELDS UP\n                  SHIELDS DOWN\n                  SHIELDS CHARGE <amount of energy to put into the shields>\n                  SHIELDS DRAIN  <amount of energy to take from the shields>\n\nYour deflector shields are a defensive device to protect you from\nKlingon attacks (and nearby novas).  As the shields protect you, they\ngradually weaken.  A shield strength of 75%, for example, means that\nthe next time a Klingon hits you, your shields will deflect 75% of\nthe hit, and let 25% get through to hurt you.\n\nIt costs 50 units of energy to raise shields, nothing to lower them.\nYou may move with your shields up; this costs nothing under impulse\npower, but doubles the energy required for warp drive.\n\nEach time you raise or lower your shields, the Klingons have another\nchance to attack.  Since shields do not raise and lower\ninstantaneously, the hits you receive will be intermediate between\nwhat they would be if the shields were completely up or completely\ndown.\n\nYou may not fire phasers through your shields.  However you may use\nthe \"high-speed shield control\" to lower shields, fire phasers, and\nraise the shields again before the Klingons can react.  Since rapid\nlowering and raising of the shields requires more energy than normal\nspeed operation, it costs you 200 units of energy to activate this\ncontrol.  It is automatically activated when you fire phasers while\nshields are up.  You may fire photon torpedoes, but they may be\ndeflected considerably from their intended course as they pass\nthrough the shields (depending on shield strength).\n\nYou may transfer energy between the ship's energy (given as \"Energy\"\nin the status) and the shields.  Thee word \"TRANSFER\" may be\nabbreviated \"T\".  The amount of energy to transfer is the number of\nunits of energy you wish to take from the ship's energy and put into\nthe shields.  If you specify an negative number, energy is drained\nfrom the shields to the ship.  Transferring energy constitutes a turn.\nIf you transfer energy to the shields while you are under attack,\nthey will be at the new energy level when you are next hit.\n\nEnemy torpedoes hitting your ship explode on your shields (if they\nare up) and have essentially the same effect as phaser hits.`;\n    }\n\n    getMode(arg) {\n        let upOption = optionRegexifier(\"up\", \"u\");\n        let downOption = optionRegexifier(\"down\", \"d\");\n        let drainOption = optionRegexifier(\"drain\", \"dr\");\n        let chargeOption = optionRegexifier(\"charge\", \"c\");\n\n        return {\n            up: upOption.test(arg),\n            down: downOption.test(arg),\n            drain: drainOption.test(arg),\n            charge: chargeOption.test(arg)\n        };\n    }\n\n    run() {\n        // get mode : up/down or charge/drain\n        let {up, down, charge, drain} = this.getMode(this.terminal.getArguments()[0]);\n\n        if (!up && !down && !charge && !drain) {\n            this.terminal.printLine(\"Beg pardon, Captain?\");\n            this.terminal.printLine(\"Valid options are : 'up', 'down', 'charge', or 'drain'.\");\n            return;\n        }\n\n        if (up) {\n            this.player.shieldsUp();\n        } else if (down) {\n            this.player.shieldsDown();\n        } else if (charge || drain) {\n            let playerShields = this.player.shields;\n            let playerPowerGrid = this.player.powerGrid;\n            // get the amount to transfer\n            let amount = this.terminal.getArguments()[1];\n            amount = Number.parseInt(amount);\n            if (Number.isNaN(amount)) {\n                // parse error\n                this.terminal.printLine(`${amount} is an gibberish amount to transfer captain.`);\n                return;\n            } else if (amount === 0) {\n                this.terminal.printLine(\"Beg pardon Captain?\");\n                return;\n            }\n            // check that you can do the transfer\n            if (playerShields.isDamaged()) {\n                this.terminal.echo(\"Shields damaged.\");\n                return;\n            }\n            if (charge) {\n                // need the energy\n                if (playerPowerGrid.energy < amount) {\n                    this.terminal.printLine(\"Not enough energy, Captain.\");\n                    return;\n                }\n                // ignore if shields at max\n                if (playerShields.units === playerShields.capacity) {\n                    this.terminal.printLine(\"Shields already at max, Captain.\");\n                    return;\n                }\n\n                // don't overflow\n                let sh = playerShields.units + amount;\n                if (sh > playerShields.capacity) {\n                    amount = playerShields.capacity - playerShields.units;\n                }\n\n                // do the transfer\n                this.terminal.printLine(\"Charging shields.\");\n                playerPowerGrid.useEnergy(amount);\n                playerShields.charge(amount);\n            } else if (drain) {\n                // check shield energy\n                if (amount > playerShields.units) {\n                    this.terminal.printLine(\"Not enough energy in shields. Draining what we have.\");\n                    amount = playerShields.units;\n                }\n                // check ship energy not already maxed out\n                if (playerPowerGrid.atMax()) {\n                    this.terminal.printLine(\"Ship energy already at max.\");\n                    return;\n                }\n                // check that we don't exceed ship energy capacity\n                if (playerPowerGrid.energy + amount > playerPowerGrid.capacity) {\n                    this.terminal.printLine(\"That would exceed our ship energy capacity. Setting ship energy to maximum.\");\n                    amount = playerPowerGrid.capacity - playerPowerGrid.energy;\n                }\n\n                playerShields.drain(amount);\n                playerPowerGrid.addEnergy(amount);\n            }\n        }\n    }\n}\n\nclass CommandsCommand extends Command {\n    constructor(game, terminal) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.name = \"commands\";\n        this.regex = regexifier(\"commands\");\n        this.type = INFO_COMMAND;\n        this.info = `\n ABBREV    FULL COMMAND                             DEVICE USED\n ------    ------------                             -----------\n C         CHART                                    (none)\n D         DOCK                                     (none)\n L         LRSCAN                                   long-range sensors\n M         MOVE [MANUAL] [DISPLACEMENT]             warp engines\n           MOVE AUTOMATIC [DESTINATION]             warp engines and computer\n P         PHASERS [TOTAL AMOUNT]                   phasers and computer\n           PHASERS AUTOMATIC [TOTAL AMOUNT]         phasers, computer, sr sensors\n           PHASERS MANUAL [AMT1] [AMT2] ...         phasers\n PHO       PHOTONS [NUMBER] [TARGETS]               torpedo tubes \n REP       REPORT                                   (none)\n REQ       REQUEST                                  (none)\n S         SRSCAN [NO or CHART]                     short-range sensors\n SH        SHIELDS [UP, DOWN, or TRANSFER]          deflector shields\n ST        STATUS                                   (none)\n\n L. R. Scan:   thousands digit:   supernova\n               hundreds digit:    Klingons\n               tens digit:        starbases\n               ones digit:        stars\n               period (.):        digit not known (star chart only)\n\nCourses are given in manual mode in X - Y displacements; in automatic\n    mode as destination quadrant and/or sector.  Manual mode is default.\nDistances are given in quadrants.  A distance of one sector is 0.1 quadrant.\nOrdinary Klingons have about 400 units of energy, Commanders about\n    1200.  Romulans normally have about 800 units of energy, and the\n    (GULP) \"Super-Commander\" has about 1800.\nPhaser fire diminishes to about 60 percent at 5 sectors.  Up to 1500\n    units may be fired in a single burst without danger of overheat.`\n    }\n\n    printCommands() {\n        let matrix = [];\n        let row = [];\n        let rowLength = 4;\n        this.game.commands.map(c => c.name).sort().forEach(name => {\n            // make a new row\n            if (row.length === rowLength) {\n                matrix.push(row);\n                row = [];\n            }\n            row.push(`${name}`);\n        });\n        if (row.length > 0) {\n            matrix.push(row);\n        }\n        let formatted = this.terminal.formatGrid(matrix, false);\n        return this.terminal.printGrid(formatted, \"   \");\n    }\n\n    run() {\n        this.terminal.newLine();\n        this.terminal.echo(this.printCommands());\n    }\n}\n\nclass GetHelpCommand extends Command {\n    constructor(game, terminal, commandsCommand) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.commandsCommand = commandsCommand;\n        this.abbreviation = \"help\";\n        this.name = \"help\";\n        this.regex = regexifier(\"help\");\n        this.fullName = \"ask for help\";\n        this.type = INFO_COMMAND;\n        this.info = `  Mnemonic:  HELP\n  Full command:  HELP [command]\n\nThis command reads the appropriate section from the SST.DOC file,\nproviding the file is in the current directory.`;\n    }\n\n    async run() {\n        this.terminal.newLine();\n        let arg = this.terminal.getArguments()[0];\n        // prompt\n        if (!arg) {\n            do {\n                arg = await this.terminal.ask(\"Help on what command?\");\n            } while (!arg);\n        }\n\n        // get the relevant command by name\n        let command = this.game.commands.find(c => c.regex.test(arg));\n        if (command) {\n            this.terminal.echo(`Spock- \"Captain, I've found the following information:\"\\n`);\n            // todo:: implement the page scrolling stuff\n            this.terminal.echo(command.info);\n        } else {\n            this.terminal.echo(\"Valid Commands:\\n\");\n            this.terminal.echo(this.commandsCommand.printCommands());\n            // if invalid list the valid commands\n\n        }\n        this.terminal.newLine();\n    }\n}\n\nclass MoveCommand extends Command {\n    constructor(game, terminal, player, galaxy) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.galaxy = galaxy;\n        this.abbreviation = \"m\";\n        this.name = \"move\";\n        this.fullName = \"move under warp drive\";\n        this.regex = regexifier(this.abbreviation, this.name);\n        this.type = MOVE_COMMAND;\n        this.addOption('manual', 'm', 'manual');\n        this.addOption('automatic', 'a', 'automatic');\n        this.addOption('impulse', 'i', 'impulse');\n        this.useImpulse = false;\n        this.info = `  Mnemonic:  MOVE\n  Shortest abbreviation:  M\n  Full command:  MOVE MANUAL [displacement] [impulse]\n                 MOVE AUTOMATIC [destination] [impulse]\n\nThis command is the usual way to move from one place to another\nwithin the galaxy.  You move under warp drive, according to the\ncurrent warp factor (see \"WARP FACTOR\").\n\nThere are two command modes for movement: MANUAL and AUTOMATIC.  The\nmanual mode requires the following format:\n\n        MOVE MANUAL [deltax] [deltay]\n\n[deltax] and [deltay] are the horizontal and vertical displacements\nfor your starship, in quadrants; a displacement of one sector is 0.1\nquadrants.  Specifying [deltax] and [deltay] causes your ship to move\nin a straight line to the specified destination. If [deltay] is\nomitted, it is assumed zero. For example, the shortest possible\ncommand to move one sector to the right would be\n\n        M M .1\n\nThe following examples of manual movement refer to the short-range\nscan shown earlier.\n\n  Destination Sector    Manual Movement command\n        3 - 1                   M M -.3 -.1\n        2 - 1                   M M -.3\n        1 - 2                   M M -.2 .1\n        1 - 4                   M M 0 .1\n  (leaving quadrant)            M M 0 .2\n\n\nThe automatic mode is as follows:\n\n        MOVE AUTOMATIC [qrow] [qcol] [srow] [scol]\n\nwhere [qrow] and [qcol] are the row and column numbers of the\ndestination quadrant, and [srow] and [scol] are the row and column\nnumbers of the destination sector in that quadrant.  This command also\nmoves your ship in a straight line path to the destination.  For\nmoving within a quadrant, [qrow] and [qcol] may be omitted. For\nexample, to move to sector 2 - 9 in the current quadrant, the\nshortest command would be\n\n        M A 2 9\n\nTo move to quadrant 3 - 7, sector 5 - 8, type\n\n        M A 3 7 5 8\n\nand it will be done.  In automatic mode, either two or four numbers\nmust be supplied.\n\\f                                                                       10\nAutomatic mode utilizes the ship's \"battle computer.\"  If the\ncomputer is damaged, manual movement must be used.\n\nIf warp engines are damaged less than 10 stardates (undocked) you can\nstill go warp 4.\n\nIt uses time and energy to move.  How much time and how much energy\ndepends on your current warp factor, the distance you move, and\nwhether your shields are up.  The higher the warp factor, the faster\nyou move, but higher warp factors require more energy.  Specifically, \n    energy required = distance in terms of quadrants * (warpFactor ^ 3)\nYou may move with your shields up, but this doubles the energy required. \n\n\nYou can move within a quadrant without being attacked if you just\nentered the quadrant or have bee attacked since your last move\ncommand.  This enables you to move and hit them before they\nretaliate.\n\n====When using Impulse Engines =====\nThe impulse engines give you a way to move when your warp engines are\ndamaged.  They move you at a speed of 0.95 sectors per stardate,\nwhich is the equivalent of a warp factor of about 0.975, so they are\nmuch too slow to use except in emergencies.\n\nMovement commands are indicated just as in the \"MOVE\" command.\n\nThe impulse engines require 20 units of energy to engage, plus 10\nunits per sector (100 units per quadrant) traveled. It does not cost\nextra to move with the shields up.`;\n    }\n\n    async moveTo(sector) {\n        // how do they do collisions ?\n        // check path for objects\n        // calculate distance, energy required and time expended\n        let distance = Galaxy.calculateDistance(this.player.gameObject.sector, sector);\n        let energy = .1 * distance * Math.pow(this.player.warpFactor, 3);\n        if (this.player.shields.up) energy *= 2;\n\n        if (this.player.powerGrid.energy < energy) {\n            /** todo::\n             * Engineering to bridge--\n             We haven't the energy, but we could do it at warp 6,\n             if you'll lower the shields.\n             */\n            this.terminal.printLine('Engineering to bridge--');\n            this.terminal.printLine(`We haven't the energy for that.`);\n            return;\n        }\n\n        let timeRequired = distance / Math.pow(this.player.warpFactor, 2);\n        // if the move takes 80% or greater of the remaining time then warn them\n        let percentOfRemaining = 100 * timeRequired / this.game.timeRemaining;\n        if (percentOfRemaining > 80.0) {\n            let response;\n            let yes = /(yes|y)/i;\n            let no = /(no|n)/i;\n            do {\n                response = await this.terminal.ask(`First Officer Spock- \"Captain, I compute that such\n  a trip would require approximately ${percentOfRemaining.toFixed(2)}% of our\n  remaining time.  Are you sure this is wise?\"`);\n                yes = /(yes|y)/i;\n                no = /(no|n)/i;\n            } while (!yes.test(response) && !no.test(response));\n\n\n            if (yes.test(response)) {\n                this.terminal.printLine(\"To boldly go...\");\n            } else if (no.test(response)) {\n                this.terminal.printLine(\"Cancelling move.\");\n                return;\n            }\n        }\n\n        if(this.useImpulse) {\n            this.player.impulseTo(sector);\n        } else {\n            this.player.warpTo(sector);\n        }\n\n\n        this.game.clock.elapseTime(timeRequired);\n        // check bounds\n        // compute deltaX and deltaY\n        // if both === 0 do nothing\n        // compute distance to travel\n        // check resources (power & time)\n        // if warp factor > 6\n        // then calculate engine damage\n        // calculate time warp if any\n        // if time warps or engines take damage then check the travel path\n        // for collisions\n    }\n\n    // manual mode\n    manual(deltaQx, deltaQy, deltaSx, deltaSy) {\n        // calculate the destination\n        try {\n            let destination = this.player.mover.calculateDestination(deltaQx, deltaQy, deltaSx, deltaSy);\n            return this.moveTo(destination);\n        } catch (e) {\n            this.terminal.printLine(e.message);\n            return;\n        }\n    }\n\n    // automatic mode\n    automatic(quadX, quadY, sectorX, sectorY) {\n        try {\n            // get sector\n            let sector = this.galaxy.getSector(quadX, quadY, sectorX, sectorY);\n            return this.moveTo(sector);\n        } catch (e) {\n            this.terminal.printLine(e.message);\n            return;\n        }\n    }\n\n    async run() {\n        // modes : manual and automatic\n        // remove mode option from arguments, if provided\n        let args = this.terminal.getArguments();\n        let {manual, automatic, impulse} = this.getOption(args);\n        this.useImpulse = impulse;\n        if(!manual && !automatic) manual = true;    // set a default\n        if (manual) {\n            console.log(\"manual mode\");\n            // parse args, only two arguments\n            if (args.length !== 2) {\n                throw new Error(\"need y and x\");\n            }\n            let [argX, argY] = args;\n            // quadrant based args <deltaX> <deltaY>\n            // fuck that I'm making them <deltaY> <deltaX> so that they're consistent\n            let deltaQx = Math.trunc(argX);\n            let deltaQy = Math.trunc(argY);\n            let deltaSx = Math.trunc((argX * 10) % 10);\n            let deltaSy = Math.trunc((argY * 10) % 10);\n            // todo:: check bounds\n            await this.manual(deltaQx, deltaQy, deltaSx, deltaSy);\n        } else if (automatic) {\n            console.log(\"automatic mode\");\n            // parse args <quadY> <quadX> <sectorY> <sectorX>\n            // or just <sectorY> <sectorX>\n            // todo:: check bounds\n            args = args.map(str => Number.parseInt(str));\n            // make sure to convert from the 1 based commands\n            // to the 0 based coordinates\n            if (args.length === 4) {\n                await this.automatic(args[0] - 1, args[1] - 1, args[2] - 1, args[3] - 1);\n            } else if (args.length === 2) {\n                let quadrant = this.player.gameObject.quadrant;\n                await this.automatic(quadrant.x, quadrant.y, args[0] - 1, args[1] - 1);\n            }\n        }\n    }\n}\n\nclass StatusCommand extends Command {\n    constructor(game, terminal, player, galaxy) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.galaxy = galaxy;\n        this.abbreviation = 'st';\n        this.name = 'status';\n        this.regex = regexifier(\"st\", \"status\", \"status report\");\n        this.fullName = 'status report';\n        this.type = INFO_COMMAND;\n        this.info = `Mnemonic:  STATUS\n  Shortest abbreviation: ST\n\nThis command gives you information about the current state of your\nstarship as follows:\n\n  STARDATE - The current date. A stardate is the same as a day.\n\n  CONDITION - There are four possible conditions:\n        DOCKED - docked at starbase.\n        RED    - in battle.\n        YELLOW - low on energy (<1000 units)\n        GREEN  - none of the above\n\n  POSITION - Quadrant is given first, then sector\n\n  LIFE SUPPORT - If \"ACTIVE\" then life support systems are\n        functioning normally. If on \"RESERVES\" the number is how many\n        stardates your reserve food, air, etc. will last--you must\n        get repairs made or get to starbase before your reserves run\n        out.\n\n  WARP FACTOR - What your warp factor is currently set to.\n\n  ENERGY - The amount of energy you have left. If it drops to zero,\n        you die.\n\n  TORPEDOES - How many photon torpedoes you have left.\n\n  SHIELDS - Whether your shields are up or down, how strong they are\n       (what percentage of a hit they can deflect), and shield\n       energy.\n\n  KLINGONS LEFT - How many of the Klingons are still out there.\n\n  TIME LEFT - How long the Federation can hold out against the\n        present number of Klingons; that is, how long until the end\n        if you do nothing in the meantime.  If you kill Klingons\n        quickly, this number will go up--if not, it will go down.  If\n        it reaches zero, the federation is conquered and you lose.\n\nStatus information is free--it uses no time or energy, and if you are\nin battle, the Klingons are not given another chance to hit you.\n\nStatus information can also be obtained by doing a short-range scan.\nSee the SRSCAN command for details.\n\nEach item of information can be obtained singly by requesting it.\nSee REQUEST command for details.`;\n    }\n\n    /**\n     * If your short-range sensors are damaged, this command will only show\n     the contents of adjacent sectors.\n     #define IHQUEST '?'  // mystery quest\n     #define IHF 'F'  // ????\n     #define IHT 'T'  // ????\n     #define IHWEB '#'\n     #define IHGREEN 'G'\n     #define IHYELLOW 'Y'\n     #define IHRED 'R'\n     #define IHDOCKED 'D'\n     COMMAND> s\n     */\n    getStatusText(format = true) {\n        if (format) {\n            let date = `Stardate\\t${this.game.clock.starDate.toFixed(1)}`\n            let condition = `Condition\\t${this.player.printCondition()}`;\n\n            let playerQuad = this.player.gameObject.quadrant;\n            let playerSector = this.player.gameObject.sector;\n            let collider = this.player.collider;\n            let percent = collider.health * 100 / collider.maxHealth;\n            let hullIntegrity = `Hull Integrity\\t${collider.health.toFixed(2)}, ${percent.toFixed(1)}%`;\n            let position = `Position\\t${playerQuad.x + 1} - ${playerQuad.y + 1}, ${playerSector.x + 1} - ${playerSector.y + 1}`;\n            let lifeSupport = [`Life Support`, `NA`]\n            if (this.player.lifeSupport.isOk()) {\n                lifeSupport = [`Life Support`, `ACTIVE`];\n            } else {\n                lifeSupport = [`Life Support`, `DAMAGED, reserves = ${this.player.lifeSupport.reserves.toFixed(1)}`];\n            }\n            let warpFactor = [`Warp Factor`, `${this.player.warpFactor.toFixed(1)}`];\n            let grid = this.player.powerGrid;\n            let gridPercent = grid.energy * 100 / grid.capacity;\n            let energy = [`Energy`, `${grid.energy.toFixed(2)}, ${gridPercent.toFixed(1)}%`];\n            let torpedoes = [`Torpedoes`, `${this.player.photons.getTorpedoCount()}`];\n            let shields = [`Shields`, `${this.player.shields.printInfo()}`];\n            let klingonsRemaining = [`Klingons Left`, `${this.galaxy.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"AbstractKlingon\"])}`];\n            let timeLeft = [`Time Left`, `${this.game.timeRemaining.toFixed(2)}`];\n            let matrix = [\n                ['Stardate', this.game.clock.starDate.toFixed(1)],\n                ['Condition', this.player.printCondition()],\n                ['Hull Integrity', `${collider.health.toFixed(2)}, ${percent.toFixed(1)}%`],\n                ['Position', `${playerQuad.x + 1} - ${playerQuad.y + 1}, ${playerSector.x + 1} - ${playerSector.y + 1}`],\n                lifeSupport,\n                warpFactor,\n                energy,\n                torpedoes,\n                shields,\n                klingonsRemaining,\n                timeLeft\n            ];\n            return this.terminal.formatGrid(matrix, false, null, true).map(arr => arr.join(\"   \"));\n        }\n        let date = `Stardate\\t${this.game.clock.starDate.toFixed(1)}`\n        let condition = `Condition\\t${this.player.printCondition()}`;\n\n        let playerQuad = this.player.gameObject.quadrant;\n        let playerSector = this.player.gameObject.sector;\n        let collider = this.player.collider;\n        let percent = collider.health * 100 / collider.maxHealth;\n        let hullIntegrity = `Hull Integrity\\t${collider.health.toFixed(2)}, ${percent.toFixed(1)}%`;\n        let position = `Position\\t${playerQuad.x + 1} - ${playerQuad.y + 1}, ${playerSector.x + 1} - ${playerSector.y + 1}`;\n        let lifeSupport = `Life Support NA`;\n        if (this.player.lifeSupport.isOk()) {\n            lifeSupport = `Life Support\\tACTIVE`;\n        } else {\n            lifeSupport = `Life Support\\tDAMAGED, reserves = ${this.player.lifeSupport.reserves.toFixed(1)}`;\n        }\n        let warpFactor = `Warp Factor\\t${this.player.warpFactor.toFixed(1)}`;\n        let grid = this.player.powerGrid;\n        let gridPercent = grid.energy * 100 / grid.capacity;\n        let energy = `Energy\\t\\t${grid.energy.toFixed(2)}, ${gridPercent.toFixed(1)}%`;\n        let torpedoes = `Torpedoes\\t${this.player.photons.getTorpedoCount()}`;\n        let shields = `Shields\\t\\t${this.player.shields.printInfo()}`;\n        let klingonsRemaining = `Klingons Left\\t${this.galaxy.container.getCountOfGameObjects(_Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"AbstractKlingon\"])}`;\n        let timeLeft = `Time Left\\t${this.game.timeRemaining.toFixed(2)}`;\n        return [\n            date,\n            condition,\n            position,\n            lifeSupport,\n            warpFactor,\n            energy,\n            hullIntegrity,\n            torpedoes,\n            shields,\n            klingonsRemaining,\n            timeLeft\n        ];\n    }\n\n    run() {\n        this.terminal.newLine();\n        this.terminal.echo(this.getStatusText().join(\"\\n\"));\n    }\n}\n\nclass RequestCommand extends Command {\n    constructor(game, terminal, statusCommand) {\n        super();\n        this.terminal = terminal;\n        this.game = game;\n        this.statusCommand = statusCommand;\n        this.name = \"request\";\n        this.abbreviation = \"req\";\n        this.regex = regexifier(\"req\", \"request\", \"request information\");\n        this.fullName = \"request information\";\n        this.arguments = 1;\n        this.type = INFO_COMMAND;\n        this.info = `Mnemonic:  REQUEST\n  Shortest abbreviation:  REQ\n  Full command:  REQUEST [ITEM]\n\nThis command allows you to get any single piece of information from\nthe [STATUS] command.  [ITEM] specifies which information as follows:\n\n INFORMATION       MNEMONIC FOR [ITEM]           SHORTEST ABBREVIATION\n\n STARDATE              DATE                                D\n CONDITION             CONDITION                           C\n POSITION              POSITION                            P\n LIFE SUPPORT          LSUPPORT                            L\n WARP FACTOR           WARPFACTOR                          W\n ENERGY                ENERGY                              E\n TORPEDOES             TORPEDOES                           T\n SHIELDS               SHIELDS                             S\n KLINGONS LEFT         KLINGONS                            K\n TIME LEFT             TIME                                TI`;\n    }\n\n    async run() {\n        let request = this.terminal.getArguments()[0];\n        // ask\n        if (!request) {\n            request = await this.terminal.ask(\"Information desired? \");\n        }\n\n        // otherwise\n        let status = this.statusCommand.getStatusText();\n        let date = optionRegexifier('date', \"d\");\n        let condition = optionRegexifier(\"condition\", \"c\");\n        let position = optionRegexifier(\"position\", \"p\");\n        let lifeSupport = optionRegexifier(\"lsupport\", \"l\");\n        let warpFactor = optionRegexifier(\"warpfactor\", \"w\");\n        let energy = optionRegexifier(\"energy\", \"e\");\n        let hullIntegrity = optionRegexifier(\"hull\", \"health\", \"h\");\n        let torpedoes = optionRegexifier(\"torpedoes\", \"t\");\n        let shields = optionRegexifier(\"shields\", \"s\");\n        let klingonsRemaining = optionRegexifier(\"klingons\", \"s\");\n        let timeLeft = optionRegexifier(\"time\", \"ti\");\n\n        let output;\n        if (date.test(request)) {\n            output = status[0];\n        } else if (condition.test(request)) {\n            output = status[1];\n        } else if (position.test(request)) {\n            output = status[2];\n        } else if (lifeSupport.test(request)) {\n            output = status[3];\n        } else if (warpFactor.test(request)) {\n            output = status[4];\n        } else if (energy.test(request)) {\n            output = status[5];\n        } else if (hullIntegrity.test(request)) {\n            output = status[6];\n        } else if (torpedoes.test(request)) {\n            output = status[7];\n        } else if (shields.test(request)) {\n            output = status[8];\n        } else if (klingonsRemaining.test(request)) {\n            output = status[9];\n        } else if (timeLeft.test(request)) {\n            output = status[10];\n        } else {\n            output = \"UNRECOGNIZED REQUEST. Legal requests are:\\n\" +\n                \"  date, condition, position, lsupport, warpfactor,\\n\" +\n                \"  energy, torpedoes, shields, klingons, time.\\n\"\n        }\n        this.terminal.echo(output);\n    }\n}\n\nclass ChartCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.terminal = terminal;\n        this.game = game;\n        this.player = player;\n        this.abbreviation = \"c\";\n        this.name = \"chart\";\n        this.regex = regexifier(\"c\", \"chart\", \"star chart\");\n        this.fullName = \"star chart\";\n        this.type = INFO_COMMAND;\n        this.addPadding = false;\n        this.info = `\n      Mnemonic:  ${this.name}\n      Shortest abbreviation:  ${this.abbreviation}\n    The chart looks like an 8 by 8 array of numbers.  These numbers are\n    interpreted exactly as they are on a long-range scan. A period (.) in\n    place of a digit means you do not know that information yet.  For\n    example, ... means you know nothing about the quadrant, while .1.\n    means you know it contains a base, but an unknown number of Klingons\n    and stars.\n\n    Looking at the star chart is a free operation.  It costs neither time\n    nor energy, and can be done safely whether in or out of battle.`;\n    }\n\n    makeChartText() {\n        // use galaxy to make a grid of text\n        let grid = [];\n        // convert each row to text\n        for (let i = 0; i < this.game.galaxy.length; i++) {\n            let row = this.game.galaxy.getRow(i);\n            let textRow = [];\n            // convert each quadrant to text\n            row.forEach(quadrant => {\n                // todo\n                let superNovaText = quadrant.hasSupernova ? \"1\" : \".\";\n                let klingonText = quadrant.container.getCountOfGameObjects(\n                    _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"AbstractKlingon\"]\n                );\n                let starbaseText = quadrant.container.getCountOfGameObjects(_Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n                let starText = quadrant.container.getCountOfGameObjects(_Objects_Star_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n                let text = `${superNovaText}${klingonText}${starbaseText}${starText}`;\n                textRow.push(text);\n            });\n            //add row to our print out\n            grid.push(textRow);\n        }\n\n        // add column before and after to indicate row #s\n        grid.forEach((row, i) => {\n            row.unshift(`${i + 1} -`);\n            row.push(\"-\");\n        });\n\n        // add header rows to indicate column #s\n        // make sure to account for the extra column\n        let headerRow = [\" \"];\n        let rowLength = grid[0].length;\n        // skip first and last columns\n        for (let i = 1; i < rowLength - 1; i++) {\n            headerRow.push(`  ${i} `);\n        }\n\n        let h2 = [\" \"];\n        // skip first and last columns\n        for (let i = 1; i < rowLength - 1; i++) {\n            h2.push(`----`);\n        }\n        grid.unshift(h2);\n        grid.unshift(headerRow);\n\n        return this.terminal.formatGrid(grid).map(row => row.join(\"  \")).join(\"\\n\");\n    }\n\n    run() {\n        if (this.addPadding) this.terminal.newLine();\n        this.terminal.echo(\"STAR CHART FOR THE KNOWN GALAXY\");\n        if (this.addPadding) this.terminal.newLine();\n        this.terminal.newLine();\n        this.terminal.printLine(this.makeChartText());\n        this.terminal.printLine();\n        this.terminal.printLine(`thousands digit:   supernova\nhundreds digit:    Klingons\ntens digit:        starbases\nones digit:        stars\nperiod (.):        digit not known`);\n        this.terminal.printLine();\n        let q = this.player.gameObject.quadrant;\n        this.terminal.printLine(`Enterprise is currently in ${this.player.gameObject.getQuadrantLocation()}`);\n        if (this.addPadding) this.terminal.newLine();\n    }\n}\n\nclass ShortRangeScanCommand extends Command {\n    constructor(game, terminal, player, chartCommand, statusCommand) {\n        super();\n        this.terminal = terminal;\n        this.game = game;\n        this.player = player;\n        this.chartCommand = chartCommand;\n        this.statusCommand = statusCommand;\n        this.abbreviation = \"s\";\n        this.name = \"srscan\";\n        this.regex = regexifier(\"s\", \"srscan\", \"short range scan\");\n        this.fullName = \"short range scan\";\n        this.type = INFO_COMMAND;\n        this.options = {\n            no: {\n                abbreviation: \"n\",\n                name: \"no\",\n                description: \"don't display status information\"\n            },\n            chart: {\n                abbreviation: \"c\",\n                name: \"no\",\n                description: \"display star chart\"\n            }\n        };\n        this.deviceUsed = [_Devices_js__WEBPACK_IMPORTED_MODULE_1__[\"shortRangeSensorType\"]];\n        this.addPadding = false;\n        this.info = `Mnemonic:  SRSCAN\n    Shortest abbreviation:  S\n    Full commands:  SRSCAN\n                    SRSCAN NO\n                    SRSCAN CHART\n    The short-range scan gives you a considerable amount of information\n    about the quadrant your starship is in.  A short-range scan is best\n    described by an example.\n\n             1 2 3 4 5 6 7 8 9 10\n          1  * . . . . R . . . .  Stardate      2516.3\n          2  . . . E . . . . . .  Condition     RED\n          3  . . . . . * . B . .  Position      1 - 5, 4 - 2\n          4  . . . S . . . . . .  Life Support  DAMAGED, Reserves=2.30\n          5  . . . . . . . K . .  Warp Factor   5.0\n          6  . K .   . . . . * .  Energy        2176.24\n          7  . . . . . P . . . .  Torpedoes     3\n          8  . . . . * . . . . .  Shields       UP, 42% 1050.0 units\n          9  . * . . * . . . C .  Klingons Left 12\n         10  . . . . . . . . . .  Time Left     3.72\n\n\n    The left part is a picture of the quadrant.  The E at sector 4 - 2\n    represents the Enterprise; the B at sector 8 - 3 is a starbase.\n    There are ordinary Klingons (K) at sectors 8 - 5 and 2 - 6, and a\n    Klingon Commander (C) at 9 - 9.  The (GULP) \"Super-commander\" (S) is\n    occupies sector 4 - 4, and a Romulan (R) is at 6 - 1.  A planet (P)\n    is at sector 6 - 7.  There are also a large number of stars (*). The\n    periods (.) are just empty space--they are printed to help you get\n    your bearings.  Sector 6 - 4 contains a black hole ( ).\n\n    The information on the right is assorted status information. You can\n    get this alone with the STATUS command.  The status information will\n    be absent if you type \"N\" after SRSCAN.  Otherwise status information\n    will be presented.\n\n    If you type \"C\" after SRSCAN, you will be given a short-range scan\n    and a Star Chart.\n\n    Short-range scans are free.  That is, they use up no energy and no\n    time.  If you are in battle, doing a short-range scan does not give\n    the enemies another chance to hit you.  You can safely do a\n    short-range scan anytime you like.`;\n    }\n\n    objectToText(obj) {\n        if (!obj) {\n            return '.';\n        } else if (obj instanceof _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"Klingon\"]) {\n            return 'K';\n        } else if (obj instanceof _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"KlingonCommander\"]) {\n            return \"C\";\n        } else if (obj instanceof _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"KlingonSuperCommander\"]) {\n            return \"S\";\n        } else if (obj instanceof _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"Romulan\"]) {\n            return \"R\";\n        } else if (obj instanceof _PlayerShips_Enterprise_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            return \"E\";\n        } else if (obj instanceof _Objects_Star_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n            return \"*\";\n        } else if (obj instanceof _Objects_Planet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]) {\n            return \"P\";\n        } else if (obj instanceof _Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            return \"B\";\n        } else if (obj instanceof _Objects_BlackHole_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]) {\n            return \" \";\n        }\n        return \"?\";\n    }\n\n    async run() {\n        // get their short range sensors\n        let sensors = this.player.deviceContainer.getDevice(_Devices_js__WEBPACK_IMPORTED_MODULE_1__[\"shortRangeSensorType\"]);\n        if (!sensors) {\n            this.terminal.printLine(\"Captain we don't have sensors!\");\n            return;\n        }\n        // get the options\n        let no = optionRegexifier(\"n\", \"no\");\n        let printStatus = !this.terminal.hasOption(no);\n        let chart = optionRegexifier(\"c\", \"chart\");\n        let printChart = this.terminal.hasOption(chart);\n\n        // use player location\n        let quadrant = this.player.gameObject.quadrant;\n        let matrix = [];\n\n        // make our matrix of text\n        // if damage set everything to -\n        if (sensors.isDamaged()) {\n            for (let i = 0; i < quadrant.sectors.length; i++) {\n                let textRow = [];\n                quadrant.sectors[i].forEach(sector => {\n                    textRow.push('-')\n                });\n                matrix.push(textRow);\n            }\n            // now show the adjacent sectors\n            let adjacent = this.player.gameObject.sector.getAdjacentSectors(true);\n            adjacent.forEach(sector => {\n                let obj = sector.container.getAllGameObjects()[0];\n                matrix[sector.y][sector.x] = this.objectToText(obj);\n            })\n        } else {\n            for (let i = 0; i < quadrant.sectors.length; i++) {\n                let textRow = [];\n                quadrant.sectors[i].forEach(sector => {\n                    let obj = sector.container.getAllGameObjects()[0];\n                    textRow.push(this.objectToText(obj));\n                });\n                matrix.push(textRow);\n            }\n        }\n\n        // add left number column for y coord\n        matrix.forEach((row, i) => {\n            row.unshift(`${i + 1}`);\n        });\n\n        // add top row for x coord\n        // make sure to account for the extra column\n        let headerRow = [\" \"];\n        let rowLength = matrix[0].length;\n        // skip first and last columns\n        for (let i = 1; i < rowLength; i++) {\n            headerRow.push(`${i}`);\n        }\n        matrix.unshift(headerRow);\n\n        // make the matrix from the sector\n\n        // format the grid so the spacing is correct\n        matrix = this.terminal.formatGrid(matrix);\n\n        if (this.addPadding) this.terminal.newLine();\n        this.terminal.printLine(\"CHART OF THE CURRENT QUADRANT\");\n        this.terminal.newLine();\n        // add status info\n        if (printStatus) {\n            // join the row together, add separators\n            matrix = matrix.map(row => row.join(\" \"));\n            // skip the header rows, then add the status text line by line\n            let statusLines = this.statusCommand.getStatusText();\n            statusLines.forEach((line, i) => {\n                matrix[i] += \"  \" + line;\n            });\n            // join the rows with \\n\n            let text = matrix.join(\"\\n\");\n            // print\n            // this.terminal.echo(text);\n            this.terminal.echo(text);\n        } else {\n            this.terminal.printGrid(this.terminal.formatGrid(matrix), \" \", \"\", true);\n        }\n        // print out the star chart if requested\n        if (printChart) {\n            this.terminal.echo(\"\\n\\n\");\n            this.terminal.echo(this.chartCommand.makeChartText());\n        }\n        if (this.addPadding) this.terminal.newLine();\n        this.terminal.newLine();\n        this.terminal.printLine(\"E = Enterprise\");\n        this.terminal.printLine(\"K = klingon; C = commander; S = super commander; R = romulan;\");\n        this.terminal.printLine(\". = nothing; * = star; empty = black hole.\");\n        this.terminal.printLine(\"p = planet; b = base;\")\n        if (this.addPadding) this.terminal.newLine();\n    }\n}\n\nclass LongRangeScanCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.terminal = terminal;\n        this.game = game;\n        this.player = player;\n        this.abbreviation = \"l\";\n        this.name = \"lrscan\";\n        this.regex = regexifier(\"l\", \"lrscan\", \"long range scan\");\n        this.fullName = \"Long Range Scan\";\n        this.type = INFO_COMMAND;\n        this.info = `  Mnemonic:  LRSCAN\n      Shortest abbreviation:  L\n\n    A long-range scan gives you general information about where you are\n    and what is around you.  Here is an example output.\n\n        Long-range scan for Quadrant 5 - 1\n           -1  107  103\n           -1  316    5\n           -1  105 1000\n\n    This scan says that you are in row 5, column 1 of the 8 by 8 galaxy.\n    The numbers in the scan indicate how many of each kind of thing there\n    is in your quadrant and all adjacent quadrants.  The digits are\n    interpreted as follows.\n\n        Thousands digit:  1000 indicates a supernova (only)\n        Hundreds digit:   number of Klingons present\n        Tens digit:       number of starbases present\n        Ones digit:       number of stars present\n\n    For example, in your quadrant (5 - 1) the number is 316, which\n    indicates 3 Klingons, 1 starbase, and 6 stars.  The long-range\n    scanner does not distinguish between ordinary Klingons and Klingon\n    command ships.  If there is a supernova, as in the quadrant below and\n    to your right (quadrant 6 - 2), there is nothing else in the\n    quadrant.\n\n    Romulans possess a \"cloaking device\" which prevents their detection\n    by long-range scan.  Because of this fact, Starfleet Command is never\n    sure how many Romulans are \"out there\".  When you kill the last\n    Klingon, the remaining Romulans surrender to the Federation.\n\n    Planets are also undetectable by long-range scan.  The only way to\n    detect a planet is to find it in your current quadrant with the\n    short-range sensors.\n\n    Since you are in column 1, there are no quadrants to your left. The\n    minus ones indicate the negative energy barrier at the edge of the\n    galaxy, which you are not permitted to cross.\n\n    Long-range scans are free.  They use up no energy or time, and can be\n    done safely regardless of battle conditions.`;\n    }\n\n    run() {\n        // todo:: save info\n        // use player location\n        let playerQuadrant = this.game.player.gameObject.quadrant;\n        // get a 3 x 3 quadrant matrix with the player at the center\n        let matrix = [];\n        for (let y = playerQuadrant.y - 1; y <= playerQuadrant.y + 1; y++) {\n            let textRow = [];\n\n            for (let x = playerQuadrant.x - 1; x <= playerQuadrant.x + 1; x++) {\n                let quadrant = null;\n                try {\n                    quadrant = this.game.galaxy.getQuadrant(x, y)\n                    if (!quadrant) {\n                        textRow.push(`-1`); //out of bounds\n                    } else {\n                        let num = 0;\n                        let superNovaText = quadrant.hasSupernova ? \"1\" : \" \";\n                        // let superNovaText = quadrant.hasSupernova ? 1 : 0;\n                        // num += superNovaText * 1000;\n                        let klingonText = quadrant.container.getCountOfGameObjects(\n                            _Enemies_Enemies_js__WEBPACK_IMPORTED_MODULE_0__[\"AbstractKlingon\"]\n                        );\n                        num += klingonText * 100;\n                        klingonText = klingonText === 0 ? ' ' : klingonText;\n\n                        let starbaseText = quadrant.container.getCountOfGameObjects(_Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n                        // num += starbaseText * 10;\n                        starbaseText = starbaseText === 0 ? ' ' : starbaseText;\n\n                        let starText = quadrant.container.getCountOfGameObjects(_Objects_Star_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n                        starText = starText === 0 ? ' ' : starText;\n                        // num += starbaseText;\n\n                        let text = `${superNovaText}${klingonText}${starbaseText}${starText}`;\n                        textRow.push(text);\n                        // textRow.push(\"\" + num);\n                    }\n                } catch (e) {\n                    textRow.push(`-1`); //out of bounds\n                }\n            }\n            matrix.push(textRow);\n        }\n        this.terminal.echo(`\\nLong-range scan for ${this.player.gameObject.getQuadrantLocation()}\\n\\n`);\n        let txt = this.terminal.formatGrid(matrix).map(row => row.join(\"\\t\")).join(\"\\n\");\n        this.terminal.echo(txt);\n        this.terminal.newLine();\n    }\n}\n\nclass DockCommand extends Command {\n    constructor(game, terminal, player) {\n        super();\n        this.game = game;\n        this.terminal = terminal;\n        this.player = player;\n        this.abbreviation = \"d\";\n        this.name = \"dock\";\n        this.fullName = \"dock at starbase\";\n        this.regex = regexifier(this.abbreviation, this.name, this.fullName);\n        this.deviceUsed = \"\";\n        this.options = {};\n        this.type = INFO_COMMAND;\n        this.info = `\n  Mnemonic:  DOCK\n  Shortest abbreviation:  D\n\nYou may dock your starship whenever you are in one of the eight\nsector positions immediately adjacent to a starbase.  When you dock,\nyour starship is resupplied with energy, shield energy photon\ntorpedoes.`;\n    }\n\n    run() {\n        if (this.player.docked) {\n            this.terminal.echo(\"Already docked.\");\n            return;\n        }\n        // if you're in one of the eight adjacent sectors of a starbase\n        // then \"dock\"\n        let sector = this.player.gameObject.sector;\n        let quadrant = this.player.gameObject.quadrant;\n\n        let found = false;\n        for (let x = sector.x - 1; x <= sector.x + 1; x++) {\n            for (let y = sector.y - 1; y <= sector.y + 1; y++) {\n                try {\n                    let nearbySector = quadrant.getSector(x, y);\n                    let starbase = nearbySector.container.getGameObjectsOfType(_Objects_StarBase_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])[0];\n                    if (starbase) {\n                        found = true;\n                        this.player.dock(starbase);\n                        this.terminal.echo(\"Docked.\");\n                        break;\n                    }\n                } catch (e) {\n                    // not found\n                }\n            }\n            if (found) {\n                break;\n            }\n        }\n        if (!found) {\n            this.terminal.echo(`${this.player.name} is not adjacent to a starbase.`);\n        }\n    }\n}\n\n/**\n {\n  abbreviation: \"\",\n  name: \"\",\n  regex: null,\n  fullName: ,\n  devicedUsed: ,\n  options: {},\n  info: ``\n}\n **/\n\n/**\n Commands to make\n \"phasers\",\n \"photons\",\n \"move\",\n \"shields\",\n \"dock\",\n \"damages\",\n \"chart\",\n \"impulse\",\n \"rest\",\n \"warp\",\n \"status\",\n \"sensors\",\n \"orbit\",\n \"transport\",\n \"mine\",\n \"crystals\",\n \"shuttle\",\n \"planets\",\n \"request\",\n \"report\",\n \"computer\",\n \"commands\",\n \"emexit\",\n \"probe\",\n \"cloak\",\n \"capture\",\n \"score\",\n \"abandon\",\n \"destruct\",\n \"freeze\",\n \"deathray\",\n \"debug\",\n \"call\",\n \"quit\",\n \"help\"\n **/\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/commands.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/superStarTrek.js":
/*!*****************************************************!*\
  !*** ./web/js/games/superStarTrek/superStarTrek.js ***!
  \*****************************************************/
/*! exports provided: DEBUG, LAST_UPDATED_AT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEBUG\", function() { return DEBUG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LAST_UPDATED_AT\", function() { return LAST_UPDATED_AT; });\n/* harmony import */ var _components_Errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/Errors.js */ \"./web/js/components/Errors.js\");\n/* harmony import */ var _components_Navbar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/Navbar.js */ \"./web/js/components/Navbar.js\");\n/* harmony import */ var _lib_ptty_jquery_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/ptty.jquery.js */ \"./web/lib/ptty.jquery.js\");\n/* harmony import */ var _lib_ptty_jquery_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_ptty_jquery_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Game_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Game.js */ \"./web/js/games/superStarTrek/Game.js\");\n/* harmony import */ var _Menu_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Menu.js */ \"./web/js/games/superStarTrek/Menu.js\");\n/* harmony import */ var _Terminal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Terminal.js */ \"./web/js/games/superStarTrek/Terminal.js\");\n/* harmony import */ var _Tests_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Tests.js */ \"./web/js/games/superStarTrek/Tests.js\");\n/* harmony import */ var _utils_Screen_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/Screen.js */ \"./web/js/games/superStarTrek/utils/Screen.js\");\n\n\n\nconst errorHandler = new _components_Errors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"error\");\nerrorHandler.init();\n\n\n\n\n\n\n\nconst DEBUG = true;\nconst RUN_TESTS = false;\nconst LAST_UPDATED_AT = \"Oct 27 2019\";\n\n\n$(document).ready(function () {\n    let nav = new _components_Navbar_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    nav.init();\n    // media querying bullshit\n    window.screen = new _utils_Screen_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n\n    // return;\n    const versions = {\n        1: {\n            name: \"Star Trek\",\n            info: \"\",\n            features: [],\n            authors: [\"David Matuszek\", \"Paul Reynolds\", \"Don Smith\"],\n            createdDate: \"\"\n        },\n        2: {\n            name: \"Super Star Trek\",\n            info: \"\",\n            features: [],\n            authors: [\"Tom Almy\"], // ??\n            createdDate: \"\"\n        },\n        3: {\n            name: \"Super Star Trek+\",\n            info: \"\",\n            features: [],\n            author: \"Eric Glover\"\n        }\n    };\n    // return;\n    _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"terminal\"].init($(\"#main-pane\"), 'boring');\n    _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"pane1\"].init($(\"#info-pane-1\"));\n    _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"pane2\"].init($(\"#info-pane-2\"));\n\n    // test some things\n    if (RUN_TESTS) {\n        let tester = new _Tests_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n        tester.testAngle();\n    }\n\n    // make our game and menu\n    let game = new _Game_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"terminal\"], _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"pane1\"], _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"pane2\"], screen);\n    let menu = new _Menu_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](_Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"terminal\"]);\n    menu.game = game;\n    _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"terminal\"].silent = false;\n\n    if (DEBUG) { // SKIP the menu\n        _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"terminal\"].setPrompt(\"COMMAND>\");\n        game.start();\n        window.game = game;\n        window.terminal = _Terminal_js__WEBPACK_IMPORTED_MODULE_5__[\"terminal\"];\n    } else {\n        menu.start();\n    }\n});\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/superStarTrek.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/utils/Screen.js":
/*!****************************************************!*\
  !*** ./web/js/games/superStarTrek/utils/Screen.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Screen; });\n/**\n * Handles screen size changes\n */\nclass Screen {\n    constructor() {\n        this.isTinyScreen = false;\n        this.isSmallScreen = false;\n        this.isMediumScreen = true;\n        this.isLargeScreen = false;\n        this.receivedNotificationCount = 0;\n\n        if(!matchMedia) {\n            console.error(\"match media not supported....abandon ship\");\n            return;\n        }\n        // media querying bullshit\n        this._isTinyScreenQuery = matchMedia(\"(max-width: 767px)\");\n        this._isSmallScreenQuery =  matchMedia(\"(min-width: 768px) and (max-width: 991px)\");\n        this._isMediumScreenQuery =  matchMedia(\"(min-width: 992px) and (max-width: 1299px)\");\n        this._isLargeScreenQuery =  matchMedia(\"(min-width: 1300px)\");\n\n        this.handleSizeChange = this.handleSizeChange.bind(this);\n\n        if (this._isTinyScreenQuery.addEventListener) {\n            this._isTinyScreenQuery.addEventListener(\"change\", this.handleSizeChange);\n            this._isSmallScreenQuery.addEventListener(\"change\", this.handleSizeChange);\n            this._isMediumScreenQuery.addEventListener(\"change\", this.handleSizeChange);\n            this._isLargeScreenQuery.addEventListener(\"change\", this.handleSizeChange);\n        }else if (this._isTinyScreenQuery.addListener) {\n            console.error(\"mediaQuery.addEventListener not supported, using addListener\");\n            this._isTinyScreenQuery.addListener(this.handleSizeChange);\n            this._isSmallScreenQuery.addListener(this.handleSizeChange);\n            this._isMediumScreenQuery.addListener(this.handleSizeChange);\n            this._isLargeScreenQuery.addListener(this.handleSizeChange);\n        } else {\n            setInterval(this.pollForSizeChange.bind(this), 1000);\n            console.error(\"matchMedia.addListener not supported, resorting to polling every second\");\n        }\n        this.determineScreenSize();\n        this.onSizeChangeCallbacks = [];\n    }\n    pollForSizeChange() {\n        let oldT = this.isTinyScreen;\n        let oldS = this.isSmallScreen;\n        let oldM = this.isMediumScreen;\n        let oldL = this.isLargeScreen;\n        this.determineScreenSize();\n        if(\n            oldT !== this.isTinyScreen ||\n            oldS !== this.isSmallScreen ||\n            oldM !== this.isMediumScreen ||\n            oldL !== this.isLargeScreen\n        ) {\n            this.onSizeChangeCallbacks.forEach( fn => fn(this));\n        }\n    }\n    handleSizeChange() {\n        this.receivedNotificationCount++;\n        // you get two notifications for the change, we want to emit only one so...\n        if(this.receivedNotificationCount === 2) {\n            this.receivedNotificationCount = 0;\n            this.determineScreenSize();\n            this.onSizeChangeCallbacks.forEach( fn => fn(this));\n        }\n    }\n    determineScreenSize() {\n        this.isTinyScreen = this._isTinyScreenQuery.matches;\n        this.isSmallScreen = this._isSmallScreenQuery.matches;\n        this.isMediumScreen = this._isMediumScreenQuery.matches;\n        this.isLargeScreen = this._isLargeScreenQuery.matches;\n    }\n    addSizeChangeCallback(fn) {\n        this.onSizeChangeCallbacks.push(fn);\n    }\n}\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/utils/Screen.js?");

/***/ }),

/***/ "./web/js/games/superStarTrek/utils/Service.js":
/*!*****************************************************!*\
  !*** ./web/js/games/superStarTrek/utils/Service.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Service; });\nconst superStarTrekGameId = 1;\n\nclass Service {\n    constructor() {\n        this.apiUrl = \"/games/superStarTrek\";\n    }\n\n    createGameLog(score, victory, gameId = superStarTrekGameId){\n        return $.ajax({\n            url: '/gameLog',\n            data: JSON.stringify({score, victory, gameId}),\n            contentType: 'application/json',\n            method: 'POST'\n        });\n    }\n\n    getHelp(command) {\n        return $.ajax({\n            url: `${this.apiUrl}/help`,\n            data: {command}\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek/utils/Service.js?");

/***/ }),

/***/ "./web/lib/dist/mitt.es.js":
/*!*********************************!*\
  !*** ./web/lib/dist/mitt.es.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `\"*\"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all['*'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (mitt);\n//# sourceMappingURL=mitt.es.js.map\n\n\n//# sourceURL=webpack:///./web/lib/dist/mitt.es.js?");

/***/ }),

/***/ "./web/lib/ptty.jquery.js":
/*!********************************!*\
  !*** ./web/lib/ptty.jquery.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @file   : ptty.jquery.js\n * @ver    : 0.0.5 (beta)\n * @author : Pachanka <social@pachanka.org>\n * @url    : http://goto.pachanka.org/ptty/docs\n * @desc   : Ptty (Pseudo teletype). A terminal emulator plugin for jQuery.\n * @license: WTFPL Version 2. (http://www.wtfpl.net/)\n **/\n\n(function($) {\n  \"use strict\";\n\n  /**\n    * @method : Ptty\n    * @public\n    * @desc   : Sets up the terminal on the jQuery object that represents a\n                group of HTML nodes.\n    * @args   : object\n    **/\n  $.fn.Ptty = function(options) {\n    var version = \"0.0.5 beta\";\n\n    /**\n     * @function : get_defaults\n     * @returns  : Object\n     * @desc     : Returns Global Defaults\n     * */\n    var get_defaults = function() {\n      return {\n        // The HTTP Method that will be used for Ajax Requests\n        ajax_options: {\n          url: window.location.pathname,\n          type: \"POST\"\n        },\n\n        // The GET/POST parameter that should be used to make requests\n        param: \"cmd\",\n\n        // The Primary Prompt (it's better to edit this using css)\n        ps: \"$\",\n\n        // Caret (the cursor)\n        caret: \"\\u25ae\", // Black Vertical Rectangle ▮\n        caret_blink: 800,\n\n        // use native css and default theme name.\n        native_css: true,\n        theme: \"boring\",\n\n        // Register help, clear and history commands\n        native_cmds: true,\n\n        // Is Autocomplete feature Enabled\n        autocomplete: true,\n\n        // Number of entries to be stored in history (0 = off)\n        history_max: 800,\n\n        // Autofocus on input on load\n        autofocus: true,\n\n        // Run this function before every command\n        before_cmd: false,\n\n        // Run this function after every command\n        after_cmd: false,\n\n        // Language\n        i18n: {\n          // Message to be shown when the terminal is first\n          welcome:\n            \"Ptty (\" +\n            version +\n            \").<br> Type <b>help</b> to list the available commands.\",\n          // When command is not found: \"CMD\" will be replaced\n          error_not_found: \"Command not found.\",\n          // If command method is not valid\n          error_bad_method: \"Invalid command method.\",\n          // Ajax response failed\n          error_ajax: \"Server error.\"\n        }\n      };\n    };\n\n    // The public methods container\n    var public_methods = {};\n\n    // jQuery Plugin\n    this.each(function() {\n      // Ptty holder element\n      var el = $(this);\n\n      /**\n       * @property : commands\n       * @desc     : Stores command name and action to be taken when user enters a command.\n       **/\n      var commands = {}; // {given_command_name: command}\n      window.commands = commands;\n      var commandNameHash = {}; // name matcher {given_command_name : regex }\n\n      /**\n       * @property : response\n       * @desc     : Stores the methods for command responses.\n       **/\n      var responses = {};\n\n      /**\n       * @property : callbacks\n       * @desc     : Callbacks object that stores callback methods.\n       **/\n      var callbacks = {};\n\n      /**\n       * @property : callbefores\n       * @desc     : Calls function before running through Ptty.\n       **/\n      var callbefores = {};\n\n      /**\n       * @property : history\n       * @desc     : Mantains the record of called commands\n       **/\n      var history = [];\n\n      /**\n       * @property : cmd_opts\n       * @desc     : Options of current command.\n       **/\n      var cmd_opts = {\n        // The ps value\n        ps: null,\n        // The command string\n        in: null,\n        // The output of the command.\n        out: null,\n        // The last command (can be object)\n        last: null,\n        // Do this next (can be object)\n        next: null,\n        // All the rest of data.\n        data: null\n      };\n\n      // extension for using regex to match what command should be\n      // run .\n      /**\n       * @string str (the input)\n       * returns a string command name or false\n       **/\n      var get_command = function(str) {\n        // use the commandNames to look for a regex match\n        let commandNames = Object.getOwnPropertyNames(commandNameHash);\n\n        var found = false;\n        var match = false;\n        Object.entries(commandNameHash).forEach(([name, regex]) => {\n          if (!found && regex.test(str)) {\n            match = name;\n            found = true;\n          }\n        });\n        if (found) {\n          return match;\n        }\n        return str;\n      };\n\n      // Merge options with defaults (if any)\n      var settings = $.extend(true, get_defaults(), options);\n\n      /**\n       * @method   : get_terminal\n       * @desc     : Returns the terminal element or a sub-element\n       **/\n      public_methods.get_terminal = function(selector) {\n        return !selector ? el : el.find(selector);\n      };\n\n      /**\n       * @method   : native_style\n       * @desc     : Registers the native CSS rules.\n       **/\n      public_methods.native_style = function(el, theme) {\n        var att = el.attr(\"id\");\n        if (!att) {\n          att = \".\" + el.attr(\"class\").split(\" \")[1];\n        } else {\n          att = \"#\" + att;\n        }\n        if (theme === \"boring\") {\n          var boring_theme = [\n            \".boring, .boring .prompt, .boring .content\" +\n              '{ font-family: \"Courier New\", Courier, monospace; background-color: #111; color: #ddd; }',\n            \".boring .content\" + \"{ padding: 15px 15px 0 15px; }\",\n            \".boring .prompt\" + \"{ padding: 0 15px 15px 15px; }\",\n            \".boring .loading span::after\" +\n              '{content: \"\\u2699\"; color: #ddd; font-size: 10em; border-radius: 10em; opacity: 0.4;}',\n            \".boring .content ul\" + \"{ margin: 0; }\",\n\n            \".boring .prompt .input.show-caret\" +\n              \"{ color: #ddd; opacity: .85; }\", // When edit mode is on show caret\n            \".boring .prompt .input, .boring .prompt .input::before, .boring .prompt .input::after\" +\n              \"{ color: transparent; text-shadow:0 0 0 #ddd; }\", // Caret remover hack\n            \".boring .content div .cmd_in .cmd_ps, .boring .prompt .input::before\" +\n              \"{ padding-right: 10px; }\",\n            \".boring .content ul li\" + \"{ list-style-type: none; }\",\n            \".boring div.prompt div.input::after\" + \"{ font-size: 2em; }\",\n            \".boring div.prompt div.input, .boring div.content div div.cmd_in, .boring div.prompt div.input::before\" +\n              \"{ line-height: 2em; }\"\n          ];\n          boring_theme = boring_theme.join(\"\\n\");\n\n          $(\n            '<style id=\"ptty-boring-theme\">' + boring_theme + \"</style>\"\n          ).appendTo(\"head\");\n        }\n\n        var rules = [\n          att +\n            // \"{ position: relative; display: block; overflow-X: hidden; height: 100%; }\",\n          \"div.content div p\" + \"{ margin: 0; }\",\n          \"div.content div\" +\n            \"{ clear: both; white-space:pre-wrap; word-wrap:break-word; }\",\n          \"div.content div ul\" + \"{ padding: 0; white-space: normal }\",\n          \"div.content div ul li\" + \"{ list-style: none; }\",\n          \"div.content div ul.sq-li li\" +\n            \"{ display: inline-block; text-align: center; padding: 10px; min-width: 5%; }\",\n\n          \"div.prompt div.input\" +\n            \"{ width: 100%; white-space:pre-wrap; word-wrap:break-word; cursor: default; outline: none;}\",\n          \"div.prompt div.input::before\" +\n            \"{ vertical-align: middle; content: attr(data-ps); }\",\n          \"div.prompt div.input::after\" +\n            \"{ visibility : visible; vertical-align: middle; content: attr(data-caret); margin-left:-0.15em;}\",\n          \"div.prompt div.input.blink::after\" + \"{ visibility : hidden; }\",\n          \"div.prompt .hide\" + \"{ position:absolute; top: -9999em; }\",\n\n          \"div.loading\" + \"{ display: none; }\",\n          \"div.loading.working\" +\n            \"{ display: block; display:flex; justify-content: center; align-items: center;\" +\n            \"position: fixed;  width: inherit; height: inherit; }\",\n          \"div.loading span\" +\n            \"{ -webkit-animation: spin 4s linear infinite; -moz-animation: spin 4s linear infinite; \" +\n            \"-ms-animation: spin 4s linear infinite; -o-animation: spin 4s linear infinite; \" +\n            \"animation: spin 4s linear infinite; }\"\n        ];\n        rules = rules.join(\"\\n\" + \" \" + att + \" \");\n\n        // Loading spinning animation\n        rules +=\n          \"@-moz-keyframes spin { 100% { -moz-transform: rotate(360deg); } }\" +\n          \"@-webkit-keyframes spin { 100% { -webkit-transform: rotate(360deg); } }\" +\n          \"@-ms-keyframes spin { 100% { -ms-transform: rotate(360deg); } }\" +\n          \"@-o-keyframes spin { 100% { -o-transform: rotate(360deg); } }\" +\n          \"@keyframes spin { 100% { transform: rotate(360deg); } }\";\n\n        $('<style id=\"ptty-styles\">' + rules + \"</style>\").appendTo(\"head\");\n      };\n\n      /**\n       * @method   : ptty_native_commands\n       * @desc     : Registers the native Ptty commands\n       **/\n      public_methods.native_commands = function() {\n        public_methods.register(\"command\", {\n          name: \"clear\",\n          method: function(cmd) {\n            cmd.last = \"\";\n            cmd.out = \"\";\n            return cmd;\n          },\n          options: [],\n          help: \"Cleans the screen leaving a new command prompt ready.\"\n        });\n        public_methods.register(\"callback\", {\n          name: \"clear\",\n          method: function(cmd) {\n            el.find(\".content\").html(\"\");\n            return cmd;\n          }\n        });\n\n        public_methods.register(\"command\", {\n          name: \"history\",\n          method: function(cmd) {\n            if (cmd.hasOwnProperty(\"clear\")) {\n              history = [];\n              cmd.out = \"History cleared.\";\n            } else if (history.length > 0) {\n              var i;\n              cmd.out = \"<ul>\";\n              for (var i = 0; i < history.length; i += 1) {\n                cmd.out += \"<li>\" + history[i] + \"</li>\";\n              }\n              cmd.out += \"</ul>\";\n            }\n            return cmd;\n          },\n          options: [\"clear\"],\n          help:\n            \"Shows list of typed in commands. Type <i>history clear</i> to clear your history.\"\n        });\n\n        public_methods.register(\"command\", {\n          name: \"help\",\n          method: function(cmd) {\n            var command_keys = Object.keys(commands);\n            if (typeof cmd[1] === \"string\" && cmd[1].length > 0) {\n              if (cmd.hasOwnProperty(\"-a\") || cmd.hasOwnProperty(\"--all\")) {\n                cmd.out = \"<b>Available commands:</b></br></br><ul>\";\n\n                for (var i = 0; i < command_keys.length; i += 1) {\n                  cmd.out += \"<li><p><b>\" + i + \"</b> - \";\n                  cmd.out += commands[command_keys[i]].help + \"</p></br></li>\";\n                }\n                cmd.out += \"</ul>\" + \"\\n\";\n              } else if (typeof commands[cmd[1]] !== \"undefined\") {\n                cmd.out = \"<b>\" + cmd[1] + \"</b> - \";\n                if (commands[cmd[1]].help !== \"\") {\n                  cmd.out += commands[cmd[1]].help + \"\\n\";\n                } else {\n                  cmd.out += \"No help entry available.\" + \"\\n\";\n                }\n              } else {\n                cmd.out =\n                  'help: The \"' + cmd[1] + '\" option does not exist.' + \"\\n\";\n              }\n            } else {\n              cmd.out =\n                'Use \"help [comand name]\" to display specific info about a command.</br>' +\n                \"\\n\";\n              cmd.out += 'Available commands are:</br><ul class=\"sq-li\">';\n              for (var i = 0; i < command_keys.length; i += 1) {\n                cmd.out += \"<li>\" + command_keys[i] + \"</li>\";\n              }\n              cmd.out += \"</ul>\" + \"\\n\";\n            }\n            return cmd;\n          },\n          options: [1, \"-a\", \"--all\"],\n          help:\n            \"Displays a list of useful information. Usage: \" +\n            \"<i>help command-name</i> to show <i>command-name</i>'s help.\" +\n            \"<i>help -a</i> or <i>help --all</i> to display all help.\"\n        });\n      };\n\n      /**\n       * @method   : ptty_native_responses\n       * @desc     : Registers the native Ptty commands\n       **/\n      public_methods.native_responses = function(cmd_opts) {\n        for (var opt in cmd_opts) {\n          if (cmd_opts.hasOwnProperty(opt)) {\n            public_methods.register(\"response\", {\n              name: opt,\n              method: function(cmd) {\n                cmd_opts[opt] = cmd[opt];\n                return cmd;\n              }\n            });\n          }\n        }\n      };\n\n      /**\n       * @method : run_command\n       * @desc   : Takes a string and runs it as a command.\n       **/\n      public_methods.run_command = function(command, mute = false) {\n        quiet = mute;\n        cmd_start(command);\n      };\n\n      /**\n       * @method : echo\n       * @desc   : Takes a string and\n       **/\n      public_methods.echo = function(out_str, no_scroll) {\n        if (out_str) {\n          el.find(\".content\").append(\n            '<div><div class=\"cmd_out\">' + out_str + \"</div></div>\"\n          );\n        }\n        if (!no_scroll) {\n          scroll_to_bottom();\n        }\n      };\n\n      public_methods.prompt = function(question, method) {\n        this.register(\"command\", {\n          name: \"ask\",\n          method: cmd => {\n            let input = this.get_input(); // save this\n            this.unregister(\"command\", \"ask\");\n            // delay a bit so our terminal can finish processing\n            setTimeout(() => method(input), 10);\n          },\n          regex: new RegExp(`[\\s\\S]*`, \"i\")\n        });\n      };\n\n      // typewriter mode\n      public_methods.type = function(str, speed = 60) {\n        this.echo(\"\\n\");\n        var text_input = this.get_terminal(\".prompt\");\n        var typebox = $(\"<span></span>\").appendTo(\".content\");\n\n        // Type string out\n        var self = this;\n        var i = 0,\n          text;\n        (function typewriter() {\n          text = str.slice(0, ++i);\n          typebox.html(text);\n          self.echo(); // force scroll to bottom\n\n          var char = text.slice(-1);\n          setTimeout(typewriter, speed);\n        })();\n      };\n      /**\n       *\n       * Specify a column width or defaults to the largest\n       * @param grid array<array<string>>\n       * @param columnWidth int\n       * @returns array<array<string>>\n       */\n      public_methods.format_grid = function(grid, padLeft = true, columnWidth = null) {\n        // get longest string that we'll use for data\n        var longest = grid.reduce((l, row) => {\n          var l2 = row.reduce((carry, d) => {\n            return carry > d.length ? carry : d.length;\n          }, 0);\n          return l > l2 ? l : l2;\n        }, 0)\n        if(columnWidth === null) {\n          columnWidth = longest;\n        }\n        return grid.map(row => {\n          return row.map(str => {\n            if(padLeft) {\n              return str.padStart(columnWidth)\n            } else {\n              return str.padEnd(columnWidth);\n            }\n          });\n        });\n      }\n\n      /**\n       * @param grid\n       * @param columnSeparator\n       * @param rowSeparator\n       */\n      public_methods.print_grid = function(\n        grid,\n        columnSeparator = \" \",\n        rowSeparator = \"\\n\",\n        echo = false\n      ) {\n        var rows = [];\n        for (var i = 0; i < grid.length; i++) {\n          // make line of text for row\n          var row = grid[i];\n          var line = row.join(columnSeparator);\n          rows.push(line + \"\\n\");\n        }\n        var text = rows.join(rowSeparator);\n        if(echo) {\n          this.echo(text);\n        }\n        return text;\n      };\n\n      /**\n       * @method : change_settings\n       * @desc   : Edits a property from the settings (not all settings are editable)\n       **/\n      public_methods.change_settings = function(settings_obj) {\n        $.extend(true, settings, settings_obj);\n      };\n\n      /**\n       *\n       * @returns {jQuery|void}\n       */\n      public_methods.get_settings = function() {\n        return settings;\n      }\n\n      /**\n       * @method : unregister\n       * @desc   : Removes a property from the method stack.\n       **/\n      public_methods.unregister = function(method_type, method_name) {\n        // todo::\n        var flag = false;\n        if (\n          typeof method_name == \"object\" &&\n          method_name.hasOwnProperty(\"name\")\n        ) {\n          method_name = method_name.name;\n        }\n\n        if (\n          method_type == \"callbefore\" &&\n          callbefores.hasOwnProperty(method_name)\n        ) {\n          flag = true;\n          delete callbefores[method_name];\n        } else if (\n          method_type == \"command\" &&\n          commands.hasOwnProperty(method_name)\n        ) {\n          flag = true;\n          delete commands[method_name];\n          delete commandNameHash[method_name];\n        } else if (\n          method_type == \"response\" &&\n          responses.hasOwnProperty(method_name)\n        ) {\n          flag = true;\n          delete responses[method_name];\n        } else if (\n          method_type == \"callback\" &&\n          callbacks.hasOwnProperty(method_name)\n        ) {\n          flag = true;\n          delete callbacks[method_name];\n        }\n        return flag;\n      };\n\n      public_methods.get_input = function() {\n        return input.text();\n      };\n\n      /**\n       * @method : register\n       * @desc   : Adds a method to the specified method stack.\n       * @return : boolean. True on success.\n       **/\n      public_methods.register = function(method_type, obj) {\n        // todo::\n        //debugger;\n        var ret = false;\n        if (obj) {\n          var method_name = obj.hasOwnProperty(\"name\") ? obj.name : false,\n            method_exe = obj.hasOwnProperty(\"method\") ? obj.method : false,\n            method_options = obj.hasOwnProperty(\"options\") ? obj.options : [],\n            method_help = obj.hasOwnProperty(\"help\") ? obj.help : \"\",\n            method_regex = obj.hasOwnProperty(\"regex\")\n              ? obj.regex\n              : new RegExp(`^${method_name}$`);\n\n          // add command regex\n          commandNameHash[method_name] = method_regex;\n\n          if (method_type == \"callbefore\" && typeof method_exe === \"function\") {\n            callbefores[method_name] = method_exe;\n            ret = true;\n          } else if (\n            method_type == \"command\" &&\n            (typeof method_exe === \"string\" || typeof method_exe === \"function\")\n          ) {\n            // add command\n            commands[method_name] = {\n              help: method_help,\n              options: method_options,\n              exe: method_exe\n            };\n\n            ret = true;\n          } else if (\n            method_type == \"response\" &&\n            typeof method_exe === \"function\"\n          ) {\n            responses[method_name] = method_exe;\n            ret = true;\n          } else if (\n            method_type == \"callback\" &&\n            typeof method_exe === \"function\"\n          ) {\n            callbacks[method_name] = method_exe;\n            ret = true;\n          }\n        }\n\n        return ret;\n      };\n\n      /**\n       * @method : ptty_set_command_option\n       * @desc   : Edits the cmd_opts property.\n       * @option_obj : An object containing any of the cmd_opts attributes.\n       **/\n      public_methods.set_command_option = function(option_obj) {\n        return $.extend(true, cmd_opts, option_obj);\n      };\n\n      /**\n       * @method : ptty_get_command_option\n       * @desc   : Returns the cmd_opts value for the property requested.\n       * @options_mix   : The name (str) or names (arr) of the wanted properties.\n       **/\n      public_methods.get_command_option = function(options_mix) {\n        var out;\n        if (typeof options_mix === \"string\") {\n          out = cmd_opts.hasOwnProperty(options_mix)\n            ? cmd_opts[options_mix]\n            : false;\n        } else if (typeof options_mix === \"object\") {\n          out = {};\n          for (var i = options_mix.length - 1; i >= 0; i--) {\n            if (typeof cmd_opts[options_mix[i]] !== \"undefined\") {\n              out[options_mix[i]] = cmd_opts[options_mix[i]];\n            }\n          }\n        } else {\n          out = cmd_opts;\n        }\n\n        return out;\n      };\n\n      /**\n       * @method : ptty_tokenize\n       * @desc   : Will attempt to return an array where text has been tokenized in a command line fashion.\n       * @command: A string, for example: first -s second \"argument.sh -xyz\" --foo=\"bar \\'baz\\' 123\" -abc\n       * @array  : An array with the options to look for eg. [1,'--option','-x','-y','-z']\n       * (integers in the options array return their position in the command entered)\n       **/\n      public_methods.tokenize = function(command, options_arr) {\n        var out = {};\n        // ??? did this break things ?\n        var cmd = get_command(command); //$.trim(command).split(/\\s+/);\n\n        if (typeof cmd[0] === \"undefined\" || cmd[0] === \"\") {\n          out = false;\n        } else if (typeof options_arr !== \"undefined\") {\n          var option = false,\n            value = false,\n            quote_type = false,\n            quote_open = false,\n            first_char = false,\n            last_char = false,\n            before_last = false;\n\n          var wildcards = options_arr.filter(function(opt) {\n            if (\n              typeof opt === \"number\" &&\n              opt > 0 &&\n              typeof cmd[opt] !== \"undefined\"\n            ) {\n              out[opt] = cmd[opt];\n              return opt;\n            }\n          });\n          // remove wildcards from options_arr\n          options_arr = $(options_arr)\n            .not(wildcards)\n            .get();\n          for (var i = 0; i < cmd.length; i++) {\n            first_char = cmd[i].charAt(0);\n            last_char = cmd[i].slice(-1);\n            // before last to detect escapes\n            before_last = cmd[i].charAt(cmd[i].length - 2);\n            if ($.inArray(cmd[i], options_arr) >= 0) {\n              // Get option\n              option = cmd[i];\n              value = false;\n            } else if (\n              first_char == '\"' &&\n              quote_open === false &&\n              last_char !== '\"'\n            ) {\n              quote_type = '\"';\n              quote_open = true;\n              value = cmd[i];\n            } else if (\n              first_char == \"'\" &&\n              quote_open === false &&\n              last_char !== \"'\"\n            ) {\n              quote_type = \"'\";\n              quote_open = true;\n              value = cmd[i];\n            } else if (\n              last_char == quote_type &&\n              quote_open === true &&\n              before_last + last_char !== \"\\\\\" + quote_type\n            ) {\n              quote_open = false;\n              value += \" \" + cmd[i];\n              // Trim & Strip any ecaping slashes\n              value = $.trim(\n                value\n                  .substring(1)\n                  .slice(0, -1)\n                  .replace(/\\\\(.)/gm, \"$1\")\n              );\n            } else if (quote_open === true) {\n              value += \" \" + cmd[i];\n            } else {\n              if (\n                (first_char == \"'\" && last_char == \"'\") ||\n                (first_char == '\"' && last_char == '\"')\n              ) {\n                // Remove wrapping quotes\n                value = $.trim(cmd[i].substring(1).slice(0, -1));\n              } else {\n                value = cmd[i];\n              }\n            }\n            // Add to output\n            if (option && quote_open === false) {\n              out[option] = value;\n            }\n          }\n        } else {\n          out[cmd[0]] = cmd;\n        }\n        return out;\n      };\n\n      // cleanup\n      el.html(\"\");\n\n      // current history position\n      var hcurrent = null;\n\n      // current running command\n      var cmd_name = null;\n\n      // the tokenized command\n      var cmd_obj = {};\n\n      // Some markup\n      el.append(\n        '<div class=\"loading\"><span></span></div>' +\n          '<div class=\"content\">' +\n          \"<div>\" +\n          settings.i18n.welcome +\n          \"</div>\" +\n          \"</div>\" +\n          '<div class=\"prompt\">' +\n          '<div class=\"input\" contenteditable ' +\n          'spellcheck=\"false\" ' +\n          'data-caret=\"' +\n          settings.caret +\n          '\" ' +\n          'data-ps=\"' +\n          settings.ps +\n          '\">' +\n          \"</div>\" +\n          \"</div>\"\n      );\n\n      var input = el.find(\".prompt .input\");\n      var content = el.find(\".content\");\n      var loading = el.find(\".loading\");\n\n      // Setup styles.\n      el.attr(\"data-theme\", settings.theme).addClass(settings.theme);\n      if (settings.native_css) {\n        public_methods.native_style(el, settings.theme);\n      }\n\n      var blinking = settings.autofocus;\n\n      // temporary switches for subroutines\n      var tab_comp = settings.autocomplete;\n      var save_to_history = settings.history_max;\n\n      // Set caret on the prompt\n      if (settings.autofocus) {\n        input.focus();\n      }\n\n      el.bind(\"focus click\", function() {\n        var text = \"\";\n        if (typeof window.getSelection != \"undefined\") {\n          text = window.getSelection().toString();\n        } else if (\n          typeof document.selection != \"undefined\" &&\n          document.selection.type == \"Text\"\n        ) {\n          text = document.selection.createRange().text;\n        }\n        if (text == \"\") {\n          caret_to_end();\n        }\n      });\n\n      input.click(function() {\n        caret_to_end();\n      });\n      input.bind(\"blur\", function() {\n        blinking = false;\n      });\n      if (settings.caret_blink > 0) {\n        setInterval(function() {\n          if (settings.caret_blink > 0 && blinking === true) {\n            input.toggleClass(\"blink\");\n          }\n        }, settings.caret_blink);\n      }\n\n      // Register native commands and responses\n      if (settings.native_cmds) {\n        public_methods.native_commands();\n      }\n      public_methods.native_responses(cmd_opts);\n\n      // Quiet!\n      var quiet = null;\n\n      /* Command logic */\n      var cmd_start = function(direct_cmd) {\n        //debugger;\n        loading.addClass(\"working\");\n\n        // direct command or from input\n        var cmd;\n        if (typeof direct_cmd !== \"undefined\") {\n          cmd = direct_cmd;\n        } else {\n          cmd = input.text();\n        }\n\n        tab_comp = settings.autocomplete;\n        save_to_history = settings.history_max;\n\n        // Option overrides\n        cmd_opts.last = cmd;\n        if (typeof cmd_opts.next == \"string\") {\n          cmd = cmd_opts.next.replace(/%cmd%/i, cmd);\n          cmd_opts.next = null;\n          save_to_history = 0;\n        }\n\n        // if no command\n        if (!cmd || cmd == \"\") {\n          return cmd_update();\n        } else {\n          cmd_name = get_command(cmd);\n          //cmd_name = cmd.split(/\\s+/)[0];\n        }\n\n        //\n        if (typeof commands[cmd_name] !== \"undefined\") {\n          cmd_obj = public_methods.tokenize(cmd, commands[cmd_name].options);\n        } else {\n          if (!quiet) {\n            cmd_opts.out = cmd_name + \" : \" + settings.i18n.error_not_found;\n          }\n          return cmd_update();\n        }\n\n        // Run this before every *valid* command\n        if (typeof settings.before_cmd == \"function\") {\n          cmd_obj = cmd_response(settings.before_cmd(cmd_obj));\n          if (!cmd_obj) {\n            return cmd_update();\n          }\n        }\n\n        // Run callbefores for current command if any\n        if (typeof callbefores[cmd_name] == \"function\") {\n          cmd_obj = cmd_response(callbefores[cmd_name](cmd_obj));\n          if (!cmd_obj) {\n            return cmd_update();\n          }\n        }\n\n        // To modify history use a callbefore.\n        if (!quiet) {\n          add_to_history(cmd_opts.last);\n        }\n\n        // Call command\n        if (typeof commands[cmd_name].exe === \"function\") {\n          cmd_response(commands[cmd_name].exe(cmd_obj));\n          return cmd_update();\n        } else if (typeof commands[cmd_name].exe === \"string\") {\n          // Setup the defaults\n          var ajax_defaults = {};\n          if (!settings.ajax_options.data) {\n            var ajax_data = {};\n            ajax_data[settings.param] =\n              cmd_opts.in !== null ? cmd_opts.in : cmd_name;\n            ajax_data[settings.param + \"_data\"] =\n              cmd_opts.data !== null ? cmd_opts.data : cmd_obj;\n            ajax_defaults.data = ajax_data;\n          }\n\n          // Merge defaults with settings\n          var ajax_opts = $.extend(true, ajax_defaults, settings.ajax_options);\n          if (commands[cmd_name].exe) {\n            ajax_opts.url = commands[cmd_name].exe;\n          }\n\n          // Do it.\n          var jqxhr = $.ajax(ajax_opts);\n          jqxhr.done(function(data) {\n            cmd_obj = cmd_response(data);\n          });\n\n          jqxhr.fail(function(jqXHR, textStatus, errorThrown) {\n            cmd_opts.out = settings.i18n.error_ajax;\n          });\n\n          jqxhr.always(function(dataOrjqXHR, textStatus, jqXHRorErrorThrown) {\n            return cmd_update();\n          });\n        } else {\n          cmd_opts.out = settings.i18n.error_bad_method;\n          return cmd_update();\n        }\n      };\n\n      var cmd_response = function(cmd_obj) {\n        if (typeof cmd_obj === \"object\") {\n          // add cmd_obj to cmd_opts\n          for (var res in cmd_obj) {\n            if (responses.hasOwnProperty(res)) {\n              $.extend(true, cmd_opts, responses[res](cmd_obj));\n            }\n          }\n        }\n        return cmd_obj;\n      };\n\n      var cmd_callback = function() {\n        if (cmd_obj) {\n          // run callback if any\n          if (callbacks.hasOwnProperty(cmd_name)) {\n            cmd_response(callbacks[cmd_name](cmd_obj));\n          }\n\n          // Run this after every command\n          if (typeof settings.after_cmd == \"function\") {\n            cmd_response(settings.after_cmd(cmd_obj));\n          }\n        }\n      };\n\n      var cmd_update = function() {\n        // switches to original settings\n        tab_comp = settings.autocomplete;\n        save_to_history = settings.history_max;\n\n        var cmd_ps = !cmd_opts.ps ? settings.ps : cmd_opts.ps;\n        var cmd_out = !cmd_opts.out ? \"\" : cmd_opts.out;\n        var cmd_in = !cmd_opts.in ? \"\" : cmd_opts.in;\n        var cmd_last = !cmd_opts.last ? \"\" : cmd_opts.last;\n        var cmd_next = !cmd_opts.next ? null : cmd_opts.next;\n\n        if (!quiet) {\n          // output\n          content.append(\n            \"<div>\" +\n              '<div class=\"cmd_in\"><span class=\"cmd_ps\">' +\n              input.attr(\"data-ps\") +\n              \"</span>\" +\n              cmd_last +\n              \"</div>\" +\n              '<div class=\"cmd_out\">' +\n              cmd_out +\n              \"</div>\" +\n              \"</div>\"\n          );\n        } else {\n          content.append(\n            '<div><div class=\"cmd_out\">' + cmd_out + \"</div></div>\"\n          );\n        }\n\n        cmd_callback();\n\n        // input\n        input\n          .attr(\"data-caret\", settings.caret)\n          .attr(\"data-ps\", cmd_ps)\n          .text(cmd_in);\n        if (settings.caret_blink === 0) {\n          input.removeClass(\"blink\");\n        }\n        if (input.hasClass(\"show-caret\")) {\n          // hide \"real\" caret if showing\n          input.removeClass(\"show-caret\");\n        }\n\n        // Check if theme has changed.\n        if (!el.hasClass(settings.theme)) {\n          el.removeClass(el.attr(\"data-theme\"))\n            .addClass(settings.theme)\n            .attr(\"data-theme\", settings.theme);\n        }\n\n        // Reset options and save cmd_next\n        if (cmd_next) {\n          tab_comp = false;\n          save_to_history = 0;\n        }\n        quiet = null;\n\n        cmd_opts = {\n          ps: null,\n          in: null,\n          out: null,\n          last: null,\n          next: cmd_next,\n          data: null\n        };\n\n        cmd_obj = cmd_opts;\n\n        cmd_end();\n      };\n\n      var cmd_end = function() {\n        scroll_to_bottom();\n        caret_to_end();\n        loading.removeClass(\"working\");\n      };\n\n      /* Helper functions: */\n\n      // Add to history\n      var add_to_history = function(str) {\n        if (\n          typeof commands[cmd_name] !== \"undefined\" &&\n          str !== \"\" &&\n          save_to_history > 0\n        ) {\n          if (history.length > settings.history_entries) {\n            history.shift();\n          }\n          history.push($.trim(str));\n        }\n        // Reset history position\n        hcurrent = 0;\n      };\n\n      /**\n       * @method   : scroll_to_bottom\n       * @desc     : I give up. Done is better than perfect.\n       **/\n      var scroll_to_bottom = function() {\n        el.scrollTop(el.height() + 100000000000000000);\n      };\n\n      // Set caret to end of input\n      var caret_to_end = function() {\n        input.focus();\n        blinking = true;\n        if (\n          typeof window.getSelection != \"undefined\" &&\n          typeof document.createRange != \"undefined\"\n        ) {\n          var range = document.createRange();\n          range.selectNodeContents(input.get(0));\n          range.collapse(false);\n          var sel = window.getSelection();\n          sel.removeAllRanges();\n          sel.addRange(range);\n        } else if (typeof document.body.createTextRange != \"undefined\") {\n          var textRange = document.body.createTextRange();\n          textRange.moveToElementText(input.get(0));\n          textRange.collapse(false);\n          textRange.select();\n        }\n      };\n\n      var tab_completion = function(current_value) {\n        var cmds = [];\n\n        if (current_value.match(/^[^\\s]{0,}$/)) {\n          for (var i in commands) {\n            if (current_value == \"\") {\n              cmds.push(i);\n            } else if (i.indexOf(current_value) == 0) {\n              cmds.push(i);\n            }\n          }\n\n          if (cmds.length > 1) {\n            cmd_opts.out = \"<ul><li>\" + cmds.join(\"</li><li>\") + \"</li></ul>\";\n            cmd_opts.in = current_value;\n            cmd_update();\n          } else if (cmds.length == 1) {\n            input.text(cmds.pop() + \" \");\n          }\n        }\n      };\n\n      /**\n       * @method   : Anonymous\n       * @desc     : Add event handlers to the input field\n       * @event_handler\n       **/\n      input.keydown(function(e) {\n        var keycode = e.keyCode;\n        switch (keycode) {\n          // Command Completion Tab\n          case 9:\n            e.preventDefault();\n            if (tab_comp) {\n              tab_completion($.trim(input.text()));\n              cmd_end();\n            }\n            break;\n\n          // Left and right arrows\n          case 37:\n          case 39:\n            if (settings.caret_blink > 0) {\n              blinking = false;\n              // Add real caret\n              input.addClass(\"blink show-caret\");\n            }\n            break;\n\n          // History Up\n          case 38:\n            e.preventDefault();\n            if (save_to_history > 0) {\n              hcurrent =\n                hcurrent === null || hcurrent == 0\n                  ? history.length - 1\n                  : hcurrent - 1;\n              input.text(history[hcurrent]);\n              cmd_end();\n            }\n            break;\n\n          // History Down\n          case 40:\n            e.preventDefault();\n            if (save_to_history > 0) {\n              if (hcurrent === null || hcurrent == history.length - 1) {\n                input.html(\"\");\n                break;\n              }\n              hcurrent++;\n              input.text(history[hcurrent]);\n              cmd_end();\n            }\n            break;\n\n          // Backspace and delete\n          case 46:\n          case 8:\n            // Funny glitch with <br>s being inserted\n            if (\n              input.text().length === 1 ||\n              window.getSelection().toString() == input.text()\n            ) {\n              input.html(\"\");\n            }\n            break;\n\n          // On Enter\n          case 13:\n            e.preventDefault();\n            document.execCommand(\"insertHTML\", false, \"\");\n            cmd_start(); // important!\n            break;\n          // Escape key\n          case 27:\n            cmd_opts = {\n              ps: null,\n              in: null,\n              out: null,\n              last: null,\n              next: null,\n              data: null\n            };\n            input.text(\"\");\n            cmd_start();\n            break;\n        }\n      });\n    });\n\n    return public_methods;\n  };\n})(jQuery);\n\n\n//# sourceURL=webpack:///./web/lib/ptty.jquery.js?");

/***/ })

/******/ });