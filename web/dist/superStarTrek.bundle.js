!function(e){var t={};function i(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=5)}([function(e,t,i){"use strict";t.a=function(e){const t=["error","warn","log"],i="warn";function n(){window.onerror=function(t,i,n,a,s){switch(e){case"error":throw console.error(t,i,n,a,s),s;case"log":console.log(t,i,n,a,s);break;case"warn":default:console.error(t,i,n,a,s)}!function(e){switch(e){case e instanceof EvalError:console.error("stop using eval you fuck");break;case e instanceof InternalError:console.error("looks like some JS code you made fucked up");break;default:console.error("I couldn't even figure what error type that was so no snarky comment for you, sir!")}}(s)}}return{register:n,init:function(){t.includes(e)||(console.error("logLevel must be one of the following : ",t,". Setting logLevel to ",i),e=i),n()}}}},function(e,t,i){"use strict";new(i(0).a)("error").init(),t.a=function(){function e(e){let t={};return e.serializeArray().forEach(e=>{t[e.name]=e.value}),t}function t(){window.location.href=window.location.origin}function i(e){let t=$("#sign-up");t.find("input").each((function(e,t){$(t).val("")})),t.modal("show"),t.find("#submit").off("click").on("click",a)}function n(e){let t=$("#login");t.find("input").each((function(e,t){$(t).val("")})),t.modal("show"),t.find("#login-btn").off("click").on("click",s)}function a(i){let n=$("#sign-up").find("form"),a=e(n),s=$("#submit-btn");s.addClass("loading"),n.find(".error.message").transition("hide"),fetch("/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(e=>{if(!e.ok)throw e;t()}).catch((async function(e){console.error(e),n.find(".error.message").transition("show")})).then(()=>s.removeClass("loading"))}function s(i){let n=$("#login").find("form"),a=e(n),s=$("#login-btn");s.addClass("loading"),n.find(".error.message").transition("hide"),fetch("/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(e=>{if(!e.ok)throw e;t()}).catch(e=>{console.error(e),n.find(".error.message").transition("show")}).then(()=>s.removeClass("loading"))}function r(e){let i=$("#logout-btn");i.addClass("loading"),fetch("/logout",{method:"POST"}).then(e=>(console.log(e),e)).then(e=>{if(!e.ok)throw e;t()}).catch(e=>{console.error(e)}).then(()=>i.removeClass("loading"))}function o(e){e.stopPropagation(),this.value!==$("#sign-up input[name='password']").val()?$(this).closest(".field").addClass("error"):$(this).closest(".field").removeClass("error"),function(e){let t=$("#sign-up");e?t.find("#submit").removeClass("disabled"):t.find("#submit").addClass("disabled")}(function(){let e=$("#sign-up input[name='password']").val(),t=$("#sign-up input[name='confirm-password']").val();if(e!==t)return!1;return!0}())}function h(e){$(this).toggleClass("slash");let t=$(this).siblings("input");"password"===t.attr("type")?t.attr("type","text"):t.attr("type","password")}return{init:function(){!function(){let e=$("#sign-up");$("#sign-up-btn").on("click",i),$("#login-btn").on("click",n),$("#logout-btn").on("click",r),e.find("input[name='confirm-password']").on("input",o),$(".eye.slash").on("click",h),$(".message .close").off().on("click",(function(e){e.stopPropagation(),$(this).closest(".message").transition("fade")}))}()}}}},,,function(e,t){
/**
 * @file   : ptty.jquery.js
 * @ver    : 0.0.5 (beta)
 * @author : Pachanka <social@pachanka.org>
 * @url    : http://goto.pachanka.org/ptty/docs
 * @desc   : Ptty (Pseudo teletype). A terminal emulator plugin for jQuery.
 * @license: WTFPL Version 2. (http://www.wtfpl.net/)
 **/
!function(e){"use strict";e.fn.Ptty=function(t){var i={};return this.each((function(){var n=e(this),a={};window.commands=a;var s={},r={},o={},h={},l=[],d={ps:null,in:null,out:null,last:null,next:null,data:null},c=function(e){Object.getOwnPropertyNames(s);var t=!1,i=!1;return Object.entries(s).forEach(([n,a])=>{!t&&a.test(e)&&(i=n,t=!0)}),t?i:e},m=e.extend(!0,{ajax_options:{url:window.location.pathname,type:"POST"},param:"cmd",ps:"$",caret:"▮",caret_blink:800,native_css:!0,theme:"boring",native_cmds:!0,autocomplete:!0,history_max:800,autofocus:!0,before_cmd:!1,after_cmd:!1,i18n:{welcome:"Ptty (0.0.5 beta).<br> Type <b>help</b> to list the available commands.",error_not_found:"Command not found.",error_bad_method:"Invalid command method.",error_ajax:"Server error."}},t);i.get_terminal=function(e){return e?n.find(e):n},i.native_style=function(t,i){var n=t.attr("id");if(n=n?"#"+n:"."+t.attr("class").split(" ")[1],"boring"===i){var a=['.boring, .boring .prompt, .boring .content{ font-family: "Courier New", Courier, monospace; background-color: #111; color: #ddd; }',".boring .content{ padding: 15px 15px 0 15px; }",".boring .prompt{ padding: 0 15px 15px 15px; }",'.boring .loading span::after{content: "⚙"; color: #ddd; font-size: 10em; border-radius: 10em; opacity: 0.4;}',".boring .content ul{ margin: 0; }",".boring .prompt .input.show-caret{ color: #ddd; opacity: .85; }",".boring .prompt .input, .boring .prompt .input::before, .boring .prompt .input::after{ color: transparent; text-shadow:0 0 0 #ddd; }",".boring .content div .cmd_in .cmd_ps, .boring .prompt .input::before{ padding-right: 10px; }",".boring .content ul li{ list-style-type: none; }",".boring div.prompt div.input::after{ font-size: 2em; }",".boring div.prompt div.input, .boring div.content div div.cmd_in, .boring div.prompt div.input::before{ line-height: 2em; }"];a=a.join("\n"),e('<style id="ptty-boring-theme">'+a+"</style>").appendTo("head")}var s=[n+"div.content div p{ margin: 0; }","div.content div{ clear: both; white-space:pre-wrap; word-wrap:break-word; }","div.content div ul{ padding: 0; white-space: normal }","div.content div ul li{ list-style: none; }","div.content div ul.sq-li li{ display: inline-block; text-align: center; padding: 10px; min-width: 5%; }","div.prompt div.input{ width: 100%; white-space:pre-wrap; word-wrap:break-word; cursor: default; outline: none;}","div.prompt div.input::before{ vertical-align: middle; content: attr(data-ps); }","div.prompt div.input::after{ visibility : visible; vertical-align: middle; content: attr(data-caret); margin-left:-0.15em;}","div.prompt div.input.blink::after{ visibility : hidden; }","div.prompt .hide{ position:absolute; top: -9999em; }","div.loading{ display: none; }","div.loading.working{ display: block; display:flex; justify-content: center; align-items: center;position: fixed;  width: inherit; height: inherit; }","div.loading span{ -webkit-animation: spin 4s linear infinite; -moz-animation: spin 4s linear infinite; -ms-animation: spin 4s linear infinite; -o-animation: spin 4s linear infinite; animation: spin 4s linear infinite; }"];s=s.join("\n "+n+" "),e('<style id="ptty-styles">'+(s+="@-moz-keyframes spin { 100% { -moz-transform: rotate(360deg); } }@-webkit-keyframes spin { 100% { -webkit-transform: rotate(360deg); } }@-ms-keyframes spin { 100% { -ms-transform: rotate(360deg); } }@-o-keyframes spin { 100% { -o-transform: rotate(360deg); } }@keyframes spin { 100% { transform: rotate(360deg); } }")+"</style>").appendTo("head")},i.native_commands=function(){i.register("command",{name:"clear",method:function(e){return e.last="",e.out="",e},options:[],help:"Cleans the screen leaving a new command prompt ready."}),i.register("callback",{name:"clear",method:function(e){return n.find(".content").html(""),e}}),i.register("command",{name:"history",method:function(e){if(e.hasOwnProperty("clear"))l=[],e.out="History cleared.";else if(l.length>0){e.out="<ul>";for(var t=0;t<l.length;t+=1)e.out+="<li>"+l[t]+"</li>";e.out+="</ul>"}return e},options:["clear"],help:"Shows list of typed in commands. Type <i>history clear</i> to clear your history."}),i.register("command",{name:"help",method:function(e){var t=Object.keys(a);if("string"==typeof e[1]&&e[1].length>0)if(e.hasOwnProperty("-a")||e.hasOwnProperty("--all")){e.out="<b>Available commands:</b></br></br><ul>";for(var i=0;i<t.length;i+=1)e.out+="<li><p><b>"+i+"</b> - ",e.out+=a[t[i]].help+"</p></br></li>";e.out+="</ul>\n"}else void 0!==a[e[1]]?(e.out="<b>"+e[1]+"</b> - ",""!==a[e[1]].help?e.out+=a[e[1]].help+"\n":e.out+="No help entry available.\n"):e.out='help: The "'+e[1]+'" option does not exist.\n';else{e.out='Use "help [comand name]" to display specific info about a command.</br>\n',e.out+='Available commands are:</br><ul class="sq-li">';for(i=0;i<t.length;i+=1)e.out+="<li>"+t[i]+"</li>";e.out+="</ul>\n"}return e},options:[1,"-a","--all"],help:"Displays a list of useful information. Usage: <i>help command-name</i> to show <i>command-name</i>'s help.<i>help -a</i> or <i>help --all</i> to display all help."})},i.native_responses=function(e){for(var t in e)e.hasOwnProperty(t)&&i.register("response",{name:t,method:function(i){return e[t]=i[t],i}})},i.run_command=function(e,t=!1){x=t,k(e)},i.echo=function(e,t){e&&n.find(".content").append('<div><div class="cmd_out">'+e+"</div></div>"),t||_()},i.prompt=function(e,t){this.register("command",{name:"ask",method:e=>{let i=this.get_input();this.unregister("command","ask"),setTimeout(()=>t(i),10)},regex:new RegExp("[sS]*","i")})},i.type=function(t,i=60){this.echo("\n");this.get_terminal(".prompt");var n,a=e("<span></span>").appendTo(".content"),s=this,r=0;!function e(){n=t.slice(0,++r),a.html(n),s.echo();n.slice(-1);setTimeout(e,i)}()},i.format_grid=function(e,t=!0,i=null){var n=e.reduce((e,t)=>{var i=t.reduce((e,t)=>e>t.length?e:t.length,0);return e>i?e:i},0);return null===i&&(i=n),e.map(e=>e.map(e=>t?e.padStart(i):e.padEnd(i)))},i.print_grid=function(e,t=" ",i="\n",n=!1){for(var a=[],s=0;s<e.length;s++){var r=e[s].join(t);a.push(r+"\n")}var o=a.join(i);return n&&this.echo(o),o},i.change_settings=function(t){e.extend(!0,m,t)},i.get_settings=function(){return m},i.unregister=function(e,t){var i=!1;return"object"==typeof t&&t.hasOwnProperty("name")&&(t=t.name),"callbefore"==e&&h.hasOwnProperty(t)?(i=!0,delete h[t]):"command"==e&&a.hasOwnProperty(t)?(i=!0,delete a[t],delete s[t]):"response"==e&&r.hasOwnProperty(t)?(i=!0,delete r[t]):"callback"==e&&o.hasOwnProperty(t)&&(i=!0,delete o[t]),i},i.get_input=function(){return f.text()},i.register=function(e,t){var i=!1;if(t){var n=!!t.hasOwnProperty("name")&&t.name,l=!!t.hasOwnProperty("method")&&t.method,d=t.hasOwnProperty("options")?t.options:[],c=t.hasOwnProperty("help")?t.help:"",m=t.hasOwnProperty("regex")?t.regex:new RegExp(`^${n}$`);s[n]=m,"callbefore"==e&&"function"==typeof l?(h[n]=l,i=!0):"command"!=e||"string"!=typeof l&&"function"!=typeof l?"response"==e&&"function"==typeof l?(r[n]=l,i=!0):"callback"==e&&"function"==typeof l&&(o[n]=l,i=!0):(a[n]={help:c,options:d,exe:l},i=!0)}return i},i.set_command_option=function(t){return e.extend(!0,d,t)},i.get_command_option=function(e){var t;if("string"==typeof e)t=!!d.hasOwnProperty(e)&&d[e];else if("object"==typeof e){t={};for(var i=e.length-1;i>=0;i--)void 0!==d[e[i]]&&(t[e[i]]=d[e[i]])}else t=d;return t},i.tokenize=function(t,i){var n={},a=c(t);if(void 0===a[0]||""===a[0])n=!1;else if(void 0!==i){var s=!1,r=!1,o=!1,h=!1,l=!1,d=!1,m=!1,u=i.filter((function(e){if("number"==typeof e&&e>0&&void 0!==a[e])return n[e]=a[e],e}));i=e(i).not(u).get();for(var p=0;p<a.length;p++)l=a[p].charAt(0),d=a[p].slice(-1),m=a[p].charAt(a[p].length-2),e.inArray(a[p],i)>=0?(s=a[p],r=!1):'"'==l&&!1===h&&'"'!==d?(o='"',h=!0,r=a[p]):"'"==l&&!1===h&&"'"!==d?(o="'",h=!0,r=a[p]):d==o&&!0===h&&m+d!=="\\"+o?(h=!1,r+=" "+a[p],r=e.trim(r.substring(1).slice(0,-1).replace(/\\(.)/gm,"$1"))):!0===h?r+=" "+a[p]:r="'"==l&&"'"==d||'"'==l&&'"'==d?e.trim(a[p].substring(1).slice(0,-1)):a[p],s&&!1===h&&(n[s]=r)}else n[a[0]]=a;return n},n.html("");var u=null,p=null,g={};n.append('<div class="loading"><span></span></div><div class="content"><div>'+m.i18n.welcome+'</div></div><div class="prompt"><div class="input" contenteditable spellcheck="false" data-caret="'+m.caret+'" data-ps="'+m.ps+'"></div></div>');var f=n.find(".prompt .input"),y=n.find(".content"),w=n.find(".loading");n.attr("data-theme",m.theme).addClass(m.theme),m.native_css&&i.native_style(n,m.theme);var b=m.autofocus,v=m.autocomplete,S=m.history_max;m.autofocus&&f.focus(),n.bind("focus click",(function(){var e="";void 0!==window.getSelection?e=window.getSelection().toString():void 0!==document.selection&&"Text"==document.selection.type&&(e=document.selection.createRange().text),""==e&&L()})),f.click((function(){L()})),f.bind("blur",(function(){b=!1})),m.caret_blink>0&&setInterval((function(){m.caret_blink>0&&!0===b&&f.toggleClass("blink")}),m.caret_blink),m.native_cmds&&i.native_commands(),i.native_responses(d);var x=null,k=function(t){var n;if(w.addClass("working"),n=void 0!==t?t:f.text(),v=m.autocomplete,S=m.history_max,d.last=n,"string"==typeof d.next&&(n=d.next.replace(/%cmd%/i,n),d.next=null,S=0),!n||""==n)return C();if(p=c(n),void 0===a[p])return x||(d.out=p+" : "+m.i18n.error_not_found),C();if(g=i.tokenize(n,a[p].options),"function"==typeof m.before_cmd&&!(g=O(m.before_cmd(g))))return C();if("function"==typeof h[p]&&!(g=O(h[p](g))))return C();if(x||T(d.last),"function"==typeof a[p].exe)return O(a[p].exe(g)),C();if("string"!=typeof a[p].exe)return d.out=m.i18n.error_bad_method,C();var s={};if(!m.ajax_options.data){var r={};r[m.param]=null!==d.in?d.in:p,r[m.param+"_data"]=null!==d.data?d.data:g,s.data=r}var o=e.extend(!0,s,m.ajax_options);a[p].exe&&(o.url=a[p].exe);var l=e.ajax(o);l.done((function(e){g=O(e)})),l.fail((function(e,t,i){d.out=m.i18n.error_ajax})),l.always((function(e,t,i){return C()}))},O=function(t){if("object"==typeof t)for(var i in t)r.hasOwnProperty(i)&&e.extend(!0,d,r[i](t));return t},C=function(){v=m.autocomplete,S=m.history_max;var e=d.ps?d.ps:m.ps,t=d.out?d.out:"",i=d.in?d.in:"",a=d.last?d.last:"",s=d.next?d.next:null;x?y.append('<div><div class="cmd_out">'+t+"</div></div>"):y.append('<div><div class="cmd_in"><span class="cmd_ps">'+f.attr("data-ps")+"</span>"+a+'</div><div class="cmd_out">'+t+"</div></div>"),g&&(o.hasOwnProperty(p)&&O(o[p](g)),"function"==typeof m.after_cmd&&O(m.after_cmd(g))),f.attr("data-caret",m.caret).attr("data-ps",e).text(i),0===m.caret_blink&&f.removeClass("blink"),f.hasClass("show-caret")&&f.removeClass("show-caret"),n.hasClass(m.theme)||n.removeClass(n.attr("data-theme")).addClass(m.theme).attr("data-theme",m.theme),s&&(v=!1,S=0),x=null,g=d={ps:null,in:null,out:null,last:null,next:s,data:null},E()},E=function(){_(),L(),w.removeClass("working")},T=function(t){void 0!==a[p]&&""!==t&&S>0&&(l.length>m.history_entries&&l.shift(),l.push(e.trim(t))),u=0},_=function(){n.scrollTop(n.height()+1e17)},L=function(){if(f.focus(),b=!0,void 0!==window.getSelection&&void 0!==document.createRange){var e=document.createRange();e.selectNodeContents(f.get(0)),e.collapse(!1);var t=window.getSelection();t.removeAllRanges(),t.addRange(e)}else if(void 0!==document.body.createTextRange){var i=document.body.createTextRange();i.moveToElementText(f.get(0)),i.collapse(!1),i.select()}};f.keydown((function(t){switch(t.keyCode){case 9:t.preventDefault(),v&&(!function(e){var t=[];if(e.match(/^[^\s]{0,}$/)){for(var i in a)""==e?t.push(i):0==i.indexOf(e)&&t.push(i);t.length>1?(d.out="<ul><li>"+t.join("</li><li>")+"</li></ul>",d.in=e,C()):1==t.length&&f.text(t.pop()+" ")}}(e.trim(f.text())),E());break;case 37:case 39:m.caret_blink>0&&(b=!1,f.addClass("blink show-caret"));break;case 38:t.preventDefault(),S>0&&(u=null===u||0==u?l.length-1:u-1,f.text(l[u]),E());break;case 40:if(t.preventDefault(),S>0){if(null===u||u==l.length-1){f.html("");break}u++,f.text(l[u]),E()}break;case 46:case 8:1!==f.text().length&&window.getSelection().toString()!=f.text()||f.html("");break;case 13:t.preventDefault(),document.execCommand("insertHTML",!1,""),k();break;case 27:d={ps:null,in:null,out:null,last:null,next:null,data:null},f.text(""),k()}}))})),i}}(jQuery)},function(e,t,i){"use strict";i.r(t);var n=i(0),a=i(1);i(4);const s=1;class r{constructor(){this.apiUrl="/games/superStarTrek"}createGameLog(e,t,i=s){return $.ajax({url:"/gameLog",data:JSON.stringify({score:e,victory:t,gameId:i}),contentType:"application/json",method:"POST"})}getHelp(e){return $.ajax({url:`${this.apiUrl}/help`,data:{command:e}})}}class o{constructor(e,t){if(!e.propName||"function"==typeof e.propName)throw new Error("To inherit component you need to define a static propName");this.parent=t,this.parent[e.propName]=this,this.parent.hasComponent=o.hasComponent.bind(this.parent)}static hasComponent(e){return this[e.propName]}}class h{constructor(e,t){this._distance=e,this._angle=t,this._deltaX=Math.cos(this._angle)*this._distance,this._deltaY=Math.sin(this._angle)*this._distance}scale(e){return new h(e,this._angle)}get distance(){return this._distance}get angle(){return this._angle}get angleDegrees(){return h.toDegrees(this.angle)}get deltaX(){return this._deltaX}get deltaY(){return this._deltaY}static calcAngleDegrees(e,t){return 180*Math.atan2(t,e)/Math.PI}static toDegrees(e){return 180*e/Math.PI}static make(e,t){let i=Math.hypot(e,t),n=Math.atan2(t,e);return new h(i,n)}static make1(e,t,i,n,a){let s=l.calculateDistanceX(e,i,a),r=l.calculateDistanceY(t,n,a);return h.make(s,r)}}class l{constructor(e,t=null,i=null){this._x=t,this._y=i,this._galaxy=e,this._dirty=!0,this._userSectorX=null,this._userSectorY=null,this._userQuadrantX=null,this._userQuadrantY=null,this._userSectorXFloat=null,this._userSectorYFloat=null}static calculateDistanceX(e,t,i){return e*i.quadrantWidth+t}static calculateDistanceY(e,t,i){return e*i.quadrantLength+t}static convert(e,t,i,n,a){e--,t--,i-=.5,n-=.5;let s=l.calculateDistanceX(e,i,a),r=l.calculateDistanceY(t,n,a);return new l(a,s,r)}static convert1(e,t,i){return t-=.5,i-=.5,e.topLeft.add(t,i)}add(e,t){return new l(this._galaxy,this.x+e,this.y+t)}addVector(e){return new l(this._galaxy,this.x+e.deltaX,this.y+e.deltaY)}distanceTo(e){if(!(e instanceof l))throw new Error("not coordinates");let t=Math.abs(this.x-e.x),i=Math.abs(this.y-e.y);return Math.hypot(t,i)}angleTo(e){if(!(e instanceof l))throw new Error("not coordinates");return Math.atan2(e.y-this.y,e.x-this.x)}getVectorTo(e){if(!(e instanceof l))throw new Error("not coordinates");let t=e.x-this.x,i=e.y-this.y;return h.make(t,i)}get x(){return this._x}set x(e){this._dirty=!0,this._x=e}get y(){return this._y}set y(e){this._dirty=!0,this._y=e}get userSectorXFloat(){return this._dirty&&this.update(),this._userSectorXFloat}get userSectorYFloat(){return this._dirty&&this.update(),this._userSectorYFloat}get userSectorX(){return this._dirty&&this.update(),this._userSectorX}get userSectorY(){return this._dirty&&this.update(),this._userSectorY}get userQuadrantX(){return this._dirty&&this.update(),this._userQuadrantX}get userQuadrantY(){return this._dirty&&this.update(),this._userQuadrantY}update(){let e=Math.floor(this.x/this._galaxy.quadrantWidth),t=Math.floor(this.y/this._galaxy.quadrantLength),i=this.x%this._galaxy.quadrantWidth,n=this.y%this._galaxy.quadrantLength;this._userQuadrantX=e+1,this._userQuadrantY=t+1,this._userSectorX=Math.round(i+.5),this._userSectorY=Math.round(n+.5),this._userSectorXFloat=i+.5,this._userSectorYFloat=n+.5,this._dirty=!1}copy(e){if(!(e instanceof l))throw new Error("not coordinates");this.x=e.x,this.y=e.y}clone(){return new l(this._galaxy,this.x,this.y)}static get propName(){return"coordinates"}}class d extends o{constructor(e){super(d,e),this.gameObjects=[]}static get propName(){return"container"}isEmpty(){return 0===this.gameObjects.length}getCountOfGameObjects(e){return this.gameObjects.reduce((t,i)=>(i instanceof e&&t++,t),0)}getGameObjectsOfType(e){return this.gameObjects.filter(t=>t instanceof e)}getAllGameObjects(){return this.gameObjects.slice()}addGameObject(e){this.gameObjects.push(e)}removeGameObject(e){this.gameObjects=this.gameObjects.filter(t=>t!==e)}killAll(){this.gameObjects.forEach(e=>{e.die&&e.die(),e.gameObject.removeSelf()})}}class c extends o{constructor(e,t=!1,i=null){super(c,e),this.galaxy=i,this.quadrant=null,this.sector=null,this.coordinates=new l,this.takesWholeSector=t}static get propName(){return"gameObject"}isInGame(){return!!(this.galaxy&&this.quadrant&&this.sector)}get name(){return this.parent.name?this.parent.name:this.parent.constructor.name}removeSelf(){this.galaxy&&(this.galaxy.container.removeGameObject(this.parent),this.galaxy=null),this.quadrant&&(this.quadrant.container.removeGameObject(this.parent),this.quadrant=null),this.sector&&(this.sector.container.removeGameObject(this.parent),this.sector=null),this.coordinates=null}updateCoordinates(){let e;try{e=this.galaxy.getSector(this.coordinates)}catch(e){return console.error(e),void this.removeSelf()}if(e!==this.sector){if(!this.canMoveTo(e))throw this.coordinates.copy(this.sector.center),new Error("Cant place object in non empty sector");this.quadrant.container.removeGameObject(this.parent),this.sector.container.removeGameObject(this.parent),this.quadrant=e.quadrant,this.sector=e}}canMoveTo(e){return!(this.takesWholeSector&&!e.container.isEmpty())}placeIn(e,t,i){if(!this.canMoveTo(i))throw new Error("Cant place object in non empty sector");this.galaxy=e,this.quadrant=t,this.sector=i,this.galaxy.container.addGameObject(this.parent),this.quadrant.container.addGameObject(this.parent),this.sector.container.addGameObject(this.parent),this.coordinates=i.center.clone()}printLocation(){return`${this.printQuadrantLocation()}; ${this.printSectorLocation()}`}printSectorLocation(e=!0){return`${e?"Sector ":""}${this.coordinates.userSectorX} - ${this.coordinates.userSectorY}`}printQuadrantLocation(){return`Quadrant ${this.coordinates.userQuadrantX} - ${this.coordinates.userQuadrantY}`}getLocation(){return{qX:this.coordinates.userQuadrantX,qY:this.coordinates.userQuadrantY,sX:this.coordinates.userSectorX,sY:this.coordinates.userSectorY,sXFl:this.coordinates.userSectorXFloat,sYFl:this.coordinates.userSectorYFloat}}}class m{constructor(e,t,i,n){this.container=new d(this),this.quadrant=e,this.galaxy=e.galaxy,this._x=i,this._y=n,this.width=1,this.length=1,this.topLeft=t,this.topRight=t.add(this.width),this.bottomLeft=t.add(0,this.length),this.bottomRight=t.add(this.width,this.length),this.center=t.add(this.width/2,this.length/2)}getAdjacentSectors(e=!1){return this.quadrant.getSectorsAdjacentTo(this,e)}isFull(){return this.container.getAllGameObjects().some(e=>e.gameObject.takesWholeSector)}}class u{constructor(e,t,i,n,a,s){this.container=new d(this),this.galaxy=n,this.width=e,this.length=t,this._x=a,this._y=s,this.topLeft=i,this.topRight=i.add(this.width),this.bottomLeft=i.add(0,this.length),this.bottomRight=i.add(this.width,this.length),this.center=i.add(this.width/2,this.length/2),this.sectors=[],this.hasSupernova=!1;for(let e=0;e<this.length;e++){let t=[];for(let i=0;i<this.width;i++){let n=this.topLeft.add(i,e);t.push(new m(this,n,i,e))}this.sectors.push(t)}}getSectorsAdjacentTo(e,t=!1,i=!1){if(!e instanceof m)return[];let n=e._x,a=e._y,s=[];for(let e=a-1;e<=a+1;e++)for(let r=n-1;r<=n+1;r++){let o=n+a,h=r+e,l=Math.abs(h-o);!i&&l>1||this._areValidCoordinates(r,e)&&(t||l>0)&&s.push(this._getSector(r,e))}return s}getNearestEmptySectorAdjacentTo(e){if(!e instanceof m)return;let t=e._x,i=e._y,n=[];for(let e=0;e<this.length;e++){let e=new Array(this.width);e.fill(!1,0),n.push(e)}n[i][t]=!0;let a=1,s=1;for(;a<this.width*this.length;){for(let e=i-s;e<=i+s;e++)if(n[e])for(let i=t-s;i<=t+s;i++)if(!n[e][i]&&this._areValidCoordinates(i,e)){let t=this._getSector(i,e);if(!t.isFull())return t;n[e][i]=!0,a++}s++}return null}_areValidCoordinates(e,t){return!(t<0||t>this.length-1)&&!(e<0||e>this.width-1)}getRandomSector(){let e=Math.round(Math.random()*(this.width-1)),t=Math.round(Math.random()*(this.length-1));return this._getSector(e,t)}supernova(){this.container.killAll(),this.hasSupernova=!0}isFull(){return!!this.hasSupernova||this.sectors.every(e=>e.every(e=>!e.container.isEmpty()))}getRandomEmptySector(){let e=this.sectors.map(e=>e.filter(e=>e.container.isEmpty())).flat();if(0!==e.length)return e[Math.round(Math.random()*(e.length-1))]}_getSector(e,t){return this.sectors[t][e]}}class p{constructor(e,t,i=10,n=10,a=!0){this.container=new d(this),this.width=e,this.length=t,this.quadrantWidth=i,this.quadrantLength=n,this.quadrants=[];for(let i=0;i<t;i++)this.quadrants.push(new Array(e));if(a)for(let e=0;e<this.quadrants.length;e++){let t=this.quadrants[e];for(let i=0;i<t.length;i++){let n=new l(this,i*this.quadrantWidth,e*this.quadrantLength);t[i]=new u(this.quadrantWidth,this.quadrantLength,n,this,i,e)}}}getRandomQuadrant(){let e=Math.round(Math.random()*(this.width-1)),t=Math.round(Math.random()*(this.length-1));return this._getQuadrant(e,t)}getRow(e){return this.quadrants[e]}getAllQuadrants(){return this.quadrants.flat()}getSector(e){if(!this.areValidCoordinates(e))throw new Error("invalid coordinates");let{qX:t,qY:i,sX:n,sY:a}=this._convertCoordinates(e);return this._getSector(t,i,n,a)}getQuadrant(e){let{qX:t,qY:i}=this._convertCoordinates(e);if(!this._areValidCoordinates(t,i))throw new Error("invalid coordinates");return this._getQuadrant(t,i)}_convertCoordinates(e){return{qX:Math.floor(e.x/this.quadrantWidth),qY:Math.floor(e.y/this.quadrantLength),sX:Math.floor(e.x%this.quadrantWidth),sY:Math.floor(e.y%this.quadrantLength)}}_getSector(e,t,i,n){let a=this._getQuadrant(e,t);if(!a._areValidCoordinates(i,n))throw new Error("invalid coordinates");return a._getSector(i,n)}_getQuadrant(e,t){return this.quadrants[t][e]}_areValidCoordinates(e,t){return t>=0&&t<this.length&&e>=0&&e<this.width}areValidCoordinates(e){let{qX:t,qY:i,sX:n,sY:a}=this._convertCoordinates(e);return!!this._areValidCoordinates(t,i)&&this._getQuadrant(t,i)._areValidCoordinates(n,a)}static calculateDistance(e,t){return e.topLeft.distanceTo(t.topLeft)}static convertUserCoordinates(e,t){return{x:e-.5,y:t-.5}}getQuadrantsAdjacencyMatrix(e){if(!e instanceof u)return[];let t=e._x,i=e._y,n=[];for(let e=i-1;e<=i+1;e++){let i=[];for(let n=t-1;n<=t+1;n++)this._areValidCoordinates(n,e)?i.push(this.quadrants[e][n]):i.push(null);n.push(i)}return n}getQuadrantsAdjacentTo(e,t=!1){if(!e instanceof u)return[];let i=e._x,n=e._y,a=[];for(let e=n-1;e<=n+1;e++)for(let s=i-1;s<=i+1;s++)this._areValidCoordinates(s,e)&&(t||s!==i&&e!==n)&&a.push(this.quadrants[e][s]);return a}}window.Galaxy=p;class g{constructor(e=!0){this.$el=null,this.$terminal=null,this._out="",this.silent=!1,this._command=null,this._input=null,this._argumentStr=null,this._arguments=null,this.questionMode=!1,this.question="",this.commands=[],window.terminal=this,this.paging=!0,this.takesInput=e}hideInput(){this.$el.find(".prompt").hide()}init(e,t){this.$el=e,this.$terminal=this.$el.Ptty({ps:"",autocomplete:!0,theme:t,i18n:{welcome:"-SUPER- STAR TREK\n\n",error_not_found:"Command not recognized, try 'help'.",error_bad_methdo:"Command malformed. Try 'help'."}}),this.takesInput||this.hideInput()}setPrompt(e){this.$terminal.change_settings({ps:e}),this.$terminal.run_command(),this.$el.find(".content > div").last().remove()}echo(e){this.silent||(this._out+=e)}newLine(){this.silent||(this._out+="\n")}printLine(e=""){this.silent||(this._out+=e+"\n")}skipLine(e=1){if(!this.silent)for(let t=0;t<e;t++)this._out+="\n"}getOutput(){return this._out}clear(){this.silent||(this._out="")}clearAll(){this.$el.find(".content").empty(),this._out=""}print(){this.silent||this._out&&(this.$terminal.echo(this._out),this._out="")}registerCommand(e){this.commands.find(t=>e.name===t.name)||(this.commands.push(e),this.$terminal.register("command",{name:e.name,method:t=>this.runCommand(e.name,t),regex:e.regex}))}unregisterCommand(e){let t=this.commands.findIndex(t=>e.name===t.name);-1!==t&&(this.commands.splice(t,1),this.$terminal.unregister("command",e.name))}parseCommand(e,t){let i=this.$terminal.get_input(),n=i.replace(t.regex,"");this._command=t,this._input=i,this._argumentStr=n,this._arguments=n.split(/\s/).filter(e=>e.length>0)}getArguments(){return this._arguments}hasOption(e){return e.test(this._argumentStr)}async runCommand(e,t){let i=this.commands.find(t=>t.name===e);if(!i)return t.out="Not recognized.",t;this.parseCommand(t,i);try{this.resolveUserCommand({command:i})}catch(e){console.error(e),this.printLine("OOOF, that went really wrong. Try that again."),this.print()}}runUserCommand(){return new Promise((e,t)=>{this.resolveUserCommand=e})}async ask(e){this.print();let t=this.$terminal.get_settings().ps;return this.setPrompt(e),new Promise((e,i)=>{this.answer=i=>{let n=this.$terminal.get_input();return this.$terminal.unregister("command","answer"),this.$terminal.change_settings({ps:t}),this.$terminal.set_command_option({next:null}),e(n),i},this.$terminal.register("command",{name:"answer",method:this.answer.bind(this),regex:/answer/}),this.$terminal.set_command_option({next:"answer"})})}formatGrid(...e){return g.formatGrid(...e)}static formatGrid(e,t=!0,i=null,n=!1){for(let t=0;t<e.length;t++)for(let i=0;i<e[t].length;i++){let n=e[t][i];"string"!=typeof n&&(e[t][i]=null==n?"":""+e[t][i])}if(n){let i=[];return e.forEach(e=>{e.forEach((e,t)=>{if(!i[t])return void(i[t]=e.length||0);let n=i[t];e.length>n&&(i[t]=e.length||0)})}),e.map(e=>e.map((e,n)=>t?e.padStart(i[n]):e.padEnd(i[n])))}return null===i&&(i=e.reduce((e,t)=>{let i=t.reduce((e,t)=>e>t.length?e:t.length,0);return e>i?e:i},0)),e.map(e=>e.map(e=>t?e.padStart(i):e.padEnd(i)))}joinGrid(...e){return g.joinGrid(...e)}static joinGrid(e,t=" ",i="\n"){let n=[];for(let i=0;i<e.length;i++){let a=e[i].join(t);n.push(a)}return n.join(i)}}const f=new g,y=new g(!1),w=new g(!1);class b extends o{constructor(e,t,i){super(b,e),this.parent=e,this.parent.ai=this,this.galaxy=t,this.player=i}static get propName(){return"ai"}takeTurn(){console.log(`${this.parent.name} taking a turn.`),this.firePhasers()}firePhasers(){let e=this.parent.powerGrid.capacity*(.4*Math.random()+.2);0!==(e=Math.min(e,this.parent.powerGrid.energy))?this.parent.phasers.isOk()&&(this.parent.phasers.fire(e,this.player),this.parent.powerGrid.useEnergy(e),this.parent.phasers.coolDown()):console.error("OUT OF ENERGY")}}var v=function(e){return e=e||Object.create(null),{on:function(t,i){(e[t]||(e[t]=[])).push(i)},off:function(t,i){e[t]&&e[t].splice(e[t].indexOf(i)>>>0,1)},emit:function(t,i){(e[t]||[]).slice().map((function(e){e(i)})),(e["*"]||[]).slice().map((function(e){e(t,i)}))}}};class S{constructor(){this.emitter=new v,this._initialStarDate=null,this._starDate=null}init(e){this._initialStarDate=e,this._starDate=e}get starDate(){return this._starDate}getElapsedTime(){return this._starDate-this._initialStarDate}elapseTime(e){this._starDate+=e,this.emitter.emit("timeElapse",e)}unregister(e){this.emitter.off("timeElapse",e)}register(e){this.emitter.on("timeElapse",e)}}var x=new S;class k{constructor(e,t){this.name=e,this.propName=t,Object.freeze(this)}}class O extends k{constructor(e,t){super(e,t)}}const C=new k("Short Range Sensors","shortRangeSensors"),E=new k("Long Range Sensors","longRangeSensors"),T=new k("Phasers","phasers"),_=new k("Power Circuits","powerGrid"),L=new O("Warp Engines","warpEngines"),j=new O("Impulse Engines","impulseEngines"),R=new k("Life Support","lifeSupport"),M=new k("Shields","shields"),D=new k("Photon Torpedo Launcher","photons"),A=new k("Subspace Radio","subspaceRadio"),I=new k("Probe Launcher","probeLauncher");class N extends o{constructor(e,t,i=.65){if(super(t,e),this.parent=e,this.name=t.name,this.type=t,this._chanceOfBeingDamaged=i,!this.parent.deviceContainer)throw new Error("must be device container");this.parent.deviceContainer.addDevices(this),this._damage=0}static isType(e,t){return e instanceof N&&e.isType(t)}isType(e){return!(!e instanceof k)&&this.type.name===e.name}get damage(){return this._damage}checkDamage(){if(this.isDamaged())throw new Error(`${this.name} is damaged!`)}isOk(){return 0===this._damage}isDamaged(){return this._damage>0}takeDamage(e){0===this._damage&&f.printLine(`***${this.parent.name}'s ${this.name} has been damaged.`),this._damage+=e}repair(e){0!==this._damage&&(this._damage-=e,0===this._damage&&f.printLine(`${this.parent.name}'s ${this.name} have been repaired.`),this._damage=Math.max(this._damage,0))}randomlyDamage(){this.takeDamage(5*Math.random())}hitDoesDamage(){return Math.random()<this._chanceOfBeingDamaged}timeToRepairInFlight(){return this._damage/Y}timeToRepairAtDock(){return this._damage/K}}const P="even",q="least",G="most",F="priority",H=[P,q,G,F],K=1,Y=.3;class B{constructor(e){this.parent=e,this.parent.deviceContainer=this,this.devices=[],this.repairSpeed=Y,this.repairMode=P,this.onTimeElapse=this.onTimeElapse.bind(this),x.register(this.onTimeElapse),this.repairPriorities=new Map,this.prioritiesInUse=new Set}setRepairSpeed(e){this.repairSpeed=e}setRepairMode(e){if(!H.some(t=>e===t))throw new Error(`${e} is not a valid repair mode.`);this.repairMode=e}_repairDevicesEvenly(e,t){let i,n=t/e.length,a=t,s=e.slice();do{if(0===(i=s.filter(e=>e.damage<n&&e.damage>0)).length)break;s=s.filter(e=>e.damage>=n&&e.damage>0),i.forEach(e=>{let t=Math.min(e.damage,n,a);t<=0||(e.repair(t),a-=t)}),n=a/s.length}while(i.length>0&&a>0);a<=0||s.forEach(e=>{let t=Math.min(e.damage,n,a);t<=0||(e.repair(t),a-=t)})}onTimeElapse(e){let t=e*this.repairSpeed,i=this.devices.filter(e=>e.isDamaged());switch(this.repairMode){case P:this._repairDevicesEvenly(i,t);break;case q:i.sort((e,t)=>e.damage-t.damage);for(let e=0;e<i.length&&t>0;e++){let n=i[e],a=Math.min(t,n.damage);n.repair(a),t-=a}break;case G:i.sort((e,t)=>t.damage-e.damage);for(let e=0;e<i.length&&t>0;e++){let n=i[e],a=Math.min(t,n.damage);n.repair(a),t-=a}break;case F:let e=[...this.prioritiesInUse.keys()];e.sort();for(let i=0;i<e.length&&t>0;i++){let n=e[i],a=this.repairPriorities.get(n)||[],s=a.reduce((e,t)=>t.damage+e,0);this._repairDevicesEvenly(a,t),t-=s-a.reduce((e,t)=>t.damage+e,0)}break;default:console.error(`repair mode ${this.repairMode} invalid.`)}}addDevices(...e){let t=this.devices.length;this.devices.push(...e),e.forEach((e,i)=>this.setRepairPriority(e.type,t+1+i))}getRandomDevice(){let e=Math.trunc(this.devices.length*Math.random());return this.devices[e]}damageRandomDevices(e){let t=Math.max(e/10,2),i=e;for(;e>0;){let n,a=Math.max(i*Math.random(),t);do{n=this.getRandomDevice()}while(n.hitDoesDamage());n.takeDamage(a),e-=a}}getDevice(e){return this.parent[e.propName]}getDevices(){return this.devices.slice()}setRepairPriority(e,t){let i=this.devices.find(t=>t.type.name===e.name);if(!i)return;if(this.repairPriorities.has(e.name)){let i=this.repairPriorities.get(e.name);if(i===t)return;let n=this.repairPriorities.get(i);0===(n=n.filter(t=>t.type.name!==e.name)).length?(this.repairPriorities.delete(i),this.prioritiesInUse.delete(i)):this.repairPriorities.set(i,n)}this.prioritiesInUse.add(t),this.repairPriorities.set(e.name,t);let n=this.repairPriorities.get(t)||[];n.push(i),this.repairPriorities.set(t,n)}makeRepairPriority(){this.devices.forEach((e,t)=>{this.setRepairPriority(e.type,t+1)})}getRepairPriorities(){return this.repairPriorities}getDeviceRepairPriority(e){return this.repairPriorities.get(e.name)||0}die(){x.unregister(this.onTimeElapse),this.devices.forEach(e=>{e.die&&e.die()})}}let Q=275,U=50;class W extends o{constructor(e,t,i=0,n=0,a=1){super(W,e),this.health=a,this.maxHealth=this.health,this.terminal=f,this.width=i,this.length=n,this.gameObject=t,this._indestructible=!1}static get propName(){return"collider"}static setDeviceDamageRange(e,t){U=e,Q=t}static get minHitToDamageDevices(){return U}static get maxHitToDamageDevices(){return Q}repair(){this.health=this.maxHealth}makeIndestructible(){this._indestructible=!0}getLeftSideX(){return this.gameObject.coordinates.x}getRightSideX(){return this.gameObject.coordinates.x+this.width/100}getTopSideY(){return this.gameObject.coordinates.y}getBottomSideY(){return this.gameObject.coordinates.y+this.length/100}collision(e){return e.collider?W.collision(this,e.collider):(console.log(e," is not a collider."),!1)}static collision(e,t){return!e instanceof W||!t instanceof W?(console.error("both a and b need to be colliders, ",e,t),!1):e!==t&&(e.getLeftSideX()<t.getRightSideX()&&e.getRightSideX()>t.getLeftSideX()&&e.getTopSideY()<t.getBottomSideY()&&e.getBottomSideY()>t.getTopSideY())}hitWillDamageDevices(e){let t=Math.random()*(W.maxHitToDamageDevices-W.minHitToDamageDevices)+W.minHitToDamageDevices;return console.log("device damage threshold = ",t),e>t}takeHit(e){if(this._indestructible)this.terminal.printLine(`Consumed by ${this.gameObject.name} at ${this.gameObject.printSectorLocation()}`);else{if(this.health-=e,this.terminal.printLine(`${e.toFixed(2)} unit hit on ${this.gameObject.name} at ${this.gameObject.printSectorLocation()}`),ct&&this.hitWillDamageDevices(e)&&this.parent.deviceContainer){let t=e/(25*Math.random()*75);this.parent.deviceContainer.damageRandomDevices(t)}this.health<=0&&(this.parent.die?this.parent.die():this.terminal.echo(`${this.gameObject.name} destroyed.`))}}}class X extends o{constructor(e,t){super(X,e),this.gameObject=t}static get propName(){return"mover"}calculateTime(e,t){return e/Math.pow(t,2)}calculateDistance(e,t){return Math.pow(t,2)*e}calculateWarpFactor(e,t){return Math.sqrt(t/e)}*move(e,t=.5){if(!(e instanceof h))throw new Error("not vector");let i=e.scale(t),n=0,a=!0,s=this.gameObject.coordinates;for(;a;){if(n>1e3)return;if(!this.gameObject.isInGame())return;s.x+=i.deltaX,s.y+=i.deltaY,this.gameObject.updateCoordinates(),a=yield,n++}}*moveInDirection(e,t=.5){let i=t*Math.cos(e),n=t*Math.sin(e),a=0,s=!0,r=this.gameObject.coordinates;for(;s;){if(a>1e3)return;r.x+=i,r.y+=n,this.gameObject.updateCoordinates(),s=yield,a++}}*moveTo(e,t,i=.5){let n=distance,a=Math.atan2(this.gameObject.y-t/this.gameObject.x-e),s=i*Math.cos(a),r=i*Math.sin(a),o=!0;for(;n>0&&o;){let a=Math.abs(e-this.gameObject.x),h=Math.abs(t-this.gameObject.y);if(a<s&&(s=e-this.gameObject.x),h<r&&(r=t-this.gameObject.y),this.gameObject.x+=s,this.gameObject.y+=r,this.gameObject.updateCoordinates(),(n-=i)<=0)return;o=yield}}moveToSector(e){e.isFull(),this.gameObject.sector.container.removeGameObject(this.parent),this.gameObject.quadrant.container.removeGameObject(this.parent),this.gameObject.placeIn(this.gameObject.galaxy,e.quadrant,e)}}class z{constructor(e){this.gameObject=new c(this,!1),this.mover=new X(this,this.gameObject),this.proximity=new W(this,this.gameObject,100,100,1),this.collider=new W(this,this.gameObject,1,1,1),this.damage=100,this.firedFrom=e}die(){this.gameObject.removeSelf()}_canHit(e){return e!==this&&e.collider&&e!==this.firedFrom}proximityHit(e){return!!this._canHit(e)&&(e instanceof ne&&this.proximity.collision(e))}bodyHit(e){return!!this._canHit(e)&&this.collider.collision(e)}}class V extends N{constructor(e,t=0,i=0){super(e,D),this.terminal=f,this._capacity=i,this._torpedoes=t}addTorpedoes(e){this.checkDamage(),e<=0||(this._torpedoes+e>this._capacity?this._torpedoes=this._capacity:this._torpedoes+=e)}getTorpedoCount(){return this._torpedoes}fire(e){if(this.checkDamage(),this.isDamaged())return void this.terminal.echo("Photon torpedoes are damaged and can't fire.");if(this._torpedoes<=0)return void this.terminal.echo("Not enough torpedoes.");this._torpedoes--;let t=new z(this.parent);t.gameObject.placeIn(this.parent.gameObject.galaxy,this.parent.gameObject.quadrant,this.parent.gameObject.sector);let i,n=this.parent.gameObject.quadrant,a=this.parent.gameObject.coordinates.getVectorTo(e),s=t.mover.moveInDirection(a.angle),r=!1,o=null,h=[];do{if(i=s.next(!0),t.gameObject.quadrant!==n){console.log("We've left the quadrant.",n,t.gameObject.quadrant),s.next(!1);break}let{sXFl:e,sYFl:a}=t.gameObject.getLocation();if(h.push(`${e.toFixed(1)} - ${a.toFixed(1)}`),t.gameObject.sector.getAdjacentSectors(!0).forEach(e=>{r||e.container.getAllGameObjects().forEach(e=>{r||(t.proximityHit(e)||t.bodyHit(e))&&(r=!0,o=e,console.log("HIT!!!",e))})}),r){s.next(!1);break}}while(!i.done);for(let e=0;e<h.length;e++)0===e?this.terminal.echo(`${h[e]}    `):e===h.length-1?this.terminal.echo(`${h[e]}`):e%2==0&&this.terminal.echo(`${h[e]}    `);this.terminal.echo("\n"),r?o.collider.takeHit(t.damage):this.terminal.printLine("Torpedo missed and has left the quadrant!"),t.die()}}class J extends N{constructor(e,t){super(e,M),this.capacity=t,this.up=!1,this.units=this.capacity,this.terminal=f}printInfo(){return`${this.up?"UP":"DOWN"}, ${this.units.toFixed(2)} ${(100*this.units/this.capacity).toFixed(1)}%`}recharge(){this.checkDamage(),this.units=this.capacity}lower(){this.checkDamage(),this.up?(this.up=!1,this.terminal.printLine("Shields lowered.")):this.terminal.printLine("Shields already down.")}raise(){this.checkDamage(),this.up?this.terminal.printLine("Shields already up."):this.isDamaged()?this.terminal.printLine("Shields are damaged."):(this.up=!0,this.terminal.printLine("Shields raised."))}drain(e){if(this.checkDamage(),this.units-e<0)throw new Error("Not enough energy");return this.units-=e,0===this.units&&this.lower(),this.units}charge(e){this.checkDamage(),this.units+e>this.capacity&&(e=this.capacity-this.units),this.units+=e,this.units===this.capacity&&this.terminal.printLine("Shields at max.")}takeHit(e){this.up&&!this.isDamaged()?(this.terminal.printLine(`${e.toFixed(2)} hit to shields.`),this.units<e?(e-=this.units,this.drain(this.units),this.parent.collider.takeHit(e)):this.drain(e)):this.parent.collider.takeHit(e)}}class Z extends N{constructor(e,t){if(super(e,T),!t)throw new Error("Phaser must have energy");this.energySystem=t,this.amountRecentlyFired=0,this.overheatThreshold=1500,this.terminal=f,this.scalingFactor=.9,this.maxScalingFactor=this.scalingFactor+.01,this.minScalingFactor=this.scalingFactor}calculateSureKill(e,t){return t/this.minScalingFactor**e}calculateDamage(e,t){return t*(this.scalingFactor+.01*Math.random())**e}coolDown(){this.amountRecentlyFired=0}checkOverHeat(){if(this.amountRecentlyFired>this.overheatThreshold){let e=this.amountRecentlyFired-this.overheatThreshold;Math.random()<=.0038*e&&(this.terminal.printLine("Phasers overheated!"),this.randomlyDamage())}}fire(e,t){if(e<=0)return void console.error("Can't fire amount ",e);if(!t)return void console.error("Need a target, ",t);if(!(t.collider instanceof W))return void console.error("You can't hit that",t);if(this.checkDamage(),this.isDamaged())return void this.terminal.printLine("Phaser control damaged.");if(!this.parent.gameObject)throw console.error("derp a lerp."),new Error("derp a lerp.");if(!t.gameObject||!t.gameObject.isInGame())return void console.error("Can't shoot something removed from the game.");let i=Galaxy.calculateDistance(this.parent.gameObject.sector,t.gameObject.sector),n=this.calculateDamage(i,e);t.shields instanceof J?t.shields.takeHit(n):t.collider instanceof W&&t.collider.takeHit(n),this.amountRecentlyFired+=e,this.checkOverHeat()}}class ee extends N{constructor(e,t,i){super(e,R),this.maxReserves=t,this.reserves=t,this.onTimeElapsed=this.onTimeElapsed.bind(this),this.clock=i,this.clock.register(this.onTimeElapsed),this.terminal=f}kill(){this.clock.unregister(this.onTimeElapsed)}atMax(){return this.reserves===this.maxReserves}recharge(){this.reserves=this.maxReserves}onTimeElapsed(e){this.isDamaged()?(this.reserves-=e,this.reserves=Math.max(this.reserves,0),0===this.reserves&&(this.parent.die&&this.parent.die(),this.terminal.printLine(`${this.parent.name}'s crew suffocates.`))):this.isDamaged()||this.atMax()||this.recharge()}die(){this.clock.unregister(this.onTimeElapsed)}}class te extends N{constructor(e,t){super(t,_,.12),this.capacity=e,this._energy=e}get energy(){return this._energy}set energy(e){e=Math.min(e,this.capacity),e=Math.max(e,0),this._energy=e}getPercent(){return this._energy/this.capacity}atMax(){return this._energy===this.capacity}recharge(){this._energy=this.capacity}useEnergy(e){if(this.checkDamage(),this._energy-e<-.01)throw new Error("Not enough energy!");this._energy-=e}addEnergy(e){if(this.checkDamage(),this._energy+e>this.capacity)throw new Error("Too much energy.");this._energy+=e}}class ie{constructor(){this.kHealth=40,this.kEnergy=400,this.kcHealth=100,this.kcEnergy=1200,this.kscHealth=400,this.kscEnergy=1750,this.rHealth=40,this.rEnergy=700}makeKlingon(e,t,i,n,a){let s=new se(e,t,i);return s.collider.health=this.kHealth,s.powerGrid.energy=this.kEnergy,s.gameObject.placeIn(e,n,a),s}makeKlingonCommander(e,t,i,n,a){let s=new re(e,t,i);return s.collider.health=this.kcHealth,s.powerGrid.energy=this.kcEnergy,s.gameObject.placeIn(e,n,a),s}makeKlingonSuperCommander(e,t,i,n,a){let s=new oe(e,t,i);return s.collider.health=this.kscHealth,s.powerGrid.energy=this.kscEnergy,s.gameObject.placeIn(e,n,a),s}makeRomulan(e,t,i,n,a){let s=new he(e,t,i);return s.collider.health=this.rHealth,s.powerGrid.energy=this.rEnergy,s.gameObject.placeIn(e,n,a),s}}class ne{constructor(e,t,i){this.galaxy=e,this.player=t,this.game=i,this.gameObject=new c(this,!0),this.collider=new W(this,this.gameObject,80,80),this.deviceContainer=new B(this),this.powerGrid=new te(200,this),this.phasers=new Z(this,this.powerGrid),this.lifeSupport=new ee(this,2,x),this.ai=new b(this,e,t),this.terminal=f,this.name=this.constructor.name}die(){this.deviceContainer.die(),this.lifeSupport.kill(),this.terminal.printLine(`${this.name} at ${this.gameObject.printSectorLocation()} was destroyed.`),console.log("You killed ",this),this.gameObject.removeSelf(),this.game.killEnemy(this)}}class ae extends ne{constructor(e,t,i){super(e,t,i)}}class se extends ae{constructor(e,t,i){super(e,t,i),this.collider.health=40,this.powerGrid.energy=400,this.name="Klingon Warbird"}}class re extends ae{constructor(e,t,i){super(e,t,i),this.collider.health=100,this.powerGrid.energy=1200,this.name="Klingon Commander"}}class oe extends ae{constructor(e,t,i){super(e,t,i),this.collider.health=400,this.powerGrid.energy=1750,this.name="Klingon Super Commander"}}class he extends ne{constructor(e,t,i){super(e,t,i),this.collider.health=40,this.powerGrid.energy=700,this.name="Romulan"}}class le{constructor(){this.gameObject=new c(this,!0),this.collider=new W(this,this.gameObject,25,25,1e3),this.name="star base"}}class de{constructor(){this.gameObject=new c(this,!0),this.collider=new W(this,this.gameObject,25,25,1e3),this.collider.makeIndestructible(),this.name="Star"}goSupernova(){this.gameObject.quadrant.supernova()}}class ce{constructor(){this.hasSupernova=!1,this.klingons=0,this.bases=0,this.stars=0,this.hasTelemetrySensors=!1,this.scanned=!1}print(e=!1){if(this.scanned){if(e)return`${this.hasSupernova?"1":"0"}${this.klingons}${this.bases}${this.stars}`;{let e=0;return this.hasSupernova&&(e+=1e3),e+=100*this.klingons,e+=10*this.bases,""+(e+=this.stars)}}return`..${this.bases}.`}}class me extends o{constructor(e,t,i){if(super(me,e),this.galaxy=t,!N.isType(i,A))throw new Error("Star chart needs a subspace radio.");this.subspaceRadio=i,this.info=[],this.hasSensors=[];for(let e=0;e<this.galaxy.length;e++){let e=[];for(let t=0;t<this.galaxy.width;t++)e[t]=new ce;this.info.push(e),this.hasSensors.push(new Set)}}getInfo(e){if(!(e instanceof u))throw new Error(`${e} is not a quadrant.`);if(!this.info[e._y]||!this.info[e._y][e._x])throw new Error("Error finding info.");return this.info[e._y][e._x]}_updateInfo(e,t){t.hasSupernova=e.hasSupernova,t.klingons=e.container.getCountOfGameObjects(ae),t.bases=e.container.getCountOfGameObjects(le),t.stars=e.container.getCountOfGameObjects(de),t.scanned=!0}showStarBases(){this.galaxy.getAllQuadrants().forEach(e=>{let t=e.container.getCountOfGameObjects(le);if(t>0){this.getInfo(e).bases=t}})}updateTelemetry(){this.subspaceRadio.isDamaged()||this.hasSensors.forEach((e,t)=>{e.forEach(e=>{let i=this.info[t][e],n=this.galaxy._getQuadrant(e,t);this._updateInfo(n,i)})})}hasTelemetrySensors(e){return this.hasSensors[e._y].has(e._x)}_deployTelemetrySensors(e,t){t.hasTelemetrySensors=!0,this.hasSensors[e._y].add(e._x)}probeScan(e){this.subspaceRadio.isDamaged()||this.shortRangeScan(e)}shortRangeScan(e){if(!(e instanceof u))throw new Error(`${e} is not a quadrant.`);let t=this.getInfo(e);this._updateInfo(e,t),this._deployTelemetrySensors(e,t)}longRangeScan(e){e.forEach(e=>{if(!(e instanceof u))throw new Error(`${e} is not a quadrant.`);let t=this.getInfo(e);this._updateInfo(e,t)})}static get propName(){return"starChart"}}class ue{constructor(e,t,i,n,a=10){if(!(t instanceof S))throw new Error("needs game clock");if(!(i instanceof g))throw new Error("needs terminal");if(!(n instanceof me))throw new Error("needs StarChart");this.gameObject=new c(this,!1),this.mover=new X(this,this.gameObject),this.armed=e,this.clock=t,this.starChart=n,this.terminal=i,this.warpFactor=a,this.visited=[],this.destination=null,this.destinationQuadrant=null,this.direction=null,this.onTimeElapse=this.onTimeElapse.bind(this)}clearVisited(){this.visited=[]}launchToward(e,t){this.destination=e,this.direction=this.gameObject.coordinates.angleTo(this.destination),this.destinationQuadrant=t,this.clock.register(this.onTimeElapse),this.visited.push(this.gameObject.quadrant)}onTimeElapse(e){let t,i=this.mover.calculateDistance(e,this.warpFactor),n=new h(i,this.direction),a=this.mover.move(n,1),s=!1,r=!1,o=null;do{let e=this.gameObject.quadrant;if(t=a.next(!0),!this.gameObject.isInGame()){r=!0,this.die();break}if(this.gameObject.quadrant.hasSupernova){s=!0,o=this.gameObject.quadrant,this.die();break}if(e!==this.gameObject.quadrant&&this.visited.push(this.gameObject.quadrant),this.armed&&this.gameObject.quadrant===this.destinationQuadrant){let e=this.gameObject.quadrant.container.getGameObjectsOfType(de);e.length>0&&e[0].goSupernova(),this.die();break}}while(!t.done);if(this.visited.forEach(e=>this.starChart.probeScan(e)),this.visited.forEach(e=>{let t=e.center;this.terminal.printLine(`Lt. Uhura- "The deep space probe is now in Quadrant ${t.userQuadrantX} - ${t.userQuadrantY}."`)}),this.clearVisited(),r)this.terminal.printLine('Lt. Uhura- "The deep space probe has left the Galaxy."');else if(s&&o&&o instanceof u){let e=o.center;this.terminal.printLine(`Lt. Uhura- "The deep space probe was destroyed in a supernova at Quadrant ${e.userQuadrantX} - ${e.userQuadrantY}"`)}}die(){this.gameObject.removeSelf(),this.clock.unregister(this.onTimeElapse)}}class pe extends N{constructor(e,t,i,n,a=3){super(e,I),this._probes=a,this.terminal=t,this.clock=i,this.starChart=n,this.probeWarpFactor=10}launchProbe(e,t,i){if(this.checkDamage(),this._probes<=0)return;let n=new ue(i,this.clock,this.terminal,this.starChart,this.probeWarpFactor),a=this.parent.gameObject;n.gameObject.placeIn(a.galaxy,a.quadrant,a.sector),n.launchToward(e,t),this._probes--}static get propName(){return"probeLauncher"}}class ge extends N{constructor(e,t,i,n,a,s,r,o=!1){if(!(t instanceof O))throw new Error("Engines must have a type deriving from EngineDeviceType.");if(!(n instanceof c))throw new Error("Engines must have a game object");if(!(a instanceof X))throw new Error("Engines must have a mover");if(!(i instanceof te))throw new Error("Engines require a power grid");super(e,t),this.powerGrid=i,this.mover=a,this.gameObject=n,this._warpFactor=s,this._warpFactorIsAdjustable=o,this._maxWarpFactor=r,this._minWarpFactor=s}get warpFactor(){return this._warpFactor}set warpFactor(e){if(!this._warpFactorIsAdjustable)throw new Error("Warp factor is not adjustable");this.checkDamage(),"number"!=typeof e||Number.isNaN(e)||e<this._minWarpFactor||e>this._maxWarpFactor||(this._warpFactor=e)}calculateTimeRequired(e){return this.mover.calculateTime(e,this.warpFactor)}calculateEnergyUsage(e){let t=.1*e*Math.pow(this.warpFactor,3);return this.parent.shields&&this.parent.shields.up&&(t*=2),t}moveTo(e){if(!e instanceof m)throw new Error("Can't move there");this.checkDamage(),this.powerGrid.checkDamage();let t=Galaxy.calculateDistance(this.gameObject.sector,e),i=this.calculateEnergyUsage(t);if(this.powerGrid.energy<i)throw new Error("Not enough energy.");this.mover.moveToSector(e),this.powerGrid.useEnergy(i)}static makeWarpEngines(e,t,i,n){return new ge(e,L,t,i,n,1,10,!0)}static makeImpulseEngines(e,t,i,n){return new ge(e,j,t,i,n,.975,.975,!1)}}const fe=1,ye=2,we=3,be=4;class ve{constructor(e,t,i){this.gameObject=new c(this,!1,i),this.mover=new X(this,this.gameObject),this.deviceContainer=new B(this),this.powerGrid=new te(3e3,this),this.collider=new W(this,this.gameObject,80,80,1500),this.dockedRepairSpeed=1,this.undockedRepairSpeed=.3,this.docked=!1,this.dockedAt=null,this.name="Enterprise",this.dead=!1,this.terminal=e,this.phasers=new Z(this,this.powerGrid),this.photons=new V(this,10,10),this.shields=new J(this,2500,this.powerGrid),this.shortRangeSensors=new N(this,C),this.longRangeSensors=new N(this,E),this.lifeSupport=new ee(this,4,t),this.warpEngines=ge.makeWarpEngines(this,this.powerGrid,this.gameObject,this.mover),this.warpEngines.warpFactor=5,this.impulseEngines=ge.makeImpulseEngines(this,this.powerGrid,this.gameObject,this.mover),this.subspaceRadio=new N(this,A),this.starChart=new me(this,this.gameObject.galaxy,this.subspaceRadio),this.probeLauncher=new pe(this,this.terminal,t,this.starChart),window.e=this}isDead(){return this.lifeSupport.reserves<=0||this.dead}die(){this.lifeSupport.kill(),this.terminal.echo("Enterprise destroyed!!!!\n"),this.dead=!0,this.gameObject.removeSelf()}firePhasersMultiTarget(e){let t=e.reduce((e,t)=>e+t.amount,0);if(t>this.powerGrid.energy)throw new Error("Not enough energy.");this.powerGrid.useEnergy(t),e.forEach(e=>{this.phasers.fire(e.amount,e.enemy)}),this.phasers.coolDown()}repairHull(){this.collider.repair()}dock(e){this.docked||(this.rechargeEverything(),this.docked=!0,this.dockedAt=e,this.deviceContainer.setRepairSpeed(this.dockedRepairSpeed))}rechargeEverything(){this.lifeSupport.recharge(),this.powerGrid.isOk()&&this.powerGrid.recharge(),this.photons.isOk()&&this.photons.addTorpedoes(this.photons._capacity-this.photons.getTorpedoCount()),this.shields.isOk()&&this.shields.recharge(),this.repairHull()}undock(){this.docked=!1,this.dockedAt=null,this.deviceContainer.setRepairSpeed(this.undockedRepairSpeed)}impulseTo(e){this.docked&&this.undock(),this.impulseEngines.moveTo(e)}warpTo(e){this.docked&&this.undock(),this.warpEngines.moveTo(e)}getCondition(){let e=this.gameObject.quadrant.container.getCountOfGameObjects(ne);return this.docked?be:e>0?we:this.powerGrid.energy<1e3?ye:fe}shieldsUp(){this.powerGrid.useEnergy(50),this.shields.raise()}shieldsDown(){this.shields.lower()}printCondition(){switch(this.getCondition()){case be:return"DOCKED";case fe:return"GREEN";case ye:return"YELLOW";case we:return"RED";default:console.error("condition not recognized.")}}}class Se{constructor(e,t){this.name=e,this.habitable=t}}const xe=new Se("m",!0),ke=new Se("n",!1),Oe=new Se("o",!0);class Ce{constructor(e,t,i=!1){if(!(e instanceof Se))throw new Error("planet type must be provided.");this.gameObject=new c(this,!0),this.collider=new W(this,this.gameObject,25,25,1e3),this.type=e,this.hasCrystals=t,this.known=i,this.name="planet"}static randomlyGenerate(){let e,t=Math.random();return new Ce(e=t>2/3?xe:t>1/3?ke:Oe,Math.random()>2/3)}}class Ee{constructor(){this.gameObject=new c(this,!0),this.collider=new W(this,this.gameObject,25,25),this.collider.makeIndestructible(),this.name="black hole"}}function Te(...e){return e=(e=e.sort((e,t)=>t.length-e.length)).map(e=>e+"\\s*"),new RegExp(`^\\s*(${e.join("|")})\\s*$`,"i")}function _e(...e){return e=(e=e.sort((e,t)=>t.length-e.length)).map(e=>e+"(\\s+|$)"),new RegExp(`^\\s*(${e.join("|")})\\s*`,"i")}const Le="info",je="attack",Re="move",Me="not instant ship command",$e="instant ship command";class De{constructor(e,t,i,n){this.abbreviation=e,this.name=t,this.fullName=i.split(" ").join("-"),this.regex=_e(this.abbreviation,this.name,this.fullName),this.type=n,this.deviceUsed="",this._info="No info.",this.options={},this.modes={},this.active=!0,this.syntax=[]}addOption(e,...t){this.options[e]={regex:Te(...t),matches:t}}addMode(e,...t){this.modes[e]={regex:Te(...t),matches:t}}stripOptions(e){return e.filter(e=>!Object.keys(this.options).some(t=>this.options[t].regex.test(e)))}stripModes(e){return e.filter(e=>!Object.keys(this.modes).some(t=>this.modes[t].regex.test(e)))}stripModeAndOptions(e){return this.stripModes(this.stripOptions(e))}getOption(e){let t={};return Object.keys(this.options).forEach(i=>{t[i]=e.some(e=>this.options[i].regex.test(e))}),t}getMode(e){let t={};return Object.keys(this.modes).forEach(i=>{t[i]=this.modes[i].regex.test(e[0])}),t}isInstantShipCommand(){return this.type===$e}isInfoCommand(){return this.type===Le}isAttackCommand(){return this.type===je}isMoveCommand(){return this.type===Re}get info(){return this.makeInfo()+this._info}makeInfo(){let e=[["Abbreviation",this.abbreviation],["Name",this.name],["Full Name",this.fullName]];if(Object.keys(this.modes).length>0){let t=[["Modes",""]];Object.entries(this.modes).forEach(([e,i],n)=>{t.push([`  ${n+1}) ${e}`,i.matches.join(", ")])}),e.push(...t)}if(Object.keys(this.options).length>0){let t=[["Options",""]];Object.entries(this.options).forEach(([e,i],n)=>{t.push([`  ${n+1}) ${e}`,i.matches.join(", ")])}),e.push(...t)}let t=g.formatGrid(e,!1,null,!0);return g.joinGrid(t,"    ")}async getConfirmation(e,t){let i,n=/(yes|y)/i,a=/(no|n)/i;do{i=await e.ask(t),n=/(yes|y)/i,a=/(no|n)/i}while(!n.test(i)&&!a.test(i));return n.test(i)}}class Ae extends De{constructor(e,t){super("rep","repair","set repair mode",$e),this.terminal=e,this.player=t,this.addMode("setRepairMode","m","mode"),this.addMode("setRepairPriority","set-priority","p","priority"),this._info="\nSyntax: \n    1) REPAIR mode [mode]\n    2) REPAIR set-priority\n    \nWhen your systems are damaged your repair crews will run about the ship repairing systems. This happens \nwhen time elapses; for example, by using the rest command, or by moving about the galaxy.\n\nThe 'repair' command allows you to control how your repair crews spend their time. If the repair mode is \nset to 'even', 'least', or 'most' your repair crews will repair devices based on how damaged the device is. Sometimes \nthis is insufficient though so you can specify priorities for each device (I'd set life support to be the highest \npriority for example). Then if the repair mode is set to 'priority' your repair crews will repair higher priority \ndevices first.\n    \nExamples : \n    repair mode even\n    repair set-priority\n    \nSyntax 1) Setting your repair mode: \n    \"even\"  - tell repair crews to spread their time evenly across all damaged devices\n    \"least\" - tell repair crews to repair the least damaged devices first\n    \"most\"  - tell repair crews to repair the most damaged devices first\n    \"priority\" (alias \"p\")    - tell repair to repair devices by their priorities\n  \nSyntax 2) REPAIR set priority \n    This is how you set the priorities for your devices. You'll be asked to give a repair priority (a number 1 - # of devices) for each device. Lower numbers are higher priority.\n    If multiple devices have the same priority repair time will be split evenly amongst them.    \n        "}async setRepairPriority(){let e=this.player.deviceContainer.getDevices();for(let t=0;t<e.length;t++){let i=e[t],n=this.player.deviceContainer.getDeviceRepairPriority(i.type);this.terminal.printLine(`${i.type.name}'s priority is currently ${n}.`);let a,s=!1;for(;!s;){let e=await this.terminal.ask(`Set ${i.type.name} priority to : `);a=Number.parseInt(e),Number.isNaN(a)||a<0?this.terminal.printLine("Beg pardon, Captain?"):s=!0}this.player.deviceContainer.setRepairPriority(i.type,a)}}setRepairMode(){let e=this.terminal.getArguments(),t=Te("e","even"),i=Te("l","least"),n=Te("m","most"),a=Te("p","priority");t.test(e[1])?this.player.deviceContainer.setRepairMode(P):i.test(e[1])?this.player.deviceContainer.setRepairMode(q):n.test(e[1])?this.player.deviceContainer.setRepairMode(G):a.test(e[1])?this.player.deviceContainer.setRepairMode(F):this.terminal.printLine("repair mode not recognized (even, least, most, or priority is acceptable.)")}async run(){let e=this.terminal.getArguments(),{setRepairMode:t,setRepairPriority:i}=this.getMode(e);if(t)this.setRepairMode();else{if(!i)return void this.terminal.printLine("Beg pardon, Captain?");await this.setRepairPriority()}}}class Ie extends De{constructor(e,t){super("r","rest","rest",Me),this.game=e,this.terminal=t,this._info="\nFull command:  REST [NUMBER OF STARDATES]\n\nThis command simply allows the specified number of stardates to go\nby.  This is useful if you have suffered damages and wish to wait\nuntil repairs are made before you go back into battle.\n\nIt is not generally advisable to rest while you are under attack by\nKlingons.\n        "}run(){let e=Number.parseFloat(this.terminal.getArguments());this.game.clock.elapseTime(e)}}class Ne extends De{constructor(e,t){super("w","warp","warp factor",$e),this.terminal=e,this.player=t,this._info="\nSyntax:  WARP [number]\n\nYour warp factor controls the speed of your starship.  The larger the\nwarp factor, the faster you go and the more energy you use.\n\nYour minimum warp factor is 1.0 and your maximum warp factor is 10.0\n(which is 100 times as fast and uses 1000 times as much energy).  At\nspeeds above warp 6 there is some danger of causing damage to your\nwarp engines; this damage is larger at higher warp factors and also\ndepends on how far you go at that warp factor."}run(){let e=Number.parseFloat(this.terminal.getArguments()[0]);if(Number.isNaN(e))this.terminal.printLine("Beg your pardon, Captain?");else{if(e<1)this.terminal.printLine('Helmsman Sulu- "We can\'t go below warp 1, Captain."');else if(e<=6)this.terminal.printLine(`Helmsman Sulu- "Warp factor ${e.toFixed(1)}, Captain."`);else if(e<8)this.terminal.printLine('Engineer Scott- "Aye, but our maximum safe speed is warp 6."');else if(e>=8&&e<10)this.terminal.printLine('Engineer Scott- "Aye, Captain, but our engines may not take it."');else if(10===e)this.terminal.printLine('Engineer Scott- "Aye, Captain, we\'ll try it."');else{if(!(e>10))return void this.terminal.printLine("Beg your pardon, Captain?");this.terminal.printLine('Helmsman Sulu- "Our top speed is warp 10, Captain."')}this.player.warpEngines.warpFactor=e}}}class Pe extends De{constructor(e,t,i){super("da","damages","damage report",Le),this.game=e,this.terminal=t,this.player=i,this.regex=_e(this.abbreviation,this.name,"damage",this.fullName),this.addOption("alpha","a","alpha","alphabetically"),this.addOption("all","all"),this._info=" \nSyntax: [command] (options)\nexample usage : \n    COMMAND> damage alpha    \n    - sorted by alphabetically by device name\n    COMMAND> da\n    - sorted by time \n    COMMAND> da all\n    - show all devices, sort by default (damage descending)\n\n========    DETAILS =========    \nAt any time you may ask for a damage report to find out what devices\nare damaged and how long it will take to repair them.  Naturally,\nrepairs proceed faster at a starbase.\n\nIf you suffer damages while moving, it is possible that a subsequent\ndamage report will not show any damage.  This happens if the time\nspent on the move exceeds the repair time, since in this case the\ndamaged devices were fixed en route.\n\nDamage reports are free.  They use no energy or time, and can be done\nsafely even in the midst of battle."}run(){let{alpha:e,all:t}=this.getOption(this.terminal.getArguments()),i=this.player.deviceContainer.devices.slice();if(e?i.sort((e,t)=>e.name.localeCompare(t.name)):i.sort((e,t)=>t.damage-e.damage),t||(i=i.filter(e=>e.damage>0)),0===i.length)return this.terminal.skipLine(1),this.terminal.printLine("All systems operational."),void this.terminal.skipLine(1);this.terminal.skipLine(1),this.terminal.printLine(`Repair mode: ${this.player.deviceContainer.repairMode}`);let n=[["","","","-REPAIR TIMES-"],["Priority","DEVICE","IN FLIGHT","DOCKED"],...i.map(e=>[""+this.player.deviceContainer.getDeviceRepairPriority(e.type),e.name,e.timeToRepairInFlight().toFixed(2),e.timeToRepairAtDock().toFixed(2)])];this.terminal.printLine(this.terminal.joinGrid(this.terminal.formatGrid(n,!1,null,!0),"  ")),this.terminal.skipLine(1)}}class qe extends De{constructor(e,t,i){super("sc","score","show score",Le),this.game=e,this.terminal=t,this.player=i,this._info="\n        \nShows what the score would be if the game were to end naturally at\nthis point. Since the game hasn't really ended and you lose points if\nyou quit, this is perhaps a meaningless command, but it gives you a\ngeneral idea of how well you are performing."}run(){let e=0,t=this.game.getNumberOfTypeKilled(ae),i=this.game.getNumberOfTypeKilled(se),n=10*i,a=this.game.getNumberOfTypeKilled(re),s=50*a,r=this.game.getNumberOfTypeKilled(oe),o=200*r,h=this.game.getNumberOfTypeKilled(he),l=20*h;e+=n+s+o+l;let d=this.game.clock.getElapsedTime();0===d&&(d=1);let c=t/d,m=500*c;e+=m;if(this.terminal.printLine("Your score --"),this.terminal.printLine(`${h} Romulan ships destroyed`.padEnd(60," ")+l),this.terminal.printLine(`${i} Klingon war birds destroyed`.padEnd(60," ")+n),this.terminal.printLine(`${a} Klingon Commander ships destroyed`.padEnd(60," ")+s),this.terminal.printLine(`${r} Klingon Super Commander ships destroyed`.padEnd(60)+o),this.terminal.printLine(`${c.toFixed(2)} Klingons per stardate`.padEnd(60)+m.toFixed(2)),this.game.isVictory()){let t=100*this.game.skill;e+=t,this.terminal.printLine(`Bonus for winning ${this.game.getDifficultyStr()} game `.padEnd(60)+t)}if(this.player.isDead()){let t=-200;e+=t,this.terminal.printLine("Penalty for getting yourself killed".padEnd(60)+t)}this.terminal.skipLine(2),this.terminal.printLine("TOTAL SCORE".padEnd(60)+e.toFixed(0))}}class Ge extends De{constructor(e,t,i){super("repo","report","game report",Le),this.game=e,this.terminal=t,this.galaxy=i,this._info="\nThis command supplies you with information about the state of the\ncurrent game.  Its purpose is to remind you of things that you have\nlearned during play, but may have forgotten.\n\n     You are told the following things:\n\n       . The length and skill level of the game you are playing\n       . The original number of Klingons\n       . How many Klingons you have destroyed\n       . Whether the Super-Commander has been destroyed\n       . How many bases have been destroyed\n       . How many bases are left"}run(){this.terminal.printLine(`You are now playing a ${this.game.getGameLengthStr()} ${this.game.getDifficultyStr()} game.`);let e=this.game.getNumberOfTypeKilled(ae),t=this.game.getNumberOfTypeKilled(se),i=this.game.getNumberOfTypeKilled(re),n=this.game.getNumberOfTypeKilled(oe);this.terminal.printLine(`${e} of ${this.game.initialEnemies} klingons have been killed.`),this.terminal.printLine(`${t} klingon warbirds killed.`),this.terminal.printLine(`${i} klingon commanders killed.`),this.terminal.printLine(`${n} klingon super commanders killed.`);let a=this.galaxy.container.getCountOfGameObjects(le);this.terminal.printLine(`There are ${a} remaining bases.`)}}class Fe extends De{constructor(e,t,i){super("pho","photon","photon torpedoes",je),this.game=e,this.terminal=t,this.player=i,this.regex=_e(this.abbreviation,this.name,this.fullName,"photons","photon torpedo"),this.deviceUsed="",this.maxPerBurst=3,this.options={},this._info='\nFull commands:  PHOTONS (NUMBER) [coordinate 1] [coordinate 2] [coordinate 3]\n\nLaunches photon torpedoes at coordinates in the current quadrant.\n\nYou can launch up to 3 at a time. To launch specify the coordinates to fire at,\neach coordinate is x then y.\nEx : \nCOMMAND> photons 1 1 5 5\nLaunches 2 torpedoes, one to Sector 1 - 1, another to Sector 5 - 5\n\nYou can specify the number to fire if you\'d like to launch multiple \ntorpedoes at the same coordinates.\nCOMMAND> photons 3 5 5\nLaunches 3 torpedoes at Sector 5 - 5\n\nNote: If you fire 3 torpedoes and only give two coordinates, the \nlast coordinate is the one that will be fire at twice. \n\nYou can specify coordinates between to sectors if you wish.\nCOMMAND> pho 5.5 5\nLaunches one torpedo in between sectors 5 - 5 and 6 - 5\n\nPhoton torpedoes are projectile weapons--you either hit what you aim\nat, or you don\'t.  There are no "partial hits".\n\nPhoton torpedoes are proximity-fused. There is a hit "window" about one\nsector wide.  If the torpedo misses the hit window, it does not\nexplode and the enemy is unaffected.  Photon torpedoes are only\neffective within the quadrant.  They have no effect on things in\nadjacent quadrants.'}run(){if(this.player.photons.isDamaged())return void this.terminal.echo("Torpedo launcher is damaged.");let e=this.terminal.getArguments();e=e.map(e=>Number.parseFloat(e)).filter(e=>!Number.isNaN(e));let t=Math.floor(e.length/2);if(e.length%2!=0&&(t=e.shift()),t>this.maxPerBurst)return void this.terminal(`Maximum of ${this.maxPerBurst} torpedoes per burst.`);let i=this.player.photons.getTorpedoCount();if(t>i)return void this.terminal.echo(`You only have ${i} torpedoes.`);let n=[];for(let t=0;t+1<e.length;t+=2){let i=l.convert1(this.player.gameObject.quadrant,e[t],e[t+1]);n.push(i)}if(n.length<t){let e=t-n.length,i=n[n.length-1];for(let t=0;t<e;t++)n.push(i.clone())}n.forEach((e,t)=>{this.terminal.echo(`\nTrack for torpedo number ${t+1}:  `),this.player.photons.fire(e)})}}class He extends De{constructor(e,t,i){super("p","phasers","fire phasers",je),this.game=e,this.terminal=t,this.player=i,this.addOption("no","n","no"),this.addMode("auto","a","auto","automatic"),this.addMode("manual","m","man","manual"),this._info='\nFull commands:  PHASERS AUTOMATIC [AMOUNT TO FIRE] (NO)\n                PHASERS [AMOUNT TO FIRE] (NO)\n                PHASERS MANUAL (NO) [AMOUNT 1] [AMOUNT 2]...[AMOUNT N]\n\nPhasers are energy weapons. As you fire phasers at Klingons, you\nspecify an "amount to fire" which is drawn from your energy reserves.\nThe amount of total hit required to kill an enemy is partly random,\nbut also depends on skill level.\n\nPhaser fire diminishes to about 60 percent at 5 sectors.\n\nThe average hit required to kill an ordinary Klingon varies from 200\nunits in the Novice game to 250 units in the Emeritus game.\nCommanders normally require from 600 (Novice) to 700 (Emeritus).  The\nSuper-commander requires from 875 (Good) to 1000 (Emeritus). Romulans\nrequire an average of 350 (Novice) to 450 (Emeritus).\n\nHits on enemies are cumulative, as long as you don\'t leave the\nquadrant.\n\nIn general, not all that you fire will reach the Klingons.  The\nfarther away they are, the less phaser energy will reach them. If a\nKlingon is adjacent to you, he will receive about 90% of the phaser\nenergy directed at him; a Klingon 5 sectors away will receive about\n60% and a Klingon 10 sectors away will receive about 35%. There is\nsome randomness involved, so these figures are not exact. Phasers\nhave no effect beyond the boundaries of the quadrant you are in.\n\nPhasers may overheat (and be damaged) if you fire too large a burst\nat once. Firing up to 1500 units is safe.  From 1500 on up the\nprobability of overheat increases with the amount fired.\n\nIf phaser firing is automatic, the computer decides how to divide up\nyour [amount to fire] among the Klingons present.  If phaser firing\nis manual, you specify how much energy to fire at each Klingon\npresent (nearest first), rather than just specifying a total amount.\nYou can abbreviate "MANUAL" and "AUTOMATIC" to one or more letters; if\nyou mention neither, automatic fire is usually assumed.\n\nBattle computer information is available by firing phasers manually,\nand allowing the computer to prompt you.  If you enter zero for the\namount to fire at each enemy, you will get a complete report, without\ncost.  The battle computer will tell you how much phaser energy to\nfire at each enemy for a sure kill.  This information appears in\nparentheses prior to the prompt for each enemy.  SInce the amount is\ncomputed from sensor data, if either the computer or the S.R. sensors\nare damaged, this information will be unavailable, and phasers must\nbe fired manually.\n\nA safety interlock prevents phasers from being fired through the\nshields.  If this were not so, the shields would contain your fire\nand you would fry yourself.  However, you may utilize the\n"high-speed shield control" to drop shields, fire phasers, and raise\nshields before the enemy can react.  Since it takes more energy to\nwork the shields rapidly with a shot, it costs you 200 units of\nenergy each time you activate this control.  It is automatically\nactivated when you fire phasers while the shields are up. By\nspecifying the (no) option, shields are not raised after firing.\n\nPhasers have no effect on starbases (which are shielded) or on stars.'}run(){let e=this.player.gameObject.quadrant,t=this.player.gameObject.sector,i=e.container.getGameObjectsOfType(ne);if(0===i.length)return void this.terminal.printLine("No enemies to fire upon.");let n=this.terminal.getArguments(),{auto:a,manual:s}=this.getMode(n),{no:r}=this.getOption(n),o=r,h=[];a||s?h=n.slice(1):(a=!0,h=n.slice(0));if(a){let e=Number.parseInt(h[0]);if(Number.isNaN(e))return void this.terminal.printLine("Try again.");if(e<=0)return void this.terminal.printLine(`Can't fire ${e}, specify an amount greater than 0.`);if(e+200>this.player.powerGrid.energy)return void this.terminal.printLine(`Units available = ${this.player.powerGrid.energy}.`);let n=[];i.forEach(e=>{let i=Galaxy.calculateDistance(e.gameObject.sector,t),a=this.player.phasers.calculateSureKill(i,e.collider.health);n.push({enemy:e,distance:i,amount:a})}),n.sort((e,t)=>e.distance-t.distance);let a=[],s=e;for(let t=0;e>0&&t<n.length;t++){let{amount:e}=n[t];if(s<e&&(e=s),s-=e,n[t].amount=e,a.push(n[t]),s<=0)break}this.player.shields.up&&(this.terminal.printLine('Weapons Officer Sulu-  "High-speed shield control enabled, sir."'),this.player.shields.lower(),o?this.player.powerGrid.useEnergy(200):(this.player.shields.raise(),this.player.powerGrid.useEnergy(150))),this.player.firePhasersMultiTarget(a),s>0&&(this.terminal.echo(`Firing ${s.toFixed(2)} excess units into space.`),this.player.powerGrid.useEnergy(s))}else if(s){let e=h.map(e=>Number.parseInt(e));if(e.some(e=>Number.isNaN(e)))return void this.terminal.printLine("Try again.");if((e=e.filter(e=>e>0)).reduce((e,t)=>e+t,0)+200>this.player.powerGrid.energy)return void this.terminal.printLine(`Units available = ${this.player.powerGrid.energy}.`);if(i.length<e.length)return void this.terminal.printLine(`There are only ${i.length} enemies here.`);let n=[];i.forEach(e=>{n.push({enemy:e,distance:Galaxy.calculateDistance(e.gameObject.sector,t),amount:null})}),n.sort((e,t)=>e.distance-t.distance);let a=[];for(let t=0;t<e.length;t++){let i=n[t];i.amount=e[t],a.push(i)}this.player.shields.up&&(this.terminal.printLine('Weapons Officer Sulu-  "High-speed shield control enabled, sir."'),this.player.shields.shieldsDown(),o?this.player.powerGrid.useEnergy(200):(this.player.shieldsUp(),this.player.powerGrid.useEnergy(150))),this.player.firePhasersMultiTarget(a,!1)}}}class Ke extends De{constructor(e,t,i){super("sh","shields","shields"),this.game=e,this.terminal=t,this.player=i,this.regex=_e(this.abbreviation,this.name,this.fullName),this.addMode("up","up"),this.addMode("down","down","do","d"),this.addMode("charge","charge","ch","c"),this.addMode("drain","drain","dr"),this._info='  \nFull commands:  SHIELDS UP\n                SHIELDS DOWN\n                SHIELDS CHARGE [amount of energy to put into the shields]\n                SHIELDS DRAIN  [amount of energy to take from the shields]\n\nYour deflector shields are a defensive device to protect you from\nKlingon attacks (and nearby novas).  As the shields protect you, they\ngradually weaken.  A shield strength of 75%, for example, means that\nthe next time a Klingon hits you, your shields will deflect 75% of\nthe hit, and let 25% get through to hurt you.\n\nIt costs 50 units of energy to raise shields, nothing to lower them.\nYou may move with your shields up; this costs nothing under impulse\npower, but doubles the energy required for warp drive.\n\nEach time you raise or lower your shields, the Klingons have another\nchance to attack.\n\nYou may not fire phasers through your shields.  However you may use\nthe "high-speed shield control" to lower shields, fire phasers, and\nraise the shields again before the Klingons can react.  Since rapid\nlowering and raising of the shields requires more energy than normal\nspeed operation, it costs you 200 units of energy to activate this\ncontrol.  It is automatically activated when you fire phasers while\nshields are up.  You may fire photon torpedoes, but they may be\ndeflected considerably from their intended course as they pass\nthrough the shields (depending on shield strength).\n\nYou may transfer energy between the ship\'s energy (given as "Energy"\nin the status) and the shields. To transfer energy from your ship to your shields \nuse the charge mode. The drain mode does the opposite.\n\nEnemy torpedoes hitting your ship explode on your shields (if they\nare up) and have essentially the same effect as phaser hits.'}run(){let{up:e,down:t,charge:i,drain:n}=this.getMode(this.terminal.getArguments());if(!(e||t||i||n))return this.terminal.printLine("Beg pardon, Captain?"),void this.terminal.printLine("Valid options are : 'up', 'down', 'charge', or 'drain'.");if(e)this.player.shieldsUp();else if(t)this.player.shieldsDown();else if(i||n){let e=this.player.shields,t=this.player.powerGrid,a=this.terminal.getArguments()[1];if(a=Number.parseInt(a),Number.isNaN(a))return void this.terminal.printLine(`${a} is an gibberish amount to transfer captain.`);if(0===a)return void this.terminal.printLine("Beg pardon Captain?");if(e.isDamaged())return void this.terminal.echo("Shields damaged.");if(i){if(t.energy<a)return void this.terminal.printLine("Not enough energy, Captain.");if(e.units===e.capacity)return void this.terminal.printLine("Shields already at max, Captain.");e.units+a>e.capacity&&(a=e.capacity-e.units),this.terminal.printLine("Charging shields."),t.useEnergy(a),e.charge(a)}else if(n){if(a>e.units&&(this.terminal.printLine("Not enough energy in shields. Draining what we have."),a=e.units),t.atMax())return void this.terminal.printLine("Ship energy already at max.");t.energy+a>t.capacity&&(this.terminal.printLine("That would exceed our ship energy capacity. Setting ship energy to maximum."),a=t.capacity-t.energy),e.drain(a),t.addEnergy(a)}}}}class Ye extends De{constructor(e,t){super("com","commands","show commands"),this.game=e,this.terminal=t,this.type=Le,this.addOption("alias","a","alias"),this._info="\nPrints a chart of the commands sorted by types. \nAdding the 'alias' option shows you a chart of all the commands, their names, and aliases. \n"}printAliases(){let e=[["Abbreviation","Name","Full Name"],["============","====","========="]];this.game.getActiveCommands().sort((e,t)=>e.name===t.name?0:e.name<t.name?-1:1).forEach(t=>{e.push([t.abbreviation,t.name,t.fullName])});let t=this.terminal.formatGrid(e,!1,null,!0);this.terminal.printLine(this.terminal.joinGrid(t,"    "))}getSortedCommands(){return this.game.getActiveCommands().sort((e,t)=>e.name===t.name?0:e.name<t.name?-1:1)}printCommandsByType(){let e=[],t=[],i=[],n=[];this.getSortedCommands().forEach(a=>{switch(a.type){case je:t.push(a.name);break;case Le:i.push(a.name);break;case Re:e.push(a.name);break;default:n.push(a.name)}});let a=[["Move Commands","Weapon Commands"],["=============","==============="],[e.join(", "),t.join(", ")],["",""],["Info Commands",""],["=============",""],[i.join(", "),""],["",""],["Other Commands",""],["==============",""],[n.join(", "),""]],s=this.terminal.formatGrid(a,!1,null,!0),r=this.terminal.joinGrid(s,"   ");this.terminal.printLine(r)}printCommands(){let e=[],t=this.getSortedCommands().map(e=>e.name),i=[];e.push(i);for(let n=0;n<t.length;n++)i.push(""+t[n]),4===i.length&&(i=[],e.push(i));let n=this.terminal.formatGrid(e,!1);return this.terminal.joinGrid(n,"   ")}run(){let{alias:e}=this.getOption(this.terminal.getArguments());e?this.printAliases():this.printCommandsByType(),this.terminal.skipLine(1)}}class Be extends De{constructor(e,t,i){super("help","help","ask for help",Le),this.game=e,this.terminal=t,this.commandsCommand=i,this.regex=_e("help"),this.type=Le,this._info='\nSyntax:  HELP [command]\n\nTo get information about a command, just type help and the command name.\nIf the command has modes, options, or other arguments that you need to provide \nyou can find all that info in the help information for the command.\nTo get a list of commands try the "commands" command.\n\nInfo about commands:\nTo run the command you can type the command\'s abbreviation, name or full name.\nSome commands have modes and these modes are the first argument you provide.\nSome commands have options which can be provided anyway in the command.\n'}async run(){this.terminal.newLine();let e=this.terminal.getArguments()[0];if(!e)do{e=await this.terminal.ask("Help on what command?")}while(!e);let t=this.game.commands.find(t=>t.regex.test(e));t?(this.terminal.echo('Spock- "Captain, I\'ve found the following information:"\n'),this.terminal.echo(t.info)):(this.terminal.echo("Valid Commands:\n"),this.terminal.echo(this.commandsCommand.printCommands())),this.terminal.newLine()}}class Qe extends De{constructor(e,t,i,n){super("m","move","move",Re),this.game=e,this.terminal=t,this.player=i,this.galaxy=n,this.regex=_e(this.abbreviation,this.name),this.addMode("manual","m","manual"),this.addMode("automatic","a","automatic"),this.addOption("impulse","i","impulse"),this.useImpulse=!1,this._info='\n  Full command:  MOVE MANUAL [displacement] (impulse)\n                 MOVE AUTOMATIC [destination] (impulse)\n\nThis command is the usual way to move from one place to another within the galaxy.\nPassing the impulse option uses Impulse Engines instead of Warp Engines. \nYou warp according to the current warp factor (see "WARP FACTOR").\n\nThere are two command modes for movement: MANUAL and AUTOMATIC. Automatic is assumed. The\nmanual mode requires the following format:\n\n        MOVE MANUAL [deltax] [deltay]\n\n[deltax] and [deltay] are the horizontal and vertical displacements\nfor your starship, in sectors.  Specifying [deltax] and [deltay] causes your ship to move\nin a straight line to the specified destination. If [deltay] is omitted, it is assumed zero. \n\nThe automatic mode is as follows:\n\n        MOVE AUTOMATIC [quadrant x] [quadrant y] [sector x] [sector y]\n\nThis command also moves your ship in a straight line path to the destination.  For\nmoving within a quadrant, quadrant x and quadrant y may be omitted. For\nexample, to move to sector 2 - 9 in the current quadrant, the\nshortest command would be\n\n        M A 2 9\n\nTo move to quadrant 3 - 7, sector 5 - 8, type\n\n        M A 3 7 5 8\n\nand it will be done.  In automatic mode, either two or four numbers\nmust be supplied.\n\nIt uses time and energy to move.  How much time and how much energy\ndepends on your current warp factor, the distance you move, and\nwhether your shields are up.  The higher the warp factor, the faster\nyou move, but higher warp factors require more energy.  Specifically, \nenergy required = distance in terms of quadrants * (warpFactor ^ 3)\nYou may move with your shields up, but this doubles the energy required. \n\nYou can move within a quadrant without being attacked if you just\nentered the quadrant or have bee attacked since your last move\ncommand.  This enables you to move and hit them before they\nretaliate.\n\n====When using Impulse Engines =====\nThe impulse engines give you a way to move when your warp engines are\ndamaged.  They move you at a speed of 0.95 sectors per stardate,\nwhich is the equivalent of a warp factor of about 0.975, so they are\nmuch too slow to use except in emergencies.'}async moveTo(e){let t=this.player.warpEngines;this.useImpulse&&(t=this.player.impulseEngines);let i=Galaxy.calculateDistance(this.player.gameObject.sector,e),n=t.calculateEnergyUsage(i);if(this.player.powerGrid.energy<n)return this.terminal.printLine("Engineering to bridge--"),void this.terminal.printLine("We haven't the energy for that.");let a=t.calculateTimeRequired(i),s=100*a/this.game.timeRemaining;if(s>80){let e=await this.getConfirmation(this.terminal,`First Officer Spock- "Captain, I compute that such\n  a trip would require approximately ${s.toFixed(2)}% of our\n  remaining time.  Are you sure this is wise?"`);if(e)this.terminal.printLine("To boldly go...");else if(!e)return void this.terminal.printLine("Cancelling move.")}if(this.player.impulseEngines.isDamaged()&&this.player.warpEngines.isDamaged())this.terminal.printLine('Scotty- "Captain, our warp engines and impulse engines are both damaged. We can\'t move until one of them is repaired."');else{if(!this.useImpulse&&this.player.warpEngines.isDamaged()){let e=await this.getConfirmation(this.terminal,'Scotty- "Warp Engines are damaged, shall we proceed at impulse instead?"');if(e)this.terminal.printLine("Aye, Captain. Engaging impulse engines."),this.useImpulse=!0;else if(!e)return void this.terminal.printLine("Cancelling move.")}if(this.useImpulse&&this.player.impulseEngines.isDamaged()){let e=await this.getConfirmation(this.terminal,'Scotty- "Impulse Engines are damaged, shall we use warp engines instead?"');if(e)this.terminal.printLine("Aye, Captain. Engaging warp engines."),this.useImpulse=!1;else if(!e)return void this.terminal.printLine("Cancelling move.")}this.useImpulse?this.player.impulseTo(e):this.player.warpTo(e),this.game.clock.elapseTime(a)}}async run(){let e,t=this.terminal.getArguments(),{manual:i,automatic:n}=this.getMode(t),{impulse:a}=this.getOption(t);if(this.useImpulse=a,i||n||(n=!0),t=(t=this.stripModeAndOptions(t)).map(e=>Number.parseInt(e)).filter(e=>!Number.isNaN(e)),i){if(0===t.length)return void this.terminal.printLine("Beg pardon, Captain?");let i,n;if(1===t.length?(i=t[0],n=0):(i=t[0],n=t[1]),0===i&&0===n)return;let a=h.make(i,n);e=this.player.gameObject.coordinates.addVector(a)}else if(n){let i,n,a,s;if(4===t.length)i=t[0],n=t[1],a=t[2],s=t[3],e=l.convert(i,n,a,s,this.galaxy);else{if(2!==t.length)return void this.terminal.printLine("Beg pardon, Captain?");{let i=this.player.gameObject.quadrant;a=t[0],s=t[1],e=l.convert1(i,a,s,this.galaxy)}}}if(!this.galaxy.areValidCoordinates(e))return void this.terminal.printLine("Beg pardon, Captain?");let s=this.galaxy.getSector(e);if(!(s&&s instanceof m))return console.error(s),console.error("should be a Sector."),void this.terminal.printLine("Beg pardon, Captain?");if(s.isFull()){let e=s.quadrant.getNearestEmptySectorAdjacentTo(s);if(!e)return this.terminal.printLine("Computer error Captain, can't move there."),void console.error("can't find adjacent sector");let t=s.container.getAllGameObjects().filter(e=>e.collider)[0];this.terminal.printLine(`Sulu - "We managed to avoid the ${t.name} at ${t.gameObject.printSectorLocation()}."`),s=e}try{await this.moveTo(s)}catch(e){throw console.error(e),e}}}class Ue extends De{constructor(e,t,i,n){super("st","status","status report",Le),this.game=e,this.terminal=t,this.player=i,this.galaxy=n,this._info='\nThis command gives you information about the current state of your\nstarship as follows:\n\n  STARDATE - The current date. A stardate is the same as a day.\n\n  CONDITION - There are four possible conditions:\n        DOCKED - docked at starbase.\n        RED    - in battle.\n        YELLOW - low on energy (<1000 units)\n        GREEN  - none of the above\n\n  POSITION - Quadrant is given first, then sector\n\n  LIFE SUPPORT - If "ACTIVE" then life support systems are\n        functioning normally. If on "RESERVES" the number is how many\n        stardates your reserve food, air, etc. will last--you must\n        get repairs made or get to starbase before your reserves run\n        out.\n\n  WARP FACTOR - What your warp factor is currently set to.\n\n  ENERGY - The amount of energy you have left. If it drops to zero,\n        you die.\n\n  TORPEDOES - How many photon torpedoes you have left.\n\n  SHIELDS - Whether your shields are up or down, how strong they are\n       (what percentage of a hit they can deflect), and shield\n       energy.\n\n  KLINGONS LEFT - How many of the Klingons are still out there.\n\n  TIME LEFT - How long the Federation can hold out against the\n        present number of Klingons; that is, how long until the end\n        if you do nothing in the meantime.  If you kill Klingons\n        quickly, this number will go up--if not, it will go down.  If\n        it reaches zero, the federation is conquered and you lose.\n\nStatus information is free--it uses no time or energy, and if you are\nin battle, the Klingons are not given another chance to hit you.\n\nStatus information can also be obtained by doing a short-range scan.\nSee the SRSCAN command for details.\n\nEach item of information can be obtained singly by requesting it.\nSee REQUEST command for details.'}getStatusText(e=!0){if(e){let e=this.player.collider,t=100*e.health/e.maxHealth,{qX:i,qY:n,sX:a,sY:s}=this.player.gameObject.getLocation(),r=`${i} - ${n}; ${a} - ${s}`,o=["Life Support","NA"];o=this.player.lifeSupport.isOk()?["Life Support","ACTIVE"]:["Life Support",`DAMAGED, reserves = ${this.player.lifeSupport.reserves.toFixed(1)}`];let h=["Warp Factor",`${this.player.warpEngines.warpFactor.toFixed(1)}`],l=this.player.powerGrid,d=100*l.energy/l.capacity,c=["Energy",`${l.energy.toFixed(2)}, ${d.toFixed(1)}%`],m=["Torpedoes",`${this.player.photons.getTorpedoCount()}`],u=["Shields",`${this.player.shields.printInfo()}`],p=["Klingons Left",`${this.galaxy.container.getCountOfGameObjects(ae)}`],g=["Time Left",`${this.game.timeRemaining.toFixed(2)}`],f=[["Stardate",this.game.clock.starDate.toFixed(1)],["Condition",this.player.printCondition()],["Hull Integrity",`${e.health.toFixed(2)}, ${t.toFixed(1)}%`],["Position",r],o,h,c,m,u,p,g];return this.terminal.formatGrid(f,!1,null,!0).map(e=>e.join("   "))}let t=`Stardate\t${this.game.clock.starDate.toFixed(1)}`,i=`Condition\t${this.player.printCondition()}`,n=this.player.collider,a=100*n.health/n.maxHealth,s=`Hull Integrity\t${n.health.toFixed(2)}, ${a.toFixed(1)}%`,{qX:r,qY:o,sX:h,sY:l}=this.player.gameObject.getLocation(),d=`${r} - ${o}; ${h} - ${l}`,c="Life Support NA";c=this.player.lifeSupport.isOk()?"Life Support\tACTIVE":`Life Support\tDAMAGED, reserves = ${this.player.lifeSupport.reserves.toFixed(1)}`;let m=`Warp Factor\t${this.player.warpEngines.warpFactor.toFixed(1)}`,u=this.player.powerGrid,p=100*u.energy/u.capacity;return[t,i,d,c,m,`Energy\t\t${u.energy.toFixed(2)}, ${p.toFixed(1)}%`,s,`Torpedoes\t${this.player.photons.getTorpedoCount()}`,`Shields\t\t${this.player.shields.printInfo()}`,`Klingons Left\t${this.galaxy.container.getCountOfGameObjects(ae)}`,`Time Left\t${this.game.timeRemaining.toFixed(2)}`]}run(){this.terminal.newLine(),this.terminal.echo(this.getStatusText().join("\n"))}}class We extends De{constructor(e,t,i){super("req","request","request info",Le),this.terminal=t,this.game=e,this.statusCommand=i,this.arguments=1,this._info="\nFull command:  REQUEST [ITEM]\n\nThis command allows you to get any single piece of information from\nthe [STATUS] command.  [ITEM] specifies which information as follows:\n\n INFORMATION       NAME OF [ITEM]           SHORTEST ABBREVIATION\n\n STARDATE              DATE                                D\n CONDITION             CONDITION                           C\n POSITION              POSITION                            P\n LIFE SUPPORT          LSUPPORT                            L\n WARP FACTOR           WARPFACTOR                          W\n ENERGY                ENERGY                              E\n TORPEDOES             TORPEDOES                           T\n SHIELDS               SHIELDS                             S\n KLINGONS LEFT         KLINGONS                            K\n TIME LEFT             TIME                                TI"}async run(){let e=this.terminal.getArguments()[0];e||(e=await this.terminal.ask("Information desired? "));let t,i=this.statusCommand.getStatusText(),n=Te("date","d"),a=Te("condition","c"),s=Te("position","p"),r=Te("lsupport","l"),o=Te("warpfactor","w"),h=Te("energy","e"),l=Te("hull","health","h"),d=Te("torpedoes","t"),c=Te("shields","s"),m=Te("klingons","s"),u=Te("time","ti");t=n.test(e)?i[0]:a.test(e)?i[1]:s.test(e)?i[2]:r.test(e)?i[3]:o.test(e)?i[4]:h.test(e)?i[5]:l.test(e)?i[6]:d.test(e)?i[7]:c.test(e)?i[8]:m.test(e)?i[9]:u.test(e)?i[10]:"UNRECOGNIZED REQUEST. Legal requests are:\n  date, condition, position, lsupport, warpfactor,\n  energy, torpedoes, shields, klingons, time.\n",this.terminal.echo(t)}}class Xe extends De{constructor(e,t,i,n){super("c","chart","star chart",Le),this.terminal=t,this.game=e,this.player=i,this.galaxy=n,this.regex=_e("c","chart","star chart"),this.addPadding=!1,this.showAll=!1,this._info="\n    The chart looks like an 8 by 8 array of numbers.  These numbers are\n    interpreted exactly as they are on a long-range scan. A period (.) in\n    place of a digit means you do not know that information yet.  For\n    example, ... means you know nothing about the quadrant, while .1.\n    means you know it contains a base, but an unknown number of Klingons\n    and stars.\n\n    Looking at the star chart is a free operation.  It costs neither time\n    nor energy, and can be done safely whether in or out of battle."}makeChartText(){let e=[];for(let t=0;t<this.galaxy.length;t++){let i=this.galaxy.getRow(t),n=[];i.forEach(e=>{if(this.showAll){let t=`${e.hasSupernova?"1":"."}${e.container.getCountOfGameObjects(ae)}${e.container.getCountOfGameObjects(le)}${e.container.getCountOfGameObjects(de)}`;n.push(t)}try{let t=this.player.starChart.getInfo(e);n.push(t.print())}catch(e){n.push("-1")}}),e.push(n)}e.forEach((e,t)=>{e.unshift(`${t+1} -`),e.push("-")});let t=[" "],i=e[0].length;for(let e=1;e<i-1;e++)t.push(`  ${e} `);let n=[" "];for(let e=1;e<i-1;e++)n.push("----");return e.unshift(n),e.unshift(t),this.terminal.formatGrid(e).map(e=>e.join("  ")).join("\n")}run(){this.addPadding&&this.terminal.newLine(),this.terminal.echo("STAR CHART FOR THE KNOWN GALAXY"),this.addPadding&&this.terminal.newLine(),this.terminal.newLine(),this.terminal.printLine(this.makeChartText()),this.terminal.printLine(),this.terminal.printLine("thousands digit:   supernova\nhundreds digit:    Klingons\ntens digit:        starbases\nones digit:        stars\nperiod (.):        digit not known"),this.terminal.printLine();this.player.gameObject.quadrant;this.terminal.printLine(`Enterprise is currently in ${this.player.gameObject.printQuadrantLocation()}`),this.addPadding&&this.terminal.newLine()}}class ze extends De{constructor(e,t,i,n,a){super("s","srscan","short range scan",Le),this.terminal=t,this.game=e,this.player=i,this.chartCommand=n,this.statusCommand=a,this.options={no:{abbreviation:"n",name:"no",description:"don't display status information"},chart:{abbreviation:"c",name:"no",description:"display star chart"}},this.deviceUsed=[C],this.addPadding=!1,this._info='\nFull commands:  SRSCAN\n                SRSCAN NO\n                SRSCAN CHART\nThe short-range scan gives you a considerable amount of information\nabout the quadrant your starship is in.  A short-range scan is best\ndescribed by an example.\n\n         1 2 3 4 5 6 7 8 9 10\n      1  * . . . . R . . . .  Stardate      2516.3\n      2  . . . E . . . . . .  Condition     RED\n      3  . . . . . * . B . .  Position      1 - 5, 4 - 2\n      4  . . . S . . . . . .  Life Support  DAMAGED, Reserves=2.30\n      5  . . . . . . . K . .  Warp Factor   5.0\n      6  . K .   . . . . * .  Energy        2176.24\n      7  . . . . . P . . . .  Torpedoes     3\n      8  . . . . * . . . . .  Shields       UP, 42% 1050.0 units\n      9  . * . . * . . . C .  Klingons Left 12\n     10  . . . . . . . . . .  Time Left     3.72\n\n\nThe left part is a picture of the quadrant.  The E at sector 4 - 2\nrepresents the Enterprise; the B at sector 8 - 3 is a starbase.\nThere are ordinary Klingons (K) at sectors 8 - 5 and 2 - 6, and a\nKlingon Commander (C) at 9 - 9.  The (GULP) "Super-commander" (S) is\noccupies sector 4 - 4, and a Romulan (R) is at 6 - 1.  A planet (P)\nis at sector 6 - 7.  There are also a large number of stars (*). The\nperiods (.) are just empty space--they are printed to help you get\nyour bearings.  Sector 6 - 4 contains a black hole ( ).\n\nThe information on the right is assorted status information. You can\nget this alone with the STATUS command.  The status information will\nbe absent if you type "N" after SRSCAN.  Otherwise status information\nwill be presented.\n\nIf you type "C" after SRSCAN, you will be given a short-range scan\nand a Star Chart.\n\nShort-range scans are free.  That is, they use up no energy and no\ntime.  If you are in battle, doing a short-range scan does not give\nthe enemies another chance to hit you.  You can safely do a\nshort-range scan anytime you like.'}objectToText(e){return e?e instanceof se?"K":e instanceof re?"C":e instanceof oe?"S":e instanceof he?"R":e instanceof ve?"E":e instanceof de?"*":e instanceof Ce?"P":e instanceof le?"B":e instanceof Ee?" ":"?":"."}async run(){let e=this.player.deviceContainer.getDevice(C);if(!e)return void this.terminal.printLine("Captain we don't have sensors!");let t=Te("n","no"),i=!this.terminal.hasOption(t),n=Te("c","chart"),a=this.terminal.hasOption(n),s=this.player.gameObject.quadrant,r=[];if(e.isDamaged()){for(let e=0;e<s.sectors.length;e++){let t=[];s.sectors[e].forEach(e=>{t.push("-")}),r.push(t)}this.player.gameObject.sector.getAdjacentSectors(!0).forEach(e=>{let t=e.container.getAllGameObjects()[0];r[e.y][e.x]=this.objectToText(t)})}else{this.player.starChart.shortRangeScan(s);for(let e=0;e<s.sectors.length;e++){let t=[];s.sectors[e].forEach(e=>{let i=e.container.getAllGameObjects()[0];t.push(this.objectToText(i))}),r.push(t)}}r.forEach((e,t)=>{e.unshift(`${t+1}`)});let o=[" "],h=r[0].length;for(let e=1;e<h;e++)o.push(`${e}`);if(r.unshift(o),r=this.terminal.formatGrid(r),this.addPadding&&this.terminal.newLine(),this.terminal.printLine("CHART OF THE CURRENT QUADRANT"),this.terminal.newLine(),i){r=r.map(e=>e.join(" ")),this.statusCommand.getStatusText().forEach((e,t)=>{r[t]+="  "+e});let e=r.join("\n");this.terminal.echo(e)}else{let e=this.terminal.joinGrid(this.terminal.formatGrid(r)," ");this.terminal.printLine(e)}a&&(this.terminal.echo("\n\n"),this.terminal.echo(this.chartCommand.makeChartText())),this.addPadding&&this.terminal.newLine(),this.terminal.newLine(),this.terminal.printLine("E = Enterprise"),this.terminal.printLine("K = klingon; C = commander; S = super commander; R = romulan;"),this.terminal.printLine(". = nothing; * = star; empty = black hole."),this.terminal.printLine("p = planet; b = base;"),this.addPadding&&this.terminal.newLine()}}class Ve extends De{constructor(e,t,i,n){super("l","lrscan","long range scan",Le),this.terminal=t,this.game=e,this.player=i,this.galaxy=n,this._info='\nA long-range scan gives you general information about where you are\nand what is around you.  Here is an example output.\n\n    Long-range scan for Quadrant 1 - 5\n       -1  107  103\n       -1  316    5\n       -1  105 1000\n\nThis scan says that you are in row 5, column 1 of the 8 by 8 galaxy.\nThe numbers in the scan indicate how many of each kind of thing there\nis in your quadrant and all adjacent quadrants.  The digits are\ninterpreted as follows.\n\n    Thousands digit:  1000 indicates a supernova (only)\n    Hundreds digit:   number of Klingons present\n    Tens digit:       number of starbases present\n    Ones digit:       number of stars present\n    -1 :              Outside of galaxy\n\nFor example, in your quadrant (1 - 5) the number is 316, which\nindicates 3 Klingons, 1 starbase, and 6 stars.  The long-range\nscanner does not distinguish between ordinary Klingons and Klingon\ncommand ships.  If there is a supernova, as in the quadrant below and\nto your right (quadrant 2 - 6), there is nothing else in the\nquadrant.\n\nRomulans possess a "cloaking device" which prevents their detection\nby long-range scan.  Because of this fact, Starfleet Command is never\nsure how many Romulans are "out there".  When you kill the last\nKlingon, the remaining Romulans surrender to the Federation.\n\nPlanets are also undetectable by long-range scan.  The only way to\ndetect a planet is to find it in your current quadrant with the\nshort-range sensors.\n\nSince you are in column 1, there are no quadrants to your left. The\nminus ones indicate the negative energy barrier at the edge of the\ngalaxy, which you are not permitted to cross.\n\nLong-range scans are free.  They use up no energy or time, and can be\ndone safely regardless of battle conditions.'}get info(){return this.makeInfo()+"\n"+this._info}run(){if(!this.player.longRangeSensors||this.player.longRangeSensors.isDamaged())return void this.terminal.printLine("Spock - Long Range Sensors are damaged, Captain.");if(!(this.player.starChart&&this.player.starChart instanceof me))return void this.terminal.printLine("Spock - This is embarrassing but I've misplaced the Star Chart Captain.");let e=this.player.gameObject.quadrant,t=[],i=this.galaxy.getQuadrantsAdjacencyMatrix(e);this.player.starChart.longRangeScan(i.flat().filter(e=>e));for(let e=0;e<i.length;e++){let n=i[e],a=[];for(let e=0;e<n.length;e++){let t=n[e];if(t)try{let e=this.player.starChart.getInfo(t);a.push(e.print())}catch(e){a.push("-1")}else a.push("-1")}t.push(a)}this.terminal.printLine("Digits: Thousands = # supernova; Hundreds = # klingon; Tens = # star bases; ones = # stars."),this.terminal.printLine(`Long-range scan for ${this.player.gameObject.printQuadrantLocation()}`),this.terminal.skipLine(1),this.terminal.printLine(this.terminal.joinGrid(this.terminal.formatGrid(t),"    "))}}class Je extends De{constructor(e,t,i,n){super("d","dock","dock at starbase"),this.game=e,this.terminal=t,this.player=i,this.galaxy=n,this.abbreviation="d",this.name="dock",this.fullName="dock at starbase",this.regex=_e(this.abbreviation,this.name,this.fullName),this.deviceUsed="",this.options={},this.type=Le,this._info="\nYou may dock your starship whenever you are in one of the eight\nsector positions immediately adjacent to a starbase.  When you dock,\nyour starship is resupplied with energy, shield energy, and photon\ntorpedoes."}run(){if(this.player.docked)return void this.terminal.echo("Already docked.");let e=this.player.gameObject.sector,t=!1,i=this.player.gameObject.quadrant.getSectorsAdjacentTo(e);for(let e=0;e<i.length;e++){let n=i[e].container.getGameObjectsOfType(le)[0];if(n){t=!0,this.player.dock(n),this.terminal.echo("Docked.");break}}t||this.terminal.echo(`${this.player.name} is not adjacent to a starbase.`)}}class Ze extends De{constructor(e,t,i){super("pr","probe","launch probe",Me),this.galaxy=i,this.terminal=e,this.player=t,this.addOption("armed","armed","a"),this._info="\nFull command:  PROBE [ARMED] [quadrant x] [quadrant y]\n\nThe Enterprise carries a limited number of Long Range Probes. These\nfly to the end of the galaxy and report back a count of the number of\nimportant things found in each quadrant through which it went. The\nprobe flies at warp 10, and therefore uses time during its flight.\nResults are reported immediately via subspace radio and are recorded\nin the star chart.\n\nThe probe can also be armed with a NOVAMAX warhead. When launched\nwith the warhead armed, the probe flies the same except as soon as it\nreaches the target location, it detonates the warhead in the heart of\na star, causing a supernova and destroying everything in the\nquadrant. It then flies no further. There must be a star in the\ntarget quadrant for the NOVAMAX to function.\n\nThe probe can fly around objects in a galaxy, but is destroyed if it\nenters a quadrant containing a supernova, or if it leaves the galaxy."}run(){if(this.player.probeLauncher.isDamaged())return void this.terminal.printLine("Probe Launcher is damaged");let e,t,i=this.terminal.getArguments(),{armed:n}=this.getOption(i),a=[];for(let e=0;e<i.length;e++){let t=Number.parseInt(i[e]);Number.isNaN(t)||a.push(t)}if(a.length<2)return void this.terminal.printLine("Beg pardon, Captain?");e=a[0],t=a[1];let s=l.convert(e,t,5,5,this.galaxy);if(!this.galaxy.areValidCoordinates(s))return void this.terminal.printLine("Beg pardon, Captain?");let r=this.galaxy.getQuadrant(s);this.player.probeLauncher.launchProbe(s,r,n)}}const et=1,tt=2,it=4,nt=1,at=2,st=3,rt=4,ot=5,ht=1,lt=2,dt=3,ct=!0;class mt{constructor(e,t,i,n,a){this.terminal=e,this.pane1=t,this.pane2=i,this.screen=n,this.screen.addSizeChangeCallback(this.onScreenSizeChange.bind(this)),this.hideInfoPanes(),this.service=new r,this.shipBuilder=new ie,this.galaxy=new p(8,8,10,10,!0),this.commands=[],this.length=it,this.clock=x,this.clock.init(100*(31*Math.random()+20)),this.onElapseTime=this.onElapseTime.bind(this),this.clock.register(this.onElapseTime),this.timeRemaining=7,this.skill=st,this.secretPassword=null,this.player=new ve(this.terminal,this.clock,this.galaxy);let s=this.galaxy.getRandomQuadrant(),o=s.getRandomSector();this.player.gameObject.placeIn(this.galaxy,s,o),this.setDifficulty(this.skill),this.resolveUserCommand=null,this.initialEnemies=null,this.initialKlingons=null,this.initialCommanders=null,this.initialSuperCommands=null,this.initialRomulans=null,this.fallenFoes=[],this.federationPowerRemaining=null}setDifficulty(e){switch(e){case nt:this.player.phasers.overheatThreshold=1500,this.shipBuilder.kHealth=40,this.shipBuilder.kEnergy=400,this.shipBuilder.kcHealth=100,this.shipBuilder.kcEnergy=1200,this.shipBuilder.kscHealth=400,this.shipBuilder.kscEnergy=1750,this.shipBuilder.rHealth=40,this.shipBuilder.rEnergy=700,W.setDeviceDamageRange(100,275);break;case at:this.player.phasers.overheatThreshold=1500,this.shipBuilder.kHealth=40,this.shipBuilder.kEnergy=400,this.shipBuilder.kcHealth=100,this.shipBuilder.kcEnergy=1200,this.shipBuilder.kscHealth=400,this.shipBuilder.kscEnergy=1750,this.shipBuilder.rHealth=40,this.shipBuilder.rEnergy=700,W.setDeviceDamageRange(80,275);break;case st:this.player.phasers.overheatThreshold=1200,this.shipBuilder.kHealth=100,this.shipBuilder.kEnergy=700,this.shipBuilder.kcHealth=200,this.shipBuilder.kcEnergy=1500,this.shipBuilder.kscHealth=600,this.shipBuilder.kscEnergy=2500,this.shipBuilder.rHealth=100,this.shipBuilder.rEnergy=700,W.setDeviceDamageRange(50,250);break;case rt:this.player.phasers.overheatThreshold=1e3,this.shipBuilder.kHealth=100,this.shipBuilder.kEnergy=700,this.shipBuilder.kcHealth=200,this.shipBuilder.kcEnergy=1500,this.shipBuilder.kscHealth=600,this.shipBuilder.kscEnergy=2500,this.shipBuilder.rHealth=100,this.shipBuilder.rEnergy=700,W.setDeviceDamageRange(50,200);break;case ot:this.player.phasers.overheatThreshold=800,this.shipBuilder.kHealth=100,this.shipBuilder.kEnergy=700,this.shipBuilder.kcHealth=200,this.shipBuilder.kcEnergy=1500,this.shipBuilder.kscHealth=600,this.shipBuilder.kscEnergy=2500,this.shipBuilder.rHealth=100,this.shipBuilder.rEnergy=700,W.setDeviceDamageRange(50,200);break;default:return void console.error("invalid skill setting.",e)}this.skill=e}calculateKlingonStrength(){return this.galaxy.container.getCountOfGameObjects(se)+4*this.galaxy.container.getCountOfGameObjects(re)+10*this.galaxy.container.getCountOfGameObjects(oe)}decrementFederationPower(e){this.federationPowerRemaining-=e*this.calculateKlingonStrength()}recalculateTimeRemaining(){this.timeRemaining=this.federationPowerRemaining/this.calculateKlingonStrength()}onElapseTime(e){this.decrementFederationPower(e),this.recalculateTimeRemaining()}calculateScore(){let e=this.getNumberOfTypeKilled(ae),t=10*this.getNumberOfTypeKilled(se)+50*this.getNumberOfTypeKilled(re)+200*this.getNumberOfTypeKilled(oe);t+=20*this.getNumberOfTypeKilled(he);let i=this.clock.getElapsedTime();return 0===i&&(i=1),t+=500*(e/i),this.isVictory()&&(t+=100*this.skill),this.player.isDead()&&(t-=200),t}getGameLengthStr(){switch(this.length){case et:return"short";case tt:return"medium";case it:return"long";default:console.error("unknown game length")}}getDifficultyStr(){switch(this.skill){case nt:return"novice";case at:return"fair";case st:return"good";case rt:return"expert";case ot:return"emeritus";default:console.error("unknown difficulty")}}killEnemy(e){this.fallenFoes.push(e)}getNumberOfTypeKilled(e){return this.fallenFoes.reduce((t,i)=>(i instanceof e&&t++,t),0)}async onScreenSizeChange(){this.screen.isSmallScreen||this.screen.isTinyScreen?(this.scanCommand.active=!0,this.chartCommand.active=!0,this.statusCommand.active=!0,this.terminal.registerCommand(this.scanCommand),this.terminal.registerCommand(this.chartCommand),this.terminal.registerCommand(this.statusCommand)):this.screen.isMediumScreen?(this.scanCommand.active=!1,this.statusCommand.active=!1,this.chartCommand.active=!0,this.terminal.registerCommand(this.chartCommand),this.terminal.unregisterCommand(this.statusCommand),this.terminal.unregisterCommand(this.scanCommand)):this.screen.isLargeScreen&&(this.scanCommand.active=!1,this.chartCommand.active=!1,this.statusCommand.active=!1,this.terminal.unregisterCommand(this.scanCommand),this.terminal.unregisterCommand(this.statusCommand),this.terminal.unregisterCommand(this.chartCommand)),await this.render()}async render(){this.screen.isSmallScreen||(this.screen.isMediumScreen?await this.renderPane1():this.screen.isLargeScreen&&(await this.renderPane1(),await this.renderPane2()))}getActiveCommands(){return this.commands.filter(e=>e.active)}hideInfoPanes(){this.pane1.$el.hide(),this.pane2.$el.hide()}showInfoPanes(){this.screen.isSmallScreen||(this.screen.isMediumScreen?this.pane1.$el.show():this.screen.isLargeScreen&&(this.pane1.$el.show(),this.pane2.$el.show()))}async renderPane1(){this.pane1.clearAll(),await this.pane1Command.run(),this.pane1.print()}async renderPane2(){this.pane2.clearAll(),await this.pane2Command.run(),this.pane2.print()}setup(){this.makeCommands(),this.makeStars(),this.makePlanets(),this.makeBases(),this.makeBlackHoles(),this.makeEnemies(),this.timeRemaining=7*this.length,this.federationPowerRemaining=this.calculateKlingonStrength()*this.timeRemaining,this.player.starChart.showStarBases(),this.registerCommands(),this.showInfoPanes(),this.onScreenSizeChange(),this.loop()}start(){this.setup();let e=this.galaxy.container.getGameObjectsOfType(le),t=e.map(e=>{let{qX:t,qY:i}=e.gameObject.getLocation();return`${t} - ${i}`}).join("   "),i=`It is stardate ${this.clock.starDate.toFixed(0)}. Federation is being attacked by\na deadly Klingon invasion force. As captain of the United Starship U.S.S. Enterprise, it is your mission to seek out and destroy this invasion force of ${this.numberOfKlingons} klingons.\n\nThe Klingons will overpower the Federation in ${this.timeRemaining} days, every Klingon you destroy will weaken this invasion force and buy us more time.\n\nYou will have ${e.length} supporting starbases.\nStarbase locations-   ${t}\n\nThe Enterprise is currently in ${this.player.gameObject.printLocation()}\n\n[TRY TYPING "COMMANDS" and "HELP HELP" TO LEARN HOW TO PLAY]\n\nGood Luck!\n`;this.terminal.$terminal.echo(i)}isInCombat(){return this.player.gameObject.quadrant.container.getCountOfGameObjects(ne)>0}async loop(){let e=!1;for(;!this.isDefeat()&&!this.isVictory();){let t=!0,i=!1,n=!1,a=!1;for(;t&&!this.isVictory()&&!this.isDefeat();){let s;await this.render();try{s=(await this.terminal.runUserCommand()).command,await s.run(),this.player.docked&&this.player.rechargeEverything()}catch(e){this.terminal.printLine(e.message||"Can't do that, Captain!")}this.terminal.print(),s.isInfoCommand()||s.isInstantShipCommand()||(this.recalculateTimeRemaining(),n=(a=this.isInCombat())&&!e,a?s.isMoveCommand()?(!i&&e||(t=!1),i=!0):t=(s.isAttackCommand(),!1):i=!1)}if(this.isVictory()||this.isDefeat())break;a&&!n&&this.player.gameObject.quadrant.container.getGameObjectsOfType(ne).forEach(e=>{e.ai.takeTurn()}),e=a,this.terminal.print(),this.recalculateTimeRemaining()}let t=this.isVictory(),i=this.isDefeat(),n=this.calculateScore();this.service.createGameLog(n,t),this.terminal.skipLine(2),t?(this.terminal.printLine("You win!"),this.terminal.printLine(`It is stardate ${this.clock.starDate.toFixed(1)}.`),this.terminal.print()):i&&(this.terminal.printLine("You lose..."),this.terminal.printLine(`It is stardate ${this.clock.starDate.toFixed(1)}.`),this.timeRemaining<=0?this.terminal.printLine("Your time has run out and the Federation has been conquered.\nWith your starship confiscated by the Klingon High Command, you relocate to a mining facility and learn to love gagh."):this.player.isDead()&&(this.terminal.printLine("The Enterprise has been destroyed in battle."),this.terminal.skipLine(),this.terminal.printLine("Dulce et decorum est pro patria mori.\nThe Federation will be destroyed."),this.terminal.skipLine()),this.terminal.print()),this.terminal.silent=!1,new qe(this,this.terminal,this.player).run({}),this.terminal.print()}isDefeat(){return this.player.isDead()||this.timeRemaining<=0}isVictory(){return 0===this.galaxy.container.getCountOfGameObjects(ae)}showAllInfoOnChart(){this.pane2Command.showAll=!0}hideInfoFromChart(){this.pane2Command.showAll=!1}makeCommands(){this.commands=[],this.commands.push(new Ze(this.terminal,this.player,this.galaxy)),this.commands.push(new Ae(this.terminal,this.player)),this.chartCommand=new Xe(this,this.terminal,this.player,this.galaxy);let e=new Ye(this,this.terminal);this.statusCommand=new Ue(this,this.terminal,this.player,this.galaxy),this.commands.push(new Ke(this,this.terminal,this.player)),this.commands.push(e),this.commands.push(this.statusCommand),this.commands.push(new We(this,this.terminal,this.statusCommand)),this.commands.push(this.chartCommand),this.scanCommand=new ze(this,this.terminal,this.player,this.chartCommand,this.statusCommand),this.commands.push(this.scanCommand),this.commands.push(new Ve(this,this.terminal,this.player,this.galaxy)),this.commands.push(new Be(this,this.terminal,e)),this.commands.push(new Qe(this,this.terminal,this.player,this.galaxy)),this.commands.push(new He(this,this.terminal,this.player)),this.commands.push(new Je(this,this.terminal,this.player,this.galaxy)),this.commands.push(new Fe(this,this.terminal,this.player)),this.commands.push(new Ge(this,this.terminal,this.galaxy,this.player)),this.commands.push(new qe(this,this.terminal,this.player)),this.commands.push(new Ne(this.terminal,this.player)),this.commands.push(new Pe(this,this.terminal,this.player)),this.commands.push(new Ie(this,this.terminal));let t=new Ue(this,this.pane1,this.player,this.galaxy),i=new Xe(this,this.pane2,this.player,this.galaxy);this.pane1Command=new ze(this,this.pane1,this.player,i,t),this.pane2Command=i}registerCommands(){this.commands.forEach(e=>{this.terminal.registerCommand(e)})}makeBlackHoles(){this.galaxy.quadrants.forEach(e=>{e.forEach(e=>{for(let t=0;t<3;t++){let t=e.getRandomEmptySector();(new Ee).gameObject.placeIn(this.galaxy,e,t)}})})}makeStars(){this.galaxy.quadrants.forEach((e,t)=>{e.forEach((e,t)=>{let i=Math.round(8*Math.random()+1);for(let t=0;t<i;t++){let t=new de,i=e.getRandomEmptySector();i.container.isEmpty()&&t.gameObject.placeIn(this.galaxy,i.quadrant,i)}})})}makePlanets(){let e=Math.round(5+10/3*Math.random());console.log(`number of planets = ${e}`);for(let t=0;t<e;t++){let e;do{e=this.galaxy.getRandomQuadrant()}while(e.container.getCountOfGameObjects(Ce)>0);let t=e.getRandomEmptySector(),i=Ce.randomlyGenerate();i.gameObject.placeIn(this.galaxy,e,t),console.log(`planet at ${i.gameObject.printLocation()}`)}}makeBases(){let e=Math.round(3*Math.random()+2),t=[];for(;t.length<e;){let i=this.galaxy.getRandomQuadrant();if(0===i.container.getCountOfGameObjects(le)){let n=!1;for(let a=0;a<t.length;a++){let s=t[a].gameObject.quadrant,r=i.x-s.x,o=i.y-s.y;if(r*r+o*o<6*(6-e)&&Math.random()<.75){n=!0;break}}if(!n){console.log("making starbase");let e=new le,n=i.getRandomEmptySector();e.gameObject.placeIn(this.galaxy,i,n),t.push(e)}}}}makeEnemies(){let e=Math.round(14*this.length*((this.skill+1-2*Math.random())*this.skill*.1+.15));console.log(`number of enemies = ${e}`);let t=Math.round(this.skill+.0625*e*Math.random());t=Math.min(10,t);let i=this.skill>at?1:0,n=e-t-i;this.numberOfKlingons=n;let a=Math.round(2*Math.random()*this.skill);this.initialEnemies=e,this.initialKlingons=n,this.initialCommanders=t,this.initialSuperCommands=i,this.initialRomulans=a,this.makeKlingons(n),this.makeKlingonCommanders(t),this.makeKlingonSuperCommanders(i),this.makeRomulans(a)}makeKlingonSuperCommanders(e){for(let t=0;t<e;t++){let e;if(this.skill>=st)do{e=this.galaxy.getRandomQuadrant()}while(0===e.container.getCountOfGameObjects(ae)||this.player.gameObject.quadrant===e);else if(this.skill>=at)do{e=this.galaxy.getRandomQuadrant()}while(this.player.gameObject.quadrant===e);else do{e=this.galaxy.getRandomQuadrant()}while(e.container.getCountOfGameObjects(ae)>0||this.player.gameObject.quadrant===e);console.log("placing super commander");let t=e.getRandomEmptySector();this.shipBuilder.makeKlingonSuperCommander(this.galaxy,this.player,this,e,t)}}makeKlingonCommanders(e){for(let t=0;t<e;t++){let e;if(this.skill>=st)do{e=this.galaxy.getRandomQuadrant()}while(0===e.container.getCountOfGameObjects(ae)||this.player.gameObject.quadrant===e);else if(this.skill>=at)do{e=this.galaxy.getRandomQuadrant()}while(this.player.gameObject.quadrant===e);else do{e=this.galaxy.getRandomQuadrant()}while(e.container.getCountOfGameObjects(ae)>0||this.player.gameObject.quadrant===e);console.log("placing commander");let t=e.getRandomEmptySector();this.shipBuilder.makeKlingonCommander(this.galaxy,this.player,this,e,t)}}makeKlingons(e){let t=Math.min(.25*this.skill*(9-this.length)+1,9),i=this.galaxy.quadrants.flat();for(i=i.filter(e=>e!==this.player.gameObject.quadrant);e>0;){let n=Math.round(Math.random()*(i.length-1)),a=i.splice(n,1)[0];if(!a)break;let s=Math.random(),r=Math.round((1-s*s)*t);r=Math.min(r,e);for(let t=0;t<r&&!a.isFull();t++){let t=a.getRandomEmptySector();console.log("placing klingon"),this.shipBuilder.makeKlingon(this.galaxy,this.player,this,a,t),e--}}}makeRomulans(e){for(let t=0;t<e;t++){let e;do{e=this.galaxy.getRandomQuadrant()}while(this.player.gameObject.quadrant===e);let t=e.getRandomEmptySector();console.log("placing romulan"),this.shipBuilder.makeRomulan(this.galaxy,this.player,this,e,t)}}}class ut{constructor(e){this.mode=null,this.length=null,this.difficulty=null,this.secretPassword=null,this.tournamentNumber=null,this.terminal=e,this.startGamePs="COMMAND>",this.game=null}skipLine(e){var t="";for(let i=0;i<e;i++)t+="\n";this.terminal.$terminal.echo(t)}start(){this.mode=null,this.length=null,this.difficulty=null,this.secretPassword=null,this.skipLine(2),this.terminal.$terminal.echo(`Latest update- ${ft}.`),this.skipLine(1),this.ask("Would you like a regular, tournament, or frozen game?",["regular","tournament","frozen"],this.chooseMode.bind(this))}chooseMode(e){e=e.toLowerCase(),/regular/.test(e)?(this.mode=ht,this.skipLine(1),this.ask("Would you like a Short, Medium, or Long game? ",["short","medium","long"],this.chooseLength.bind(this))):/tournament/.test(e)?(this.mode=lt,this.terminal.$terminal.echo("Sorry that's not implemented."),this.start()):/frozen/.test(e)&&(this.mode=dt,this.terminal.$terminal.echo("Sorry that's not implemented."),this.start())}chooseLength(e){e=e.toLowerCase(),/short/.test(e)?this.length=et:/medium/.test(e)?this.length=tt:/long/.test(e)&&(this.length=it),this.ask("Are you a Novice, Fair, Good, Expert, or Emeritus player? ",["novice","fair","good","expert","emeritus"],this.chooseDifficulty.bind(this))}chooseDifficulty(e){e=e.toLowerCase(),/novice/.test(e)?this.difficulty=nt:/fair/.test(e)?this.difficulty=at:/good/.test(e)?this.difficulty=st:/expert/.test(e)?this.difficulty=rt:/emeritus/.test(e)&&(this.difficulty=ot),this.prompt("Please type in a secret password (9 characters maximum)-",this.chooseSecretPassword.bind(this),this.startGamePs)}chooseSecretPassword(e){this.secretPassword=e,this.finish()}finish(){this.terminal.$terminal.change_settings({ps:this.startGamePs}),this.game.setDifficulty(this.difficulty),this.game.length=this.length,this.game.secretPassword=this.secretPassword,this.game.start()}prompt(e,t,i){this.terminal.$terminal.echo(e),this.terminal.$terminal.register("command",{name:"ask",method:e=>{let n=this.terminal.$terminal.get_input();if(this.terminal.$terminal.unregister("command","ask"),setTimeout(()=>t(n),10),i)return{ps:i}},regex:new RegExp("[sS]*","i")})}ask(e,t,i){this.terminal.$terminal.echo(e),this.terminal.$terminal.register("command",{name:"ask",method:e=>{let t=this.terminal.$terminal.get_input();this.terminal.$terminal.unregister("command","ask"),setTimeout(()=>i(t),10)},regex:new RegExp(`(${t.join("|")})`,"i")})}}class pt{constructor(){this.isTinyScreen=!1,this.isSmallScreen=!1,this.isMediumScreen=!0,this.isLargeScreen=!1,this.receivedNotificationCount=0,matchMedia?(this._isTinyScreenQuery=matchMedia("(max-width: 767px)"),this._isSmallScreenQuery=matchMedia("(min-width: 768px) and (max-width: 991px)"),this._isMediumScreenQuery=matchMedia("(min-width: 992px) and (max-width: 1299px)"),this._isLargeScreenQuery=matchMedia("(min-width: 1300px)"),this.handleSizeChange=this.handleSizeChange.bind(this),this._isTinyScreenQuery.addEventListener?(this._isTinyScreenQuery.addEventListener("change",this.handleSizeChange),this._isSmallScreenQuery.addEventListener("change",this.handleSizeChange),this._isMediumScreenQuery.addEventListener("change",this.handleSizeChange),this._isLargeScreenQuery.addEventListener("change",this.handleSizeChange)):this._isTinyScreenQuery.addListener?(console.error("mediaQuery.addEventListener not supported, using addListener"),this._isTinyScreenQuery.addListener(this.handleSizeChange),this._isSmallScreenQuery.addListener(this.handleSizeChange),this._isMediumScreenQuery.addListener(this.handleSizeChange),this._isLargeScreenQuery.addListener(this.handleSizeChange)):(setInterval(this.pollForSizeChange.bind(this),1e3),console.error("matchMedia.addListener not supported, resorting to polling every second")),this.determineScreenSize(),this.onSizeChangeCallbacks=[]):console.error("match media not supported....abandon ship")}pollForSizeChange(){let e=this.isTinyScreen,t=this.isSmallScreen,i=this.isMediumScreen,n=this.isLargeScreen;this.determineScreenSize(),e===this.isTinyScreen&&t===this.isSmallScreen&&i===this.isMediumScreen&&n===this.isLargeScreen||this.onSizeChangeCallbacks.forEach(e=>e(this))}handleSizeChange(){this.receivedNotificationCount++,2===this.receivedNotificationCount&&(this.receivedNotificationCount=0,this.determineScreenSize(),this.onSizeChangeCallbacks.forEach(e=>e(this)))}determineScreenSize(){this.isTinyScreen=this._isTinyScreenQuery.matches,this.isSmallScreen=this._isSmallScreenQuery.matches,this.isMediumScreen=this._isMediumScreenQuery.matches,this.isLargeScreen=this._isLargeScreenQuery.matches}addSizeChangeCallback(e){this.onSizeChangeCallbacks.push(e)}}i.d(t,"DEBUG",(function(){return gt})),i.d(t,"LAST_UPDATED_AT",(function(){return ft})),new n.a("error").init();const gt=!1,ft="Nov 18 2019";$(document).ready((function(){(new a.a).init(),window.screen=new pt;f.init($("#main-pane"),"boring"),y.init($("#info-pane-1")),w.init($("#info-pane-2"));let e=new mt(f,y,w,screen),t=new ut(f);t.game=e,f.silent=!1,gt?(f.setPrompt("COMMAND>"),e.start(),window.game=e,window.terminal=f):t.start()}))}]);