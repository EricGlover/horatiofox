!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";t.a=function(e){const t=["error","warn","log"],n="warn";function i(){window.onerror=function(t,n,i,a,s){switch(e){case"error":throw console.error(t,n,i,a,s),s;case"log":console.log(t,n,i,a,s);break;case"warn":default:console.error(t,n,i,a,s)}!function(e){switch(e){case e instanceof EvalError:console.error("stop using eval you fuck");break;case e instanceof InternalError:console.error("looks like some JS code you made fucked up");break;default:console.error("I couldn't even figure what error type that was so no snarky comment for you, sir!")}}(s)}}return{register:i,init:function(){t.includes(e)||(console.error("logLevel must be one of the following : ",t,". Setting logLevel to ",n),e=n),i()}}}},function(e,t,n){"use strict";new(n(0).a)("error").init(),t.a=function(){function e(e){let t={};return e.serializeArray().forEach(e=>{t[e.name]=e.value}),t}function t(){window.location.href=window.location.origin}function n(e){let t=$("#sign-up");t.find("input").each((function(e,t){$(t).val("")})),t.modal("show"),t.find("#submit").off("click").on("click",a)}function i(e){let t=$("#login");t.find("input").each((function(e,t){$(t).val("")})),t.modal("show"),t.find("#login-btn").off("click").on("click",s)}function a(n){let i=$("#sign-up").find("form"),a=e(i),s=$("#submit-btn");s.addClass("loading"),i.find(".error.message").transition("hide"),fetch("/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(e=>{if(!e.ok)throw e;t()}).catch((async function(e){console.error(e),i.find(".error.message").transition("show")})).then(()=>s.removeClass("loading"))}function s(n){let i=$("#login").find("form"),a=e(i),s=$("#login-btn");s.addClass("loading"),i.find(".error.message").transition("hide"),fetch("/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}).then(e=>{if(!e.ok)throw e;t()}).catch(e=>{console.error(e),i.find(".error.message").transition("show")}).then(()=>s.removeClass("loading"))}function r(e){let n=$("#logout-btn");n.addClass("loading"),fetch("/logout",{method:"POST"}).then(e=>(console.log(e),e)).then(e=>{if(!e.ok)throw e;t()}).catch(e=>{console.error(e)}).then(()=>n.removeClass("loading"))}function o(e){e.stopPropagation(),this.value!==$("#sign-up input[name='password']").val()?$(this).closest(".field").addClass("error"):$(this).closest(".field").removeClass("error"),function(e){let t=$("#sign-up");e?t.find("#submit").removeClass("disabled"):t.find("#submit").addClass("disabled")}(function(){let e=$("#sign-up input[name='password']").val(),t=$("#sign-up input[name='confirm-password']").val();if(e!==t)return!1;return!0}())}function h(e){$(this).toggleClass("slash");let t=$(this).siblings("input");"password"===t.attr("type")?t.attr("type","text"):t.attr("type","password")}return{init:function(){!function(){let e=$("#sign-up");$("#sign-up-btn").on("click",n),$("#login-btn").on("click",i),$("#logout-btn").on("click",r),e.find("input[name='confirm-password']").on("input",o),$(".eye.slash").on("click",h),$(".message .close").off().on("click",(function(e){e.stopPropagation(),$(this).closest(".message").transition("fade")}))}()}}}},,,function(e,t){
/**
 * @file   : ptty.jquery.js
 * @ver    : 0.0.5 (beta)
 * @author : Pachanka <social@pachanka.org>
 * @url    : http://goto.pachanka.org/ptty/docs
 * @desc   : Ptty (Pseudo teletype). A terminal emulator plugin for jQuery.
 * @license: WTFPL Version 2. (http://www.wtfpl.net/)
 **/
!function(e){"use strict";e.fn.Ptty=function(t){var n={};return this.each((function(){var i=e(this),a={};window.commands=a;var s={},r={},o={},h={},l=[],c={ps:null,in:null,out:null,last:null,next:null,data:null},m=function(e){Object.getOwnPropertyNames(s);var t=!1,n=!1;return Object.entries(s).forEach(([i,a])=>{!t&&a.test(e)&&(n=i,t=!0)}),t?n:e},u=e.extend(!0,{ajax_options:{url:window.location.pathname,type:"POST"},param:"cmd",ps:"$",caret:"▮",caret_blink:800,native_css:!0,theme:"boring",native_cmds:!0,autocomplete:!0,history_max:800,autofocus:!0,before_cmd:!1,after_cmd:!1,i18n:{welcome:"Ptty (0.0.5 beta).<br> Type <b>help</b> to list the available commands.",error_not_found:"Command not found.",error_bad_method:"Invalid command method.",error_ajax:"Server error."}},t);n.get_terminal=function(e){return e?i.find(e):i},n.native_style=function(t,n){var i=t.attr("id");if(i=i?"#"+i:"."+t.attr("class").split(" ")[1],"boring"===n){var a=['.boring, .boring .prompt, .boring .content{ font-family: "Courier New", Courier, monospace; background-color: #111; color: #ddd; }',".boring .content{ padding: 15px 15px 0 15px; }",".boring .prompt{ padding: 0 15px 15px 15px; }",'.boring .loading span::after{content: "⚙"; color: #ddd; font-size: 10em; border-radius: 10em; opacity: 0.4;}',".boring .content ul{ margin: 0; }",".boring .prompt .input.show-caret{ color: #ddd; opacity: .85; }",".boring .prompt .input, .boring .prompt .input::before, .boring .prompt .input::after{ color: transparent; text-shadow:0 0 0 #ddd; }",".boring .content div .cmd_in .cmd_ps, .boring .prompt .input::before{ padding-right: 10px; }",".boring .content ul li{ list-style-type: none; }",".boring div.prompt div.input::after{ font-size: 2em; }",".boring div.prompt div.input, .boring div.content div div.cmd_in, .boring div.prompt div.input::before{ line-height: 2em; }"];a=a.join("\n"),e('<style id="ptty-boring-theme">'+a+"</style>").appendTo("head")}var s=[i+"{ position: relative; display: block; overflow-X: hidden; height: 100%; }","div.content div p{ margin: 0; }","div.content div{ clear: both; white-space:pre-wrap; word-wrap:break-word; }","div.content div ul{ padding: 0; white-space: normal }","div.content div ul li{ list-style: none; }","div.content div ul.sq-li li{ display: inline-block; text-align: center; padding: 10px; min-width: 5%; }","div.prompt div.input{ width: 100%; white-space:pre-wrap; word-wrap:break-word; cursor: default; outline: none;}","div.prompt div.input::before{ vertical-align: middle; content: attr(data-ps); }","div.prompt div.input::after{ visibility : visible; vertical-align: middle; content: attr(data-caret); margin-left:-0.15em;}","div.prompt div.input.blink::after{ visibility : hidden; }","div.prompt .hide{ position:absolute; top: -9999em; }","div.loading{ display: none; }","div.loading.working{ display: block; display:flex; justify-content: center; align-items: center;position: fixed;  width: inherit; height: inherit; }","div.loading span{ -webkit-animation: spin 4s linear infinite; -moz-animation: spin 4s linear infinite; -ms-animation: spin 4s linear infinite; -o-animation: spin 4s linear infinite; animation: spin 4s linear infinite; }"];s=s.join("\n "+i+" "),e('<style id="ptty-styles">'+(s+="@-moz-keyframes spin { 100% { -moz-transform: rotate(360deg); } }@-webkit-keyframes spin { 100% { -webkit-transform: rotate(360deg); } }@-ms-keyframes spin { 100% { -ms-transform: rotate(360deg); } }@-o-keyframes spin { 100% { -o-transform: rotate(360deg); } }@keyframes spin { 100% { transform: rotate(360deg); } }")+"</style>").appendTo("head")},n.native_commands=function(){n.register("command",{name:"clear",method:function(e){return e.last="",e.out="",e},options:[],help:"Cleans the screen leaving a new command prompt ready."}),n.register("callback",{name:"clear",method:function(e){return i.find(".content").html(""),e}}),n.register("command",{name:"history",method:function(e){if(e.hasOwnProperty("clear"))l=[],e.out="History cleared.";else if(l.length>0){e.out="<ul>";for(var t=0;t<l.length;t+=1)e.out+="<li>"+l[t]+"</li>";e.out+="</ul>"}return e},options:["clear"],help:"Shows list of typed in commands. Type <i>history clear</i> to clear your history."}),n.register("command",{name:"help",method:function(e){var t=Object.keys(a);if("string"==typeof e[1]&&e[1].length>0)if(e.hasOwnProperty("-a")||e.hasOwnProperty("--all")){e.out="<b>Available commands:</b></br></br><ul>";for(var n=0;n<t.length;n+=1)e.out+="<li><p><b>"+n+"</b> - ",e.out+=a[t[n]].help+"</p></br></li>";e.out+="</ul>\n"}else void 0!==a[e[1]]?(e.out="<b>"+e[1]+"</b> - ",""!==a[e[1]].help?e.out+=a[e[1]].help+"\n":e.out+="No help entry available.\n"):e.out='help: The "'+e[1]+'" option does not exist.\n';else{e.out='Use "help [comand name]" to display specific info about a command.</br>\n',e.out+='Available commands are:</br><ul class="sq-li">';for(n=0;n<t.length;n+=1)e.out+="<li>"+t[n]+"</li>";e.out+="</ul>\n"}return e},options:[1,"-a","--all"],help:"Displays a list of useful information. Usage: <i>help command-name</i> to show <i>command-name</i>'s help.<i>help -a</i> or <i>help --all</i> to display all help."})},n.native_responses=function(e){for(var t in e)e.hasOwnProperty(t)&&n.register("response",{name:t,method:function(n){return e[t]=n[t],n}})},n.run_command=function(e,t=!1){x=t,S(e)},n.echo=function(e,t){e&&i.find(".content").append('<div><div class="cmd_out">'+e+"</div></div>"),t||E()},n.prompt=function(e,t){this.register("command",{name:"ask",method:e=>{let n=this.get_input();this.unregister("command","ask"),setTimeout(()=>t(n),10)},regex:new RegExp("[sS]*","i")})},n.type=function(t,n=60){this.echo("\n");this.get_terminal(".prompt");var i,a=e("<span></span>").appendTo(".content"),s=this,r=0;!function e(){i=t.slice(0,++r),a.html(i),s.echo();i.slice(-1);setTimeout(e,n)}()},n.format_grid=function(e,t=!0,n=null){var i=e.reduce((e,t)=>{var n=t.reduce((e,t)=>e>t.length?e:t.length,0);return e>n?e:n},0);return null===n&&(n=i),e.map(e=>e.map(e=>t?e.padStart(n):e.padEnd(n)))},n.print_grid=function(e,t=" ",n="\n",i=!1){for(var a=[],s=0;s<e.length;s++){var r=e[s].join(t);a.push(r+"\n")}var o=a.join(n);return i&&this.echo(o),o},n.change_settings=function(t){e.extend(!0,u,t)},n.get_settings=function(){return u},n.unregister=function(e,t){var n=!1;return"object"==typeof t&&t.hasOwnProperty("name")&&(t=t.name),"callbefore"==e&&h.hasOwnProperty(t)?(n=!0,delete h[t]):"command"==e&&a.hasOwnProperty(t)?(n=!0,delete a[t],delete s[t]):"response"==e&&r.hasOwnProperty(t)?(n=!0,delete r[t]):"callback"==e&&o.hasOwnProperty(t)&&(n=!0,delete o[t]),n},n.get_input=function(){return f.text()},n.register=function(e,t){var n=!1;if(t){var i=!!t.hasOwnProperty("name")&&t.name,l=!!t.hasOwnProperty("method")&&t.method,c=t.hasOwnProperty("options")?t.options:[],m=t.hasOwnProperty("help")?t.help:"",u=t.hasOwnProperty("regex")?t.regex:new RegExp(`^${i}$`);s[i]=u,"callbefore"==e&&"function"==typeof l?(h[i]=l,n=!0):"command"!=e||"string"!=typeof l&&"function"!=typeof l?"response"==e&&"function"==typeof l?(r[i]=l,n=!0):"callback"==e&&"function"==typeof l&&(o[i]=l,n=!0):(a[i]={help:m,options:c,exe:l},n=!0)}return n},n.set_command_option=function(t){return e.extend(!0,c,t)},n.get_command_option=function(e){var t;if("string"==typeof e)t=!!c.hasOwnProperty(e)&&c[e];else if("object"==typeof e){t={};for(var n=e.length-1;n>=0;n--)void 0!==c[e[n]]&&(t[e[n]]=c[e[n]])}else t=c;return t},n.tokenize=function(t,n){var i={},a=m(t);if(void 0===a[0]||""===a[0])i=!1;else if(void 0!==n){var s=!1,r=!1,o=!1,h=!1,l=!1,c=!1,u=!1,d=n.filter((function(e){if("number"==typeof e&&e>0&&void 0!==a[e])return i[e]=a[e],e}));n=e(n).not(d).get();for(var p=0;p<a.length;p++)l=a[p].charAt(0),c=a[p].slice(-1),u=a[p].charAt(a[p].length-2),e.inArray(a[p],n)>=0?(s=a[p],r=!1):'"'==l&&!1===h&&'"'!==c?(o='"',h=!0,r=a[p]):"'"==l&&!1===h&&"'"!==c?(o="'",h=!0,r=a[p]):c==o&&!0===h&&u+c!=="\\"+o?(h=!1,r+=" "+a[p],r=e.trim(r.substring(1).slice(0,-1).replace(/\\(.)/gm,"$1"))):!0===h?r+=" "+a[p]:r="'"==l&&"'"==c||'"'==l&&'"'==c?e.trim(a[p].substring(1).slice(0,-1)):a[p],s&&!1===h&&(i[s]=r)}else i[a[0]]=a;return i},i.html("");var d=null,p=null,g={};i.append('<div class="loading"><span></span></div><div class="content"><div>'+u.i18n.welcome+'</div></div><div class="prompt"><div class="input" contenteditable spellcheck="false" data-caret="'+u.caret+'" data-ps="'+u.ps+'"></div></div>');var f=i.find(".prompt .input"),y=i.find(".content"),b=i.find(".loading");i.attr("data-theme",u.theme).addClass(u.theme),u.native_css&&n.native_style(i,u.theme);var w=u.autofocus,v=u.autocomplete,O=u.history_max;u.autofocus&&f.focus(),i.bind("focus click",(function(){var e="";void 0!==window.getSelection?e=window.getSelection().toString():void 0!==document.selection&&"Text"==document.selection.type&&(e=document.selection.createRange().text),""==e&&L()})),f.click((function(){L()})),f.bind("blur",(function(){w=!1})),u.caret_blink>0&&setInterval((function(){u.caret_blink>0&&!0===w&&f.toggleClass("blink")}),u.caret_blink),u.native_cmds&&n.native_commands(),n.native_responses(c);var x=null,S=function(t){var i;if(b.addClass("working"),i=void 0!==t?t:f.text(),v=u.autocomplete,O=u.history_max,c.last=i,"string"==typeof c.next&&(i=c.next.replace(/%cmd%/i,i),c.next=null,O=0),!i||""==i)return k();if(p=m(i),void 0===a[p])return x||(c.out=p+" : "+u.i18n.error_not_found),k();if(g=n.tokenize(i,a[p].options),"function"==typeof u.before_cmd&&!(g=T(u.before_cmd(g))))return k();if("function"==typeof h[p]&&!(g=T(h[p](g))))return k();if(x||j(c.last),"function"==typeof a[p].exe)return T(a[p].exe(g)),k();if("string"!=typeof a[p].exe)return c.out=u.i18n.error_bad_method,k();var s={};if(!u.ajax_options.data){var r={};r[u.param]=null!==c.in?c.in:p,r[u.param+"_data"]=null!==c.data?c.data:g,s.data=r}var o=e.extend(!0,s,u.ajax_options);a[p].exe&&(o.url=a[p].exe);var l=e.ajax(o);l.done((function(e){g=T(e)})),l.fail((function(e,t,n){c.out=u.i18n.error_ajax})),l.always((function(e,t,n){return k()}))},T=function(t){if("object"==typeof t)for(var n in t)r.hasOwnProperty(n)&&e.extend(!0,c,r[n](t));return t},k=function(){v=u.autocomplete,O=u.history_max;var e=c.ps?c.ps:u.ps,t=c.out?c.out:"",n=c.in?c.in:"",a=c.last?c.last:"",s=c.next?c.next:null;x?y.append('<div><div class="cmd_out">'+t+"</div></div>"):y.append('<div><div class="cmd_in"><span class="cmd_ps">'+f.attr("data-ps")+"</span>"+a+'</div><div class="cmd_out">'+t+"</div></div>"),g&&(o.hasOwnProperty(p)&&T(o[p](g)),"function"==typeof u.after_cmd&&T(u.after_cmd(g))),f.attr("data-caret",u.caret).attr("data-ps",e).text(n),0===u.caret_blink&&f.removeClass("blink"),f.hasClass("show-caret")&&f.removeClass("show-caret"),i.hasClass(u.theme)||i.removeClass(i.attr("data-theme")).addClass(u.theme).attr("data-theme",u.theme),s&&(v=!1,O=0),x=null,g=c={ps:null,in:null,out:null,last:null,next:s,data:null},C()},C=function(){E(),L(),b.removeClass("working")},j=function(t){void 0!==a[p]&&""!==t&&O>0&&(l.length>u.history_entries&&l.shift(),l.push(e.trim(t))),d=0},E=function(){i.scrollTop(i.height()+1e17)},L=function(){if(f.focus(),w=!0,void 0!==window.getSelection&&void 0!==document.createRange){var e=document.createRange();e.selectNodeContents(f.get(0)),e.collapse(!1);var t=window.getSelection();t.removeAllRanges(),t.addRange(e)}else if(void 0!==document.body.createTextRange){var n=document.body.createTextRange();n.moveToElementText(f.get(0)),n.collapse(!1),n.select()}};f.keydown((function(t){switch(t.keyCode){case 9:t.preventDefault(),v&&(!function(e){var t=[];if(e.match(/^[^\s]{0,}$/)){for(var n in a)""==e?t.push(n):0==n.indexOf(e)&&t.push(n);t.length>1?(c.out="<ul><li>"+t.join("</li><li>")+"</li></ul>",c.in=e,k()):1==t.length&&f.text(t.pop()+" ")}}(e.trim(f.text())),C());break;case 37:case 39:u.caret_blink>0&&(w=!1,f.addClass("blink show-caret"));break;case 38:t.preventDefault(),O>0&&(d=null===d||0==d?l.length-1:d-1,f.text(l[d]),C());break;case 40:if(t.preventDefault(),O>0){if(null===d||d==l.length-1){f.html("");break}d++,f.text(l[d]),C()}break;case 46:case 8:1!==f.text().length&&window.getSelection().toString()!=f.text()||f.html("");break;case 13:t.preventDefault(),document.execCommand("insertHTML",!1,""),S();break;case 27:c={ps:null,in:null,out:null,last:null,next:null,data:null},f.text(""),S()}}))})),n}}(jQuery)},function(e,t,n){"use strict";n.r(t);var i=n(0),a=n(1);n(4);const s=1;class r{constructor(){this.apiUrl="/games/superStarTrek"}createGameLog(e,t,n=s){return $.ajax({url:"/gameLog",data:JSON.stringify({score:e,victory:t,gameId:n}),contentType:"application/json",method:"POST"})}getHelp(e){return $.ajax({url:`${this.apiUrl}/help`,data:{command:e}})}}const o=new class{constructor(){this.$terminal=null,this._out="",this.silent=!0,this.questionMode=!1,this.question="",this.commands=[]}echo(e){this.silent||(this._out+=e)}newLine(){this.silent||(this._out+="\n")}printLine(e=""){this.silent||(this._out+=e+"\n")}skipLine(e=1){if(!this.silent)for(let t=0;t<e;t++)this._out+="\n"}getOutput(){return this._out}clear(){this.silent||(this._out="")}print(){this.silent||(this.$terminal.echo(this._out),this._out="")}registerCommand(e){this.commands.push(e),this.$terminal.register("command",{name:e.name,method:t=>this.runCommand(e.name,t),regex:e.regex})}parseCommand(e,t){let n=this.$terminal.get_input(),i=n.replace(t.regex,"");e.command=t,e.input=n,e.argumentStr=i,e.arguments=i.split(/\s/).filter(e=>e.length>0)}runCommand(e,t){let n=this.commands.find(t=>t.name===e);if(!n)return t.out="Not recognized.",t;if(!n.canAskQuestions){this.parseCommand(t,n);try{n.run(t)}catch(e){console.error(e),this.printLine("OOOF, that went really wrong. Try that again."),this.print()}return this.resolveUserCommand({command:n,commandObj:t}),t.out=this.getOutput(),this.clear(),t}if(n.canAskQuestions){let e;if(this.questionMode){this.questionMode=!1,this.question="";let n=this.$terminal.get_input();(e=this.iterator.next(n)).done&&(t=e.value,this.iterator=null)}else{this.parseCommand(t,n),this.iterator=n.run(t);try{e=this.iterator.next(t)}catch(e){console.error(e),this.printLine("OOOF, that went really wrong. Try that again."),this.print()}}return e.done?(delete t.next,delete t.ps,this.resolveUserCommand({command:n,commandObj:t}),t.out=this.getOutput(),this.clear(),t):(this.questionMode&&!e.done&&(t.next=n.name,t.ps=this.question),t)}}runUserCommand(){return new Promise((e,t)=>{this.resolveUserCommand=e})}ask(e){this.questionMode=!0,this.question=e}answer(){this.questionResolution(this.$terminal.get_input())}formatGrid(e,t=!0,n=null){var i=e.reduce((e,t)=>{var n=t.reduce((e,t)=>e>t.length?e:t.length,0);return e>n?e:n},0);return null===n&&(n=i),e.map(e=>e.map(e=>t?e.padStart(n):e.padEnd(n)))}printGrid(e,t=" ",n="\n",i=!1){for(var a=[],s=0;s<e.length;s++){var r=e[s].join(t);a.push(r+"\n")}var o=a.join(n);return i&&this.$terminal.echo(o),o}};class h{constructor(e,t,n=0,i=0,a=1){this.parent=e,this.parent.collider=this,this.health=a,this.terminal=o,this.width=n,this.length=i,this.gameObject=t,this._indestructible=!1}makeIndestructible(){this._indestructible=!0}getCoordinates(){let e={x:this.gameObject.x,y:this.gameObject.y},t={x:e.x,y:e.y+this.length},n={x:e.x+this.width,y:e.y};return{topLeft:e,bottomLeft:t,topRight:n,bottomRight:{x:n.x,y:t.y},center:{x:e.x+this.width/2,y:e.y+this.width/2}}}getLeftSideX(){return this.gameObject.x}getRightSideX(){return this.gameObject.x+this.width/100}getTopSideY(){return this.gameObject.y}getBottomSideY(){return this.gameObject.y+this.length/100}collision(e){return e.collider?h.collision(this,e.collider):(console.log(e," is not a collider."),!1)}static collision(e,t){return!e instanceof h||!t instanceof h?(console.error("both a and b need to be colliders, ",e,t),!1):e!==t&&(e.getLeftSideX()<t.getRightSideX()&&e.getRightSideX()>t.getLeftSideX()&&e.getTopSideY()<t.getBottomSideY()&&e.getBottomSideY()>t.getTopSideY())}isCriticalAmountOfDamage(e){let t=250;return e>(t*=.5*Math.random())}takeHit(e){this._indestructible?this.terminal.printLine(`Consumed by ${this.gameObject.name} at ${this.gameObject.getSectorLocation()}`):(this.health-=e,this.terminal.printLine(`${e.toFixed(2)} unit hit on ${this.gameObject.name} at ${this.gameObject.getSectorLocation()}`),this.health<0&&(this.parent.die?this.parent.die():this.terminal.echo(`${this.gameObject.name} destroyed.`)))}}class l{constructor(e,t){this.parent=e,this.gameObject=t}calculateDisplacement(e){return{x:e.globalX-this.gameObject.sector.globalX,y:e.globalY-this.gameObject.sector.globalY}}calculateDestination(e=0,t=0,n=0,i=0){let a=this.gameObject.sector,s=a.globalX+10*e+n,r=a.globalY+10*t+i;return this.gameObject.galaxy.getSectorGlobal(s,r)}static calculateDistance(e,t,n,i){let a=Math.abs(n-e),s=Math.abs(i-t);return Math.hypot(a,s)}*moveInDirection(e,t=.5,n){let i=t*Math.cos(e),a=t*Math.sin(e)*-1,s=0,r=!0;for(;r;){if(s>1e3)return;this.gameObject.x+=i,this.gameObject.y+=a,this.gameObject.updateSectorAfterMove(),r=yield,s++}}*moveTo(e,t,n=.5){let i=l.calculateDistance(this.gameObject.x,this.gameObject.y,e,t),a=Math.atan2(this.gameObject.y-t/this.gameObject.x-e),s=n*Math.cos(a),r=n*Math.sin(a),o=!0;for(;i>0&&o;){let a=Math.abs(e-this.gameObject.x),h=Math.abs(t-this.gameObject.y);if(a<s&&(s=e-this.gameObject.x),h<r&&(r=t-this.gameObject.y),this.gameObject.x+=s,this.gameObject.y+=r,this.gameObject.updateSectorAfterMove(),(i-=n)<=0)return;o=yield}}moveToSector(e){e.isFull(),this.gameObject.sector.container.removeGameObject(this.parent),this.gameObject.quadrant.container.removeGameObject(this.parent),this.gameObject.placeIn(this.gameObject.galaxy,e.quadrant,e)}}class c{constructor(e){this.parent=e,this.parent.container=this,this.gameObjects=[]}isEmpty(){return 0===this.gameObjects.length}getCountOfGameObjects(e){return this.gameObjects.reduce((t,n)=>(n instanceof e&&t++,t),0)}getGameObjectsOfType(e){return this.gameObjects.filter(t=>t instanceof e)}getAllGameObjects(){return this.gameObjects.slice()}addGameObject(e){this.gameObjects.push(e)}removeGameObject(e){this.gameObjects=this.gameObjects.filter(t=>t!==e)}}class m{constructor(e,t=!1){this.parent=e,this.parent.gameObject=this,this.galaxy=null,this.quadrant=null,this.sector=null,this.x=null,this.y=null,this.takesWholeSector=t}isInGame(){return!!(this.galaxy&&this.quadrant&&this.sector)}get name(){return this.parent.name?this.parent.name:this.parent.constructor.name}removeSelf(){this.galaxy.container.removeGameObject(this.parent),this.quadrant.container.removeGameObject(this.parent),this.sector.container.removeGameObject(this.parent),this.galaxy=null,this.quadrant=null,this.sector=null,this.x=null,this.y=null}canMoveTo(e){return!(this.takesWholeSector&&!e.container.isEmpty())}updateSectorAfterMove(){try{let e=this.galaxy.getSectorGlobal(this.x,this.y);if(e!==this.sector){if(!this.canMoveTo(e))throw new Error("Cant place object in non empty sector");this.quadrant.container.removeGameObject(this.parent),this.sector.container.removeGameObject(this.parent),this.quadrant=e.quadrant,this.sector=e}}catch(e){this.removeSelf()}}placeIn(e,t,n,i=.5,a=.5){if(!this.canMoveTo(n))throw new Error("Cant place object in non empty sector");this.galaxy=e,this.quadrant=t,this.sector=n,this.galaxy.container.addGameObject(this.parent),this.quadrant.container.addGameObject(this.parent),this.sector.container.addGameObject(this.parent),this.x=this.sector.globalX+i,this.y=this.sector.globalY+a}getSectorY(e=!1){return this.sector.y}getSectorX(e=!1){return this.sector.x}getLocation(){return`${this.getQuadrantLocation()}; ${this.getSectorLocation()}`}getQuadrantLocation(){return`Quadrant ${this.quadrant.x+1} - ${this.quadrant.y+1}`}getSectorLocation(e=!0,t){return`${e?"Sector ":""}${this.getSectorX()+1} - ${this.getSectorY()+1}`}getSectorLocationFloat(e=!0){return`${e?"Sector ":""}${(this.x%this.quadrant.width+.5).toFixed(1)} - ${(this.y%this.quadrant.width+.5).toFixed(1)}`}}class u{constructor(e,t,n){this.container=new c(this),this.quadrant=n,this.galaxy=n.galaxy,this.x=e,this.y=t;let i=this.galaxy.getGlobalCoordinates(this);this.globalX=i.x,this.globalY=i.y}getAdjacentSectors(e=!1){return this.quadrant.getSectorsAdjacentTo(this.x,this.y,e)}isFull(){return this.container.getAllGameObjects().some(e=>e.gameObject.takesWholeSector)}}class d{constructor(e,t,n,i,a){this.container=new c(this),this.galaxy=a,this.x=n,this.y=i;let s=this.galaxy.getGlobalCoordinatesForQuadrant(this);this.globalX=s.x,this.globalY=s.y,this.width=e,this.length=t,this.sectors=[],this.hasSupernova=!1;for(let e=0;e<this.length;e++){let t=[];for(let n=0;n<this.width;n++)t.push(new u(n,e,this));this.sectors.push(t)}}getSectorsAdjacentTo(e,t,n=!1){let i=[];for(let a=t-1;a<t+1;a++)for(let s=e-1;s<e+1;s++)this.areValidCoordinates(s,a)&&(n||s!==e&&a!==t)&&i.push(this.sectors[a][s]);return i}areValidCoordinates(e,t){return!(t<0||t>this.length-1)&&!(e<0||e>this.width-1)}getRandomSector(){let e=Math.round(Math.random()*(this.width-1)),t=Math.round(Math.random()*(this.length-1));return this.sectors[t][e]}getSector(e,t){if(!this.areValidCoordinates(e,t))throw new Error(`There is no sector ${e} - ${t}.`);return e=Math.trunc(e),t=Math.trunc(t),this.sectors[t][e]}isFull(){return!!this.hasSupernova||this.sectors.every(e=>e.every(e=>!e.container.isEmpty()))}getRandomEmptySector(){let e=this.sectors.map(e=>e.filter(e=>e.container.isEmpty())).flat();if(0!==e.length)return e[Math.round(Math.random()*(e.length-1))]}getEdge(e,t,n){return{x:0,y:0}}}class p{constructor(e,t,n=10,i=10,a=!0){this.container=new c(this),this.width=e,this.length=t,this.quadrantWidth=n,this.quadrantLength=i,this.quadrants=[];for(let n=0;n<t;n++)this.quadrants.push(new Array(e));if(a)for(let e=0;e<this.quadrants.length;e++){let t=this.quadrants[e];for(let n=0;n<t.length;n++)t[n]=new d(this.quadrantWidth,this.quadrantLength,n,e,this)}}static calculateDistance(e,t){let n=Math.abs(e.globalX-t.globalX),i=Math.abs(e.globalY-t.globalY);return Math.hypot(n,i)}static convertUserCoordinates(e,t){return{x:e-.5,y:t-.5}}getRandomQuadrant(){let e=Math.round(Math.random()*(this.width-1)),t=Math.round(Math.random()*(this.length-1));return this.quadrants[t][e]}getRow(e){return this.quadrants[e]}getGlobalCoordinates(e){return{x:e.quadrant.x*this.quadrantWidth+e.x,y:e.quadrant.y*this.quadrantLength+e.y}}getGlobalCoordinatesForQuadrant(e){return{x:e.x*this.quadrantWidth,y:e.y*this.quadrantLength}}getSectorGlobal(e,t){let n=Math.floor(e/this.quadrantWidth),i=Math.floor(t/this.quadrantLength),a=Math.floor(e%this.quadrantWidth),s=Math.floor(t%this.quadrantLength);return this.getSector(n,i,a,s)}getSector(e,t,n,i){return this.getQuadrant(e,t).getSector(n,i)}getQuadrant(e,t){if(t<0||t>this.length-1)throw new Error(`There is no quadrant ${e+1} - ${t+1}.`);if(e<0||e>this.width-1)throw new Error(`There is no quadrant ${e+1} - ${t+1}.`);return this.quadrants[t][e]}}window.Galaxy=p;class g{constructor(e,t,n){this.parent=e,this.parent.ai=this,this.galaxy=t,this.player=n}getPlayer(){}takeTurn(){console.log(`${this.parent.name} taking a turn.`),this.firePhasers()}firePhasers(){this.parent.phasers.fire(200,this.player),this.parent.energy-=200,this.parent.phasers.coolDown()}}class f{constructor(){this._damaged=!1}isDamaged(){return this._damaged}}class y extends Error{}class b extends f{constructor(e){super(),this.parent=e,this.shields=this.parent,this.capacity=2500,this.up=!1,this.units=2500,this.terminal=o}printInfo(){return`${this.up?"UP":"DOWN"}, ${(100*this.units/this.capacity).toFixed(1)}% ${this.units.toFixed(2)} units`}recharge(){this.units=this.capacity}lower(){this.up?(this.up=!1,this.terminal.printLine("Shields lowered.")):this.terminal.printLine("Shields already down.")}raise(){this.up?this.terminal.printLine("Shields already up."):(this.up=!0,this.terminal.printLine("Shields raised."))}transferEnergy(e){if(this.isDamaged())throw new y("Can't transfer energy because shields are damaged.");return e>0?this.charge(e):e<0?this.drain(e):void 0}drain(e){if(this.units-e<0)throw new Error("Not enough energy");return this.units-=e,0===this.units&&this.lower(),this.units}charge(e){this.units+e>this.capacity&&(e=this.capacity-this.units),this.units+=e,this.units===this.capacity&&this.terminal.printLine("Shields at max.")}takeHit(e){this.up&&!this.isDamaged()?(this.terminal.printLine(`${e.toFixed(2)} hit to shields.`),this.units<e?(e-=this.units,this.drain(this.units),this.parent.collider.takeHit(e)):this.drain(e)):this.parent.collider.takeHit(e)}}class w extends f{constructor(e){if(super(),this.parent=e,!this.parent.energy)throw new Error("Phaser parent must have energy");this.parent.phasers=this,this.overheated=!1,this.amountRecentlyFired=0,this.overheatThreshold=1500,this.terminal=o,this.scalingFactor=.9,this.maxScalingFactor=this.scalingFactor+.01,this.minScalingFactor=this.scalingFactor}calculateSureKill(e,t){return t/this.minScalingFactor**e}calculateDamage(e,t){return t*(this.scalingFactor+.01*Math.random())**e}coolDown(){this.amountRecentlyFired=0}checkOverHeat(){if(this.amountRecentlyFired>this.overheatThreshold){let e=this.amountRecentlyFired-this.overheatThreshold;Math.random()<=38e-5*e&&(this.terminal.printLine("Phasers overheated!"),this._damaged=!0)}}fire(e,t){if(e<=0)return void console.error("Can't fire amount ",e);if(!t)return void console.error("Need a target, ",t);if(!(t.collider instanceof h))return void console.error("You can't hit that",t);if(this.isDamaged())return void this.terminal.printLine("Phaser control damaged.");if(!this.parent.gameObject)return void console.error("derp a lerp.");if(!t.gameObject||!t.gameObject.isInGame())return void console.error("Can't shoot something removed from the game.");let n=Galaxy.calculateDistance(this.parent.gameObject.sector,t.gameObject.sector),i=this.calculateDamage(n,e);t.shields instanceof b?t.shields.takeHit(i):t.collider instanceof h&&t.collider.takeHit(i),this.amountRecentlyFired+=e,this.checkOverHeat()}}class v{constructor(){this.gameObject=new m(this,!1),this.mover=new l(this,this.gameObject),this.collider=new h(this,this.gameObject,100,100,1),this.damage=100}die(){this.gameObject.removeSelf()}}class O extends f{constructor(e,t=0,n=0){super(),this.parent=e,this.parent.photons=this,this.terminal=o,this._capacity=n,this._torpedoes=t}addTorpedoes(e){e<=0||(this._torpedoes+e>this._capacity?this._torpedoes=this._capacity:this._torpedoes+=e)}getTorpedoCount(){return this._torpedoes}calcAngleDegrees(e,t){return 180*Math.atan2(t,e)/Math.PI}fire(e,t){if(this.isDamaged())return void this.terminal.echo("Photon torpedoes are damaged and can't fire.");if(this._torpedoes<=0)return void this.terminal.echo("Not enough torpedoes.");this._torpedoes--;let n=this.parent.gameObject.quadrant.globalX+e,i=this.parent.gameObject.quadrant.globalY+t,a=new v;a.gameObject.placeIn(this.parent.gameObject.galaxy,this.parent.gameObject.quadrant,this.parent.gameObject.sector);let s,r=this.parent.gameObject.quadrant,o=n-this.parent.gameObject.x,h=-1*(i-this.parent.gameObject.y),l=Math.atan2(h,o),c=a.mover.moveInDirection(l,.5,Math.hypot(o,h)),m=!1,u=null,d=[];do{if(s=c.next(!0),a.gameObject.quadrant!==r){console.log("We've left the quadrant.",r,a.gameObject.quadrant),c.next(!1);break}if(d.push(a.gameObject.getSectorLocationFloat(!1)),a.gameObject.sector.getAdjacentSectors(!0).forEach(e=>{m||e.container.getAllGameObjects().forEach(e=>{m||e.collider&&e!==a&&e!==this.parent&&(m=a.collider.collision(e))&&(u=e,console.log("HIT!!!",e))})}),m){c.next(!1);break}}while(!s.done);for(let e=0;e<d.length;e++)0===e?this.terminal.echo(`${d[e]}    `):e===d.length-1?this.terminal.echo(`${d[e]}`):e%2==0&&this.terminal.echo(`${d[e]}    `);this.terminal.echo("\n"),m?u.collider.takeHit(a.damage):this.terminal.printLine("Torpedo missed and has left the quadrant!"),a.die()}}class x{constructor(e,t,n){this.energy=200,this.galaxy=e,this.player=t,this.game=n,this.gameObject=new m(this,!0),this.collider=new h(this,this.gameObject,80,80),this.phasers=new w(this),this.photons=new O(this),this.ai=new g(this,e,t),this.terminal=o,this.name=this.constructor.name}die(){this.terminal.printLine(`${this.name} at ${this.gameObject.getSectorLocation()} was destroyed.`),console.log("You killed ",this),this.gameObject.removeSelf(),this.game.killEnemy(this)}}class S extends x{constructor(e,t,n){super(e,t,n)}}class T extends S{constructor(e,t,n){super(e,t,n),this.collider.health=40,this.energy=400,this.name="Klingon Warbird"}}class k extends S{constructor(e,t,n){super(e,t,n),this.collider.health=100,this.energy=1200,this.name="Klingon Commander"}}class C extends S{constructor(e,t,n){super(e,t,n),this.collider.health=400,this.energy=1750,this.name="Klingon Super Commander"}}class j extends x{constructor(e,t,n){super(e,t,n),this.collider.health=40,this.energy=700,this.name="Romulan"}}const E=1,L=2,M=3,R=4;class A{constructor(e){this.energyCapacity=3e3,this.gameObject=new m(this),this.mover=new l(this,this.gameObject),this.maxHullIntegrity=1500,this.collider=new h(this,this.gameObject,80,80,this.maxHullIntegrity),this.energy=this.energyCapacity,this.phasers=new w(this),this.warpFactor=5,this.photons=new O(this,10,10),this.shields=new b(this),this.shields.raise(),this.docked=!1,this.dockedAt=null,this.name="Enterprise",this.dead=!1,this.terminal=e}isDead(){return this.dead}die(){this.terminal.echo("Enterprise destroyed!!!!\n"),this.dead=!0,this.gameObject.removeSelf()}firePhasersMultiTarget(e,t=!1){this.shields.up;let n=e.reduce((e,t)=>e+t.amount,0);this.energy,this.useEnergy(n),e.forEach(e=>{this.phasers.fire(e.amount,e.enemy)}),this.phasers.coolDown()}repairHull(){this.collider.health=this.maxHullIntegrity}dock(e){this.docked||(this.energy=this.energyCapacity,this.photons.addTorpedoes(this.photons._capacity-this.photons.getTorpedoCount()),this.shields.recharge(),this.repairHull(),this.docked=!0,this.dockedAt=e)}undock(){this.docked=!1,this.dockedAt=null}impulseTo(e){this.mover.moveToSector(e)}setWarpFactor(e){"number"!=typeof e||Number.isNaN(e)||e<1||e>10||(this.warpFactor=e)}warpTo(e){if(!e instanceof u)throw new Error("Can't move there");this.docked&&this.undock();let t=.1*Galaxy.calculateDistance(this.gameObject.sector,e)*Math.pow(this.warpFactor,3);if(this.shields.up&&(t*=2),console.log(t),this.energy<t)throw new Error("Not enough energy.");this.mover.moveToSector(e),this.useEnergy(t)}hasLifeSupport(){return!0}getCondition(){let e=this.gameObject.quadrant.container.getCountOfGameObjects(x);return this.docked?R:e>0?M:this.energy<1e3?L:E}useEnergy(e){if(this.energy-e<=0)throw new Error("Not enough energy!");this.energy-=e}addEnergy(e){if(this.energy+e>this.energyCapacity)throw new Error("Too much energy.");this.energy+=e}shieldsUp(){this.useEnergy(50),this.shields.raise()}shieldsDown(){this.shields.lower()}printCondition(){switch(this.getCondition()){case R:return"DOCKED";case E:return"GREEN";case L:return"YELLOW";case M:return"RED";default:console.error("condition not recognized.")}}}class N{constructor(){this.gameObject=new m(this,!0),this.collider=new h(this,this.gameObject,80,80,1e3),this.collider.makeIndestructible(),this.name="Star"}}class I{constructor(){this.gameObject=new m(this,!0),this.collider=new h(this,this.gameObject,100,100,1e3),this.name="star base"}}class P{constructor(e,t,n=!1){this.gameObject=new m(this,!0),this.collider=new h(this,this.gameObject,80,80,1e3),this._planetClass=null,this.planetClass=e,this.hasCrystals=t,this.known=!1,this.name="planet"}get planetClass(){return this._planetClass}set planetClass(e){if(e){if("m"!==(e=e.toLowerCase())&&"n"!==e&&"o"!==e)throw new Error(`Planet Class ${e} invalid.`);this._planetClass=e}}randomlyGenerate(){let e=Math.random();this.planetClass=e>2/3?"m":e>1/3?"n":"o",this.hasCrystals=Math.random()>2/3}}class q{constructor(){this.gameObject=new m(this,!0),this.collider=new h(this,this.gameObject,100,100),this.collider.makeIndestructible(),this.name="black hole"}}function D(...e){return e=(e=e.sort((e,t)=>t.length-e.length)).map(e=>e+"\\s*"),new RegExp(`^\\s*(${e.join("|")})\\s*$`,"i")}function _(...e){return e=(e=e.sort((e,t)=>t.length-e.length)).map(e=>e+"(\\s+|$)"),new RegExp(`^\\s*(${e.join("|")})\\s*`,"i")}const F="info",G="attack",K="move",H="instant ship command";class U{constructor(){this.abbreviation=null,this.name=null,this.regex=null,this.fullName=null,this.deviceUsed="",this.options={},this.info="No info.",this.type=null,this.canAskQuestions=!1}isInstantShipCommand(){return this.type===H}isInfoCommand(){return this.type===F}isAttackCommand(){return this.type===G}isMoveCommand(){return this.type===K}run(e){return e.out="Not implemented.",e}makeInfo(){}}class Y extends U{constructor(e,t){super(),this.terminal=e,this.player=t,this.abbreviation="w",this.name="warp",this.fullName="Warp Factor",this.regex=_(this.abbreviation,this.name,this.fullName),this.type=H,this.info='\n  Mnemonic:  WARP\n  Shortest abbreviation:  W\n  Full command:  WARP <number>\n\nYour warp factor controls the speed of your starship.  The larger the\nwarp factor, the faster you go and the more energy you use.\n\nYour minimum warp factor is 1.0 and your maximum warp factor is 10.0\n(which is 100 times as fast and uses 1000 times as much energy).  At\nspeeds above warp 6 there is some danger of causing damage to your\nwarp engines; this damage is larger at higher warp factors and also\ndepends on how far you go at that warp factor.\n\nAt exactly warp 10 there is some probability of entering a so-called\n"time warp" and being thrown forward or backward in time.  The farther\nyou go at warp 10, the greater is the probability of entering the\ntime warp.'}run(e){let t=Number.parseFloat(e.arguments[0]);if(Number.isNaN(t))this.terminal.printLine("Beg your pardon, Captain?");else{if(t<1)this.terminal.printLine('Helmsman Sulu- "We can\'t go below warp 1, Captain."');else if(t<=6)this.terminal.printLine(`Helmsman Sulu- "Warp factor ${t.toFixed(1)}, Captain."`);else if(t<8)this.terminal.printLine('Engineer Scott- "Aye, but our maximum safe speed is warp 6."');else if(t>=8&&t<10)this.terminal.printLine('Engineer Scott- "Aye, Captain, but our engines may not take it."');else if(10===t)this.terminal.printLine('Engineer Scott- "Aye, Captain, we\'ll try it."');else{if(!(t>10))return void this.terminal.printLine("Beg your pardon, Captain?");this.terminal.printLine('Helmsman Sulu- "Our top speed is warp 10, Captain."')}this.player.setWarpFactor(t)}}}class W extends U{constructor(e,t,n){super(),this.game=e,this.terminal=t,this.player=n,this.abbreviation="sc",this.name="score",this.regex=_(this.abbreviation,this.name),this.type=F,this.info="\n  Mnemonic:  SCORE\n  Shortest abbreviation: SC\n\nShows what the score would be if the game were to end naturally at\nthis point. Since the game hasn't really ended and you lose points if\nyou quit, this is perhaps a meaningless command, but it gives you a\ngeneral idea of how well you are performing.\n        "}run(e){let t=0,n=this.game.getNumberOfTypeKilled(S),i=this.game.getNumberOfTypeKilled(T),a=10*i,s=this.game.getNumberOfTypeKilled(k),r=50*s,o=this.game.getNumberOfTypeKilled(C),h=200*o,l=this.game.getNumberOfTypeKilled(j),c=20*l;t+=a+r+h+c;let m=this.game.starDate-this.game.initialStarDate;0===m&&(m=1);let u=n/m,d=500*u;t+=d;if(this.terminal.printLine("Your score --"),this.terminal.printLine(`${l} Romulan ships destroyed`.padEnd(60," ")+c),this.terminal.printLine(`${i} Klingon war birds destroyed`.padEnd(60," ")+a),this.terminal.printLine(`${s} Klingon Commander ships destroyed`.padEnd(60," ")+r),this.terminal.printLine(`${o} Klingon Super Commander ships destroyed`.padEnd(60)+h),this.terminal.printLine(`${u.toFixed(2)} Klingons per stardate`.padEnd(60)+d),this.game.isVictory()){let e=100*this.game.skill;t+=e,this.terminal.printLine(`Bonus for winning ${this.game.getDifficultyStr()} game `.padEnd(60)+e)}if(this.player.isDead()){let e=-200;t+=e,this.terminal.printLine("Penalty for getting yourself killed".padEnd(60)+e)}this.terminal.skipLine(2),this.terminal.printLine("TOTAL SCORE".padEnd(60)+t.toFixed(0))}}class Q extends U{constructor(e,t,n,i){super(),this.game=e,this.terminal=t,this.galaxy=n,this.abbreviation="rep",this.name="report",this.regex=_(this.abbreviation,this.name),this.type=F,this.info="\n    Mnemonic:  REPORT\n    Shortest abbreviation: REP\n\nThis command supplies you with information about the state of the\ncurrent game.  Its purpose is to remind you of things that you have\nlearned during play, but may have forgotten, and cannot otherwise\nretrieve if you are not playing at a hard-copy terminal.\n\n     You are told the following things:\n\n       . The length and skill level of the game you are playing\n       . The original number of Klingons\n       . How many Klingons you have destroyed\n       . Whether the Super-Commander has been destroyed\n       . How many bases have been destroyed\n       . How many bases are left\n       . What bases (if any) are under attack; your subspace radio\n         must have been working since the attack to get this \n         information.\n       . How many casualties you have suffered\n       . How many times you have called for help.\n\nThis same information is automatically given to you when you start to\nplay a frozen game."}run(e){this.terminal.printLine(`You are now playing a ${this.game.getGameLengthStr()} ${this.game.getDifficultyStr()} game.`);let t=this.game.getNumberOfTypeKilled(S),n=this.game.getNumberOfTypeKilled(T),i=this.game.getNumberOfTypeKilled(k),a=this.game.getNumberOfTypeKilled(C);this.terminal.printLine(`${t} of ${this.game.initialEnemies} klingons have been killed.`),this.terminal.printLine(`${n} klingon warbirds killed.`),this.terminal.printLine(`${i} klingon commanders killed.`),this.terminal.printLine(`${a} klingon super commanders killed.`);let s=this.galaxy.container.getCountOfGameObjects(I);this.terminal.printLine(`There are ${s} remaining bases.`)}}class B extends U{constructor(e,t,n){super(),this.game=e,this.terminal=t,this.player=n,this.abbreviation="pho",this.name="photon",this.fullName="photon torpedoes",this.regex=_(this.abbreviation,this.name,this.fullName,"photons","photon torpedo"),this.deviceUsed="",this.maxPerBurst=3,this.options={},this.type=G,this.info='\n  Mnemonic:  PHOTONS\n  Shortest abbreviation:  PHO\n  Full commands:  PHOTONS <NUMBER> <TARG1> <TARG2> <TARG3>\n\nPhoton torpedoes are projectile weapons--you either hit what you aim\nat, or you don\'t.  There are no "partial hits".\n\nOne photon torpedo will usually kill one ordinary Klingon, but it\nusually takes about two for a Klingon Commander.  Photon torpedoes\ncan also blow up stars and starbases, if you aren\'t careful.\n\nYou may fire photon torpedoes singly, or in bursts of two or three.\nEach torpedo is individually targetable.  The computer will prompt\nyou, asking for the target sector for each torpedo.  Alternately, you\nmay specify each target in the command line.\n\nPhoton torpedoes cannot be aimed precisely--there is always some\nrandomness involved in the direction they go.  Photon torpedoes may\nbe fired with your shields up, but as they pass through the shields\nthey are randomly deflected from their intended course even more.\n\nPhoton torpedoes are proximity-fused.  The closer they explode to the\nenemy, the more damage they do.  There is a hit "window" about one\nsector wide.  If the torpedo misses the hit window, it does not\nexplode and the enemy is unaffected.  Photon torpedoes are only\neffective within the quadrant.  They have no effect on things in\nadjacent quadrants.\n\nIf more than one torpedo is fired and only one target sector is\nspecified, all torpedoes are fired at that sector.  For example, to\nfire two torpedoes at sector 3 - 4, you type\n\n     PHO 2 3 4           (or)           PHO 2 3 4 3 4\n\nTo fire torpedoes at, consecutively, sectors 2 - 6, 1 - 10, and 4 -\n7, type\n\n     PHO 3 2 6 1 10 4 7\n\nThere is no restriction to fire directly at a sector.  For example,\nyou can enter\n\n       PHO 1 3 2.5\n\nto aim between two sectors.  However, sector numbers must be 1 to 10\ninclusive.\n\n'}run(e){if(this.player.photons.isDamaged())return void this.terminal.echo("Torpedo launcher is damaged.");let t=e.arguments,n=t.shift(),i=[];for(let e=0;e<t.length;e+=2){let n=Number.parseFloat(t[e]),a=Number.parseFloat(t[e+1]);if(Number.isNaN(n)||Number.isNaN(a))return void this.terminal.echo(`${n} or ${a} is not a number.`);i.push({x:n,y:a})}if(n>this.maxPerBurst)this.terminal(`Maximum of ${this.maxPerBurst} torpedoes per burst.`);else{if(1===i.length)for(;i.length<n;){let e=Object.assign({},i[0]);i.push(e)}else{if(n<i.length)return void this.terminal.echo("Please specify destinations for every torpedo.");if(n>i.length)return void this.terminal.echo("Number of targets and the number to launch don't match.")}n>this.player.photons.getTorpedoCount()?this.terminal.echo(`You only have ${n} torpedoes.`):(i=i.map(e=>Galaxy.convertUserCoordinates(e.x,e.y))).forEach((e,t)=>{this.terminal.echo(`\nTrack for torpedo number ${t+1}:  `),this.player.photons.fire(e.x,e.y)})}}}class V extends U{constructor(e,t,n){super(),this.game=e,this.terminal=t,this.player=n,this.name="phasers",this.abbreviation="p",this.fullName="phasers",this.regex=_(this.name,this.abbreviation,this.fullName),this.type=G,this.info='\n  Mnemonic:  PHASERS\n  Shortest abbreviation:  P\n  Full commands:  PHASERS AUTOMATIC <AMOUNT TO FIRE> <NO>\n                  PHASERS <AMOUNT TO FIRE> <NO>\n                  PHASERS MANUAL <NO> <AMOUNT 1> <AMOUNT 2>...<AMOUNT N>\n\nPhasers are energy weapons. As you fire phasers at Klingons, you\nspecify an "amount to fire" which is drawn from your energy reserves.\nThe amount of total hit required to kill an enemy is partly random.\nbut also depends on skill level.\n\nThe average hit required to kill an ordinary Klingon varies from 200\nunits in the Novice game to 250 units in the Emeritus game.\nCommanders normally require from 600 (Novice) to 700 (Emeritus).  The\nSuper-commander requires from 875 (Good) to 1000 (Emeritus). Romulans\nrequire an average of 350 (Novice) to 450 (Emeritus).\n\nHits on enemies are cumulative, as long as you don\'t leave the\nquadrant.\n\nIn general, not all that you fire will reach the Klingons.  The\nfarther away they are, the less phaser energy will reach them. If a\nKlingon is adjacent to you, he will receive about 90% of the phaser\nenergy directed at him; a Klingon 5 sectors away will receive about\n60% and a Klingon 10 sectors away will receive about 35%. There is\nsome randomness involved, so these figures are not exact. Phasers\nhave no effect beyond the boundaries of the quadrant you are in.\n\nPhasers may overheat (and be damaged) if you fire too large a burst\nat once. Firing up to 1500 units is safe.  From 1500 on up the\nprobability of overheat increases with the amount fired.\n\nIf phaser firing is automatic, the computer decides how to divide up\nyour <amount to fire> among the Klingons present.  If phaser firing\nis manual, you specify how much energy to fire at each Klingon\npresent (nearest first), rather than just specifying a total amount.\nYou can abbreviate "MANUAL" and "AUTOMATIC" to one or more letters; if\nyou mention neither, automatic fire is usually assumed.\n\nBattle computer information is available by firing phasers manually,\nand allowing the computer to prompt you.  If you enter zero for the\namount to fire at each enemy, you will get a complete report, without\ncost.  The battle computer will tell you how much phaser energy to\nfire at each enemy for a sure kill.  This information appears in\nparentheses prior to the prompt for each enemy.  SInce the amount is\ncomputed from sensor data, if either the computer or the S.R. sensors\nare damaged, this information will be unavailable, and phasers must\nbe fired manually.\n\f                                                                       13\nA safety interlock prevents phasers from being fired through the\nshields.  If this were not so, the shields would contain your fire\nand you would fry yourself.  However, you may utilize the\n"high-speed shield control" to drop shields, fire phasers, and raise\nshields before the enemy can react.  Since it takes more energy to\nwork the shields rapidly with a shot, it costs you 200 units of\nenergy each time you activate this control.  It is automatically\nactivated when you fire phasers while the shields are up. By\nspecifying the <no> option, shields are not raised after firing.\n\nPhasers have no effect on starbases (which are shielded) or on stars.'}getMode(e){let t=D("automatic","auto","a"),n=D("manual","man","m");return{auto:t.test(e),manual:n.test(e)}}run(e){let t=this.player.gameObject.quadrant,n=this.player.gameObject.sector,i=t.container.getGameObjectsOfType(x);if(0===i.length)return void this.terminal.printLine("No enemies to fire upon.");let{auto:a,manual:s}=this.getMode(e.arguments[0]),r=[];if(a||s?r=e.arguments.slice(1):(a=!0,r=e.arguments.slice(0)),a){let e=Number.parseInt(r[0]);if(Number.isNaN(e))return void this.terminal.printLine("Try again.");if(e<=0)return void this.terminal.printLine(`Can't fire ${e}, specify an amount greater than 0.`);if(e>this.player.energy)return void this.terminal.printLine(`Units available = ${this.player.energy}.`);let t=[];i.forEach(e=>{let i=Galaxy.calculateDistance(e.gameObject.sector,n),a=this.player.phasers.calculateSureKill(i,e.collider.health);t.push({enemy:e,distance:i,amount:a})}),t.sort((e,t)=>e.distance-t.distance);let a=[],s=e;for(let n=0;e>0&&n<t.length;n++){let{amount:e}=t[n];if(s<e&&(e=s),s-=e,t[n].amount=e,a.push(t[n]),s<=0)break}this.player.firePhasersMultiTarget(a,!1),s>0&&(this.terminal.echo(`Firing ${s.toFixed(2)} excess units into space.`),this.player.useEnergy(s))}else if(s){let e=r.map(e=>Number.parseInt(e));if(e.some(e=>Number.isNaN(e)))return void this.terminal.printLine("Try again.");if((e=e.filter(e=>e>0)).reduce((e,t)=>e+t,0)>this.player.energy)return void this.terminal.printLine(`Units available = ${this.player.energy}.`);if(i.length<e.length)return void this.terminal.printLine(`There are only ${i.length} enemies here.`);let t=[];i.forEach(e=>{t.push({enemy:e,distance:Galaxy.calculateDistance(e.gameObject.sector,n),amount:null})}),t.sort((e,t)=>e.distance-t.distance);let a=[];for(let n=0;n<e.length;n++){let i=t[n];i.amount=e[n],a.push(i)}this.player.firePhasersMultiTarget(a,!1)}return e}}class z extends U{constructor(e,t,n){super(),this.game=e,this.terminal=t,this.player=n,this.name="shields",this.abbreviation="sh",this.fullName="deflector shields",this.regex=_(this.abbreviation,this.name,this.fullName),this.info='  Mnemonic:  SHIELDS\n  Shortest abbreviation:  SH\n  Full commands:  SHIELDS UP\n                  SHIELDS DOWN\n                  SHIELDS CHARGE <amount of energy to put into the shields>\n                  SHIELDS DRAIN  <amount of energy to take from the shields>\n\nYour deflector shields are a defensive device to protect you from\nKlingon attacks (and nearby novas).  As the shields protect you, they\ngradually weaken.  A shield strength of 75%, for example, means that\nthe next time a Klingon hits you, your shields will deflect 75% of\nthe hit, and let 25% get through to hurt you.\n\nIt costs 50 units of energy to raise shields, nothing to lower them.\nYou may move with your shields up; this costs nothing under impulse\npower, but doubles the energy required for warp drive.\n\nEach time you raise or lower your shields, the Klingons have another\nchance to attack.  Since shields do not raise and lower\ninstantaneously, the hits you receive will be intermediate between\nwhat they would be if the shields were completely up or completely\ndown.\n\nYou may not fire phasers through your shields.  However you may use\nthe "high-speed shield control" to lower shields, fire phasers, and\nraise the shields again before the Klingons can react.  Since rapid\nlowering and raising of the shields requires more energy than normal\nspeed operation, it costs you 200 units of energy to activate this\ncontrol.  It is automatically activated when you fire phasers while\nshields are up.  You may fire photon torpedoes, but they may be\ndeflected considerably from their intended course as they pass\nthrough the shields (depending on shield strength).\n\nYou may transfer energy between the ship\'s energy (given as "Energy"\nin the status) and the shields.  Thee word "TRANSFER" may be\nabbreviated "T".  The amount of energy to transfer is the number of\nunits of energy you wish to take from the ship\'s energy and put into\nthe shields.  If you specify an negative number, energy is drained\nfrom the shields to the ship.  Transferring energy constitutes a turn.\nIf you transfer energy to the shields while you are under attack,\nthey will be at the new energy level when you are next hit.\n\nEnemy torpedoes hitting your ship explode on your shields (if they\nare up) and have essentially the same effect as phaser hits.'}getMode(e){let t=D("up","u"),n=D("down","d"),i=D("drain","dr"),a=D("charge","c");return{up:t.test(e),down:n.test(e),drain:i.test(e),charge:a.test(e)}}run(e){let{up:t,down:n,charge:i,drain:a}=this.getMode(e.arguments[0]);if(!(t||n||i||a))return this.terminal.printLine("Beg pardon, Captain?"),void this.terminal.printLine("Valid options are : 'up', 'down', 'charge', or 'drain'.");if(t)this.player.shieldsUp();else if(n)this.player.shieldsDown();else if(i||a){let t=this.player.shields,n=e.arguments[1];if(n=Number.parseInt(n),Number.isNaN(n))return void this.terminal.printLine(`${n} is an gibberish amount to transfer captain.`);if(0===n)return void this.terminal.printLine("Beg pardon Captain?");if(t.isDamaged())return void this.terminal.echo("Shields damaged.");if(i){if(this.player.energy<n)return void this.terminal.printLine("Not enough energy, Captain.");if(t.units===t.capacity)return void this.terminal.printLine("Shields already at max, Captain.");t.units+n>t.capacity&&(n=t.capacity-t.units),this.terminal.printLine("Charging shields."),this.player.useEnergy(n),t.charge(n)}else if(a){if(n>t.units&&(this.terminal.printLine("Not enough energy in shields. Draining what we have."),n=t.units),this.player.energy===this.player.energyCapacity)return void this.terminal.printLine("Ship energy already at max.");this.player.energy+n>this.player.energyCapacity&&(this.terminal.printLine("That would exceed our ship energy capacity. Setting ship energy to maximum."),n=this.player.energyCapacity-this.player.energy),t.drain(n),this.player.addEnergy(n)}}return e}}class X extends U{constructor(e,t){super(),this.game=e,this.terminal=t,this.name="commands",this.regex=_("commands"),this.type=F,this.info='\n ABBREV    FULL COMMAND                             DEVICE USED\n ------    ------------                             -----------\n C         CHART                                    (none)\n D         DOCK                                     (none)\n L         LRSCAN                                   long-range sensors\n M         MOVE [MANUAL] [DISPLACEMENT]             warp engines\n           MOVE AUTOMATIC [DESTINATION]             warp engines and computer\n P         PHASERS [TOTAL AMOUNT]                   phasers and computer\n           PHASERS AUTOMATIC [TOTAL AMOUNT]         phasers, computer, sr sensors\n           PHASERS MANUAL [AMT1] [AMT2] ...         phasers\n PHO       PHOTONS [NUMBER] [TARGETS]               torpedo tubes \n REP       REPORT                                   (none)\n REQ       REQUEST                                  (none)\n S         SRSCAN [NO or CHART]                     short-range sensors\n SH        SHIELDS [UP, DOWN, or TRANSFER]          deflector shields\n ST        STATUS                                   (none)\n\n L. R. Scan:   thousands digit:   supernova\n               hundreds digit:    Klingons\n               tens digit:        starbases\n               ones digit:        stars\n               period (.):        digit not known (star chart only)\n\nCourses are given in manual mode in X - Y displacements; in automatic\n    mode as destination quadrant and/or sector.  Manual mode is default.\nDistances are given in quadrants.  A distance of one sector is 0.1 quadrant.\nOrdinary Klingons have about 400 units of energy, Commanders about\n    1200.  Romulans normally have about 800 units of energy, and the\n    (GULP) "Super-Commander" has about 1800.\nPhaser fire diminishes to about 60 percent at 5 sectors.  Up to 1500\n    units may be fired in a single burst without danger of overheat.'}printCommands(){let e=[],t=[];this.game.commands.map(e=>e.name).sort().forEach(n=>{4===t.length&&(e.push(t),t=[]),t.push(`${n}`)}),t.length>0&&e.push(t);let n=this.terminal.formatGrid(e,!1);return this.terminal.printGrid(n,"   ")}run(e){return this.terminal.newLine(),this.terminal.echo(this.printCommands()),e}}class J extends U{constructor(e,t,n){super(),this.game=e,this.terminal=t,this.commandsCommand=n,this.abbreviation="help",this.name="help",this.regex=_("help"),this.fullName="ask for help",this.type=F,this.info="  Mnemonic:  HELP\n  Full command:  HELP [command]\n\nThis command reads the appropriate section from the SST.DOC file,\nproviding the file is in the current directory."}run(e){this.terminal.newLine();let t=e.arguments[0];if(!t)return e.ps="Help on what command?",e.next=this.name,e;let n=this.game.commands.find(e=>e.name===t);return n?(this.terminal.echo('Spock- "Captain, I\'ve found the following information:"\n\n'),this.terminal.echo(n.info)):(this.terminal.echo("Valid Commands:\n"),this.terminal.echo(this.commandsCommand.printCommands())),this.terminal.newLine(),e}}class Z extends U{constructor(e,t,n,i){super(),this.game=e,this.terminal=t,this.player=n,this.galaxy=i,this.abbreviation="",this.name="move",this.regex=_("m","move"),this.fullName="move under warp drive",this.type=K,this.canAskQuestions=!0,this.info='  Mnemonic:  MOVE\n  Shortest abbreviation:  M\n  Full command:  MOVE MANUAL [displacement]\n                 MOVE AUTOMATIC [destination]\n\nThis command is the usual way to move from one place to another\nwithin the galaxy.  You move under warp drive, according to the\ncurrent warp factor (see "WARP FACTOR").\n\nThere are two command modes for movement: MANUAL and AUTOMATIC.  The\nmanual mode requires the following format:\n\n        MOVE MANUAL [deltax] [deltay]\n\n[deltax] and [deltay] are the horizontal and vertical displacements\nfor your starship, in quadrants; a displacement of one sector is 0.1\nquadrants.  Specifying [deltax] and [deltay] causes your ship to move\nin a straight line to the specified destination. If [deltay] is\nomitted, it is assumed zero. For example, the shortest possible\ncommand to move one sector to the right would be\n\n        M M .1\n\nThe following examples of manual movement refer to the short-range\nscan shown earlier.\n\n  Destination Sector    Manual Movement command\n        3 - 1                   M M -.3 -.1\n        2 - 1                   M M -.3\n        1 - 2                   M M -.2 .1\n        1 - 4                   M M 0 .1\n  (leaving quadrant)            M M 0 .2\n\n\nThe automatic mode is as follows:\n\n        MOVE AUTOMATIC [qrow] [qcol] [srow] [scol]\n\nwhere [qrow] and [qcol] are the row and column numbers of the\ndestination quadrant, and [srow] and [scol] are the row and column\nnumbers of the destination sector in that quadrant.  This command also\nmoves your ship in a straight line path to the destination.  For\nmoving within a quadrant, [qrow] and [qcol] may be omitted. For\nexample, to move to sector 2 - 9 in the current quadrant, the\nshortest command would be\n\n        M A 2 9\n\nTo move to quadrant 3 - 7, sector 5 - 8, type\n\n        M A 3 7 5 8\n\nand it will be done.  In automatic mode, either two or four numbers\nmust be supplied.\n\f                                                                       10\nAutomatic mode utilizes the ship\'s "battle computer."  If the\ncomputer is damaged, manual movement must be used.\n\nIf warp engines are damaged less than 10 stardates (undocked) you can\nstill go warp 4.\n\nIt uses time and energy to move.  How much time and how much energy\ndepends on your current warp factor, the distance you move, and\nwhether your shields are up.  The higher the warp factor, the faster\nyou move, but higher warp factors require more energy.  You may move\nwith your shields up, but this doubles the energy required.\n\nYou can move within a quadrant without being attacked if you just\nentered the quadrant or have bee attacked since your last move\ncommand.  This enables you to move and hit them before they\nretaliate.'}*moveTo(e){let t=Galaxy.calculateDistance(this.player.gameObject.sector,e),n=.1*t*Math.pow(this.player.warpFactor,3);if(this.player.shields.up&&(n*=2),this.player.energy<n)return this.terminal.printLine("Engineering to bridge--"),void this.terminal.printLine("We haven't the energy for that.");let i=t/Math.pow(this.player.warpFactor,2),a=100*i/this.game.timeRemaining;if(a>80){this.terminal.ask(`First Officer Spock- "Captain, I compute that such\n  a trip would require approximately ${a.toFixed(2)}% of our\n  remaining time.  Are you sure this is wise?"`);let e=yield;if(/(yes|y)/i.test(e))this.terminal.printLine("To boldly go...");else if(/(no|n)/i.test(e))return void this.terminal.printLine("Cancelling move.")}this.player.warpTo(e),this.game.elapseTime(i)}*manual(e,t,n,i){try{let a=this.player.mover.calculateDestination(e,t,n,i),s=this.moveTo(a);if(!s.next().done){let e=yield;s.next(e)}}catch(e){return void this.terminal.printLine(e.message)}}*automatic(e,t,n,i){try{let a=this.galaxy.getSector(e,t,n,i),s=this.moveTo(a);if(!s.next().done){let e=yield;s.next(e)}}catch(e){return void this.terminal.printLine(e.message)}}*run(e){let t=!0,n=!1,i=D("m","manual"),a=D("a","automatic"),s=e.arguments;if(s.some(e=>i.test(e))&&(t=!0,n=!1,s=s.filter(e=>!i.test(e))),s.some(e=>a.test(e))&&(t=!1,n=!0,s=s.filter(e=>!a.test(e))),t){if(console.log("manual mode"),2!==s.length)throw new Error("need y and x");let[e,t]=s,n=Math.trunc(e),i=Math.trunc(t),a=Math.trunc(10*e%10),r=Math.trunc(10*t%10),o=this.manual(n,i,a,r);if(!o.next().done){let e=yield;o.next(e)}}else if(n)if(console.log("automatic mode"),4===(s=s.map(e=>Number.parseInt(e))).length){let e=this.automatic(s[0]-1,s[1]-1,s[2]-1,s[3]-1);if(!e.next().done){let t=yield;e.next(t)}}else if(2===s.length){let e=this.player.gameObject.quadrant,t=this.automatic(e.x,e.y,s[0]-1,s[1]-1);if(!t.next().done){let e=yield;t.next(e)}}return e}}class ee extends U{constructor(e,t,n,i){super(),this.game=e,this.terminal=t,this.player=n,this.galaxy=i,this.abbreviation="st",this.name="status",this.regex=_("st","status","status report"),this.fullName="status report",this.type=F,this.info='Mnemonic:  STATUS\n  Shortest abbreviation: ST\n\nThis command gives you information about the current state of your\nstarship as follows:\n\n  STARDATE - The current date. A stardate is the same as a day.\n\n  CONDITION - There are four possible conditions:\n        DOCKED - docked at starbase.\n        RED    - in battle.\n        YELLOW - low on energy (<1000 units)\n        GREEN  - none of the above\n\n  POSITION - Quadrant is given first, then sector\n\n  LIFE SUPPORT - If "ACTIVE" then life support systems are\n        functioning normally. If on "RESERVES" the number is how many\n        stardates your reserve food, air, etc. will last--you must\n        get repairs made or get to starbase before your reserves run\n        out.\n\n  WARP FACTOR - What your warp factor is currently set to.\n\n  ENERGY - The amount of energy you have left. If it drops to zero,\n        you die.\n\n  TORPEDOES - How many photon torpedoes you have left.\n\n  SHIELDS - Whether your shields are up or down, how strong they are\n       (what percentage of a hit they can deflect), and shield\n       energy.\n\n  KLINGONS LEFT - How many of the Klingons are still out there.\n\n  TIME LEFT - How long the Federation can hold out against the\n        present number of Klingons; that is, how long until the end\n        if you do nothing in the meantime.  If you kill Klingons\n        quickly, this number will go up--if not, it will go down.  If\n        it reaches zero, the federation is conquered and you lose.\n\nStatus information is free--it uses no time or energy, and if you are\nin battle, the Klingons are not given another chance to hit you.\n\nStatus information can also be obtained by doing a short-range scan.\nSee the SRSCAN command for details.\n\nEach item of information can be obtained singly by requesting it.\nSee REQUEST command for details.'}getStatusText(){let e=`Stardate\t${this.game.starDate.toFixed(1)}`,t=`Condition\t${this.player.printCondition()}`,n=this.player.gameObject.quadrant,i=this.player.gameObject.sector,a=`Hull Integrity\t${this.player.collider.health.toFixed(2)}`;return[e,t,`Position\t${n.x+1} - ${n.y+1}, ${i.x+1} - ${i.y+1}`,`Life Support\t${this.player.hasLifeSupport()?"ACTIVE":"FAILED"}`,`Warp Factor\t${this.player.warpFactor.toFixed(1)}`,`Energy\t\t${this.player.energy.toFixed(2)}`,a,`Torpedoes\t${this.player.photons.getTorpedoCount()}`,`Shields\t\t${this.player.shields.printInfo()}`,`Klingons Left\t${this.galaxy.container.getCountOfGameObjects(S)}`,`Time Left\t${this.game.timeRemaining.toFixed(2)}`]}run(e){return this.terminal.newLine(),this.terminal.echo(this.getStatusText().join("\n")),e}}class te extends U{constructor(e,t,n){super(),this.terminal=t,this.game=e,this.statusCommand=n,this.name="request",this.abbreviation="req",this.regex=_("req","request","request information"),this.fullName="request information",this.arguments=1,this.type=F,this.canAskQuestions=!0,this.info="Mnemonic:  REQUEST\n  Shortest abbreviation:  REQ\n  Full command:  REQUEST [ITEM]\n\nThis command allows you to get any single piece of information from\nthe [STATUS] command.  [ITEM] specifies which information as follows:\n\n INFORMATION       MNEMONIC FOR [ITEM]           SHORTEST ABBREVIATION\n\n STARDATE              DATE                                D\n CONDITION             CONDITION                           C\n POSITION              POSITION                            P\n LIFE SUPPORT          LSUPPORT                            L\n WARP FACTOR           WARPFACTOR                          W\n ENERGY                ENERGY                              E\n TORPEDOES             TORPEDOES                           T\n SHIELDS               SHIELDS                             S\n KLINGONS LEFT         KLINGONS                            K\n TIME LEFT             TIME                                TI"}*run(e){let t=e.arguments[0];t||(this.terminal.ask("Information desired? "),t=yield);let n,i=this.statusCommand.getStatusText(),a=D("date","d"),s=D("condition","c"),r=D("position","p"),o=D("lsupport","l"),h=D("warpfactor","w"),l=D("energy","e"),c=D("hull","health","h"),m=D("torpedoes","t"),u=D("shields","s"),d=D("klingons","s"),p=D("time","ti");return n=a.test(t)?i[0]:s.test(t)?i[1]:r.test(t)?i[2]:o.test(t)?i[3]:h.test(t)?i[4]:l.test(t)?i[5]:c.test(t)?i[6]:m.test(t)?i[7]:u.test(t)?i[8]:d.test(t)?i[9]:p.test(t)?i[10]:"UNRECOGNIZED REQUEST. Legal requests are:\n  date, condition, position, lsupport, warpfactor,\n  energy, torpedoes, shields, klingons, time.\n",this.terminal.echo(n),e}}class ne extends U{constructor(e,t,n){super(),this.terminal=t,this.game=e,this.player=n,this.abbreviation="c",this.name="chart",this.regex=_("c","chart","star chart"),this.fullName="star chart",this.type=F,this.info=`\n      Mnemonic:  ${this.name}\n      Shortest abbreviation:  ${this.abbreviation}\n    The chart looks like an 8 by 8 array of numbers.  These numbers are\n    interpreted exactly as they are on a long-range scan. A period (.) in\n    place of a digit means you do not know that information yet.  For\n    example, ... means you know nothing about the quadrant, while .1.\n    means you know it contains a base, but an unknown number of Klingons\n    and stars.\n\n    Looking at the star chart is a free operation.  It costs neither time\n    nor energy, and can be done safely whether in or out of battle.`}makeChartText(){let e=[];for(let t=0;t<this.game.galaxy.length;t++){let n=this.game.galaxy.getRow(t),i=[];n.forEach(e=>{let t=`${e.hasSupernova?"1":"."}${e.container.getCountOfGameObjects(S)}${e.container.getCountOfGameObjects(I)}${e.container.getCountOfGameObjects(N)}`;i.push(t)}),e.push(i)}e.forEach((e,t)=>{e.unshift(`${t+1} -`),e.push("-")});let t=[" "],n=e[0].length;for(let e=1;e<n-1;e++)t.push(`  ${e} `);let i=[" "];for(let e=1;e<n-1;e++)i.push("----");return e.unshift(i),e.unshift(t),this.terminal.formatGrid(e).map(e=>e.join("  ")).join("\n")}run(e){this.terminal.echo("\nSTAR CHART FOR THE KNOWN GALAXY\n"),this.terminal.newLine(),this.terminal.printLine(this.makeChartText()),this.terminal.printLine(),this.terminal.printLine("thousands digit:   supernova\nhundreds digit:    Klingons\ntens digit:        starbases\nones digit:        stars\nperiod (.):        digit not known"),this.terminal.printLine();this.player.gameObject.quadrant;return this.terminal.printLine(`Enterprise is currently in ${this.player.gameObject.getQuadrantLocation()}`),this.terminal.printLine(),e}}class ie extends U{constructor(e,t,n,i){super(),this.terminal=t,this.game=e,this.chartCommand=n,this.statusCommand=i,this.abbreviation="s",this.name="srscan",this.regex=_("s","srscan","short range scan"),this.fullName="short range scan",this.type=F,this.options={no:{abbreviation:"n",name:"no",description:"don't display status information"},chart:{abbreviation:"c",name:"no",description:"display star chart"}},this.info='Mnemonic:  SRSCAN\n    Shortest abbreviation:  S\n    Full commands:  SRSCAN\n                    SRSCAN NO\n                    SRSCAN CHART\n    The short-range scan gives you a considerable amount of information\n    about the quadrant your starship is in.  A short-range scan is best\n    described by an example.\n\n             1 2 3 4 5 6 7 8 9 10\n          1  * . . . . R . . . .  Stardate      2516.3\n          2  . . . E . . . . . .  Condition     RED\n          3  . . . . . * . B . .  Position      1 - 5, 4 - 2\n          4  . . . S . . . . . .  Life Support  DAMAGED, Reserves=2.30\n          5  . . . . . . . K . .  Warp Factor   5.0\n          6  . K .   . . . . * .  Energy        2176.24\n          7  . . . . . P . . . .  Torpedoes     3\n          8  . . . . * . . . . .  Shields       UP, 42% 1050.0 units\n          9  . * . . * . . . C .  Klingons Left 12\n         10  . . . . . . . . . .  Time Left     3.72\n\n\n    The left part is a picture of the quadrant.  The E at sector 4 - 2\n    represents the Enterprise; the B at sector 8 - 3 is a starbase.\n    There are ordinary Klingons (K) at sectors 8 - 5 and 2 - 6, and a\n    Klingon Commander (C) at 9 - 9.  The (GULP) "Super-commander" (S) is\n    occupies sector 4 - 4, and a Romulan (R) is at 6 - 1.  A planet (P)\n    is at sector 6 - 7.  There are also a large number of stars (*). The\n    periods (.) are just empty space--they are printed to help you get\n    your bearings.  Sector 6 - 4 contains a black hole ( ).\n\n    The information on the right is assorted status information. You can\n    get this alone with the STATUS command.  The status information will\n    be absent if you type "N" after SRSCAN.  Otherwise status information\n    will be presented.\n\n    If you type "C" after SRSCAN, you will be given a short-range scan\n    and a Star Chart.\n\n    Short-range scans are free.  That is, they use up no energy and no\n    time.  If you are in battle, doing a short-range scan does not give\n    the enemies another chance to hit you.  You can safely do a\n    short-range scan anytime you like.'}run(e){let t=!0;D("n","no").test(e.argumentStr)&&(t=!1);let n=!1;D("c","chart").test(e.argumentStr)&&(n=!0);let i=this.game.player.gameObject.quadrant,a=[];for(let e=0;e<i.sectors.length;e++){let t=[];i.sectors[e].forEach(e=>{let n=e.container.getAllGameObjects()[0];n?n instanceof T?t.push("K"):n instanceof k?t.push("C"):n instanceof C?t.push("S"):n instanceof j?t.push("R"):n instanceof A?t.push("E"):n instanceof N?t.push("*"):n instanceof P?t.push("P"):n instanceof I?t.push("B"):n instanceof q&&t.push(" "):t.push(".")}),a.push(t)}a.forEach((e,t)=>{e.unshift(`${t+1}`)});let s=[" "],r=a[0].length;for(let e=1;e<r;e++)s.push(`${e}`);if(a.unshift(s),this.terminal.newLine(),a=this.terminal.formatGrid(a),t){a=a.map(e=>e.join(" ")),this.statusCommand.getStatusText().forEach((e,t)=>{a[t]+="\t"+e});let e=a.join("\n");this.terminal.echo(e)}else this.terminal.echo(this.terminal.formatGrid(a));n&&(this.terminal.echo("\n\n"),this.terminal.echo(this.chartCommand.makeChartText())),this.terminal.newLine(),this.terminal.newLine(),this.terminal.printLine(". = nothing; K = klingon; C = commander; S = super commander; R = romulan; E = Enterprise;"),this.terminal.printLine("* = star; p = planet; b = base; empty = black hole."),this.terminal.newLine()}}class ae extends U{constructor(e,t,n){super(),this.terminal=t,this.game=e,this.player=n,this.abbreviation="l",this.name="lrscan",this.regex=_("l","lrscan","long range scan"),this.fullName="Long Range Scan",this.type=F,this.info='  Mnemonic:  LRSCAN\n      Shortest abbreviation:  L\n\n    A long-range scan gives you general information about where you are\n    and what is around you.  Here is an example output.\n\n        Long-range scan for Quadrant 5 - 1\n           -1  107  103\n           -1  316    5\n           -1  105 1000\n\n    This scan says that you are in row 5, column 1 of the 8 by 8 galaxy.\n    The numbers in the scan indicate how many of each kind of thing there\n    is in your quadrant and all adjacent quadrants.  The digits are\n    interpreted as follows.\n\n        Thousands digit:  1000 indicates a supernova (only)\n        Hundreds digit:   number of Klingons present\n        Tens digit:       number of starbases present\n        Ones digit:       number of stars present\n\n    For example, in your quadrant (5 - 1) the number is 316, which\n    indicates 3 Klingons, 1 starbase, and 6 stars.  The long-range\n    scanner does not distinguish between ordinary Klingons and Klingon\n    command ships.  If there is a supernova, as in the quadrant below and\n    to your right (quadrant 6 - 2), there is nothing else in the\n    quadrant.\n\n    Romulans possess a "cloaking device" which prevents their detection\n    by long-range scan.  Because of this fact, Starfleet Command is never\n    sure how many Romulans are "out there".  When you kill the last\n    Klingon, the remaining Romulans surrender to the Federation.\n\n    Planets are also undetectable by long-range scan.  The only way to\n    detect a planet is to find it in your current quadrant with the\n    short-range sensors.\n\n    Since you are in column 1, there are no quadrants to your left. The\n    minus ones indicate the negative energy barrier at the edge of the\n    galaxy, which you are not permitted to cross.\n\n    Long-range scans are free.  They use up no energy or time, and can be\n    done safely regardless of battle conditions.'}run(e){let t=this.game.player.gameObject.quadrant,n=[];for(let e=t.y-1;e<=t.y+1;e++){let i=[];for(let n=t.x-1;n<=t.x+1;n++){let t=null;try{if(t=this.game.galaxy.getQuadrant(n,e)){let e=0,n=t.hasSupernova?"1":" ",a=t.container.getCountOfGameObjects(S);e+=100*a,a=0===a?" ":a;let s=t.container.getCountOfGameObjects(I);s=0===s?" ":s;let r=t.container.getCountOfGameObjects(N),o=`${n}${a}${s}${r=0===r?" ":r}`;i.push(o)}else i.push("-1")}catch(e){i.push("-1")}}n.push(i)}this.terminal.echo(`\nLong-range scan for ${this.player.gameObject.getQuadrantLocation()}\n\n`);let i=this.terminal.formatGrid(n).map(e=>e.join("\t")).join("\n");return this.terminal.echo(i),this.terminal.newLine(),e}}class se extends U{constructor(e,t,n){super(),this.game=e,this.terminal=t,this.player=n,this.abbreviation="d",this.name="dock",this.fullName="dock at starbase",this.regex=_(this.abbreviation,this.name,this.fullName),this.deviceUsed="",this.options={},this.type=F,this.info="\n  Mnemonic:  DOCK\n  Shortest abbreviation:  D\n\nYou may dock your starship whenever you are in one of the eight\nsector positions immediately adjacent to a starbase.  When you dock,\nyour starship is resupplied with energy, shield energy photon\ntorpedoes."}run(e){if(this.player.docked)return void this.terminal.echo("Already docked.");let t=this.player.gameObject.sector,n=this.player.gameObject.quadrant,i=!1;for(let e=t.x-1;e<=t.x+1;e++){for(let a=t.y-1;a<=t.y+1;a++)try{let t=n.getSector(e,a).container.getGameObjectsOfType(I)[0];if(t){i=!0,this.player.dock(t),this.terminal.echo("Docked.");break}}catch(e){}if(i)break}i||this.terminal.echo(`${this.player.name} is not adjacent to a starbase.`)}}const re=1,oe=2,he=4,le=1,ce=2,me=3,ue=4,de=5,pe=1,ge=2,fe=3;class ye{constructor(e,t){if(this.terminal=e,this.service=new r,this.galaxy=new p(8,8,10,10,!0),this.commands=[],this.player=new A(this.terminal),we){let e=this.galaxy.getQuadrant(0,0),t=e.getSector(4,4);this.player.gameObject.placeIn(this.galaxy,e,t),t=e.getSector(0,0);let n=new T(this.galaxy,this.player,this);n.gameObject.placeIn(this.galaxy,e,t),t=e.getSector(9,0),(n=new T(this.galaxy,this.player,this)).gameObject.placeIn(this.galaxy,e,t),t=e.getSector(9,9),(n=new T(this.galaxy,this.player,this)).gameObject.placeIn(this.galaxy,e,t),t=e.getSector(0,9),(n=new T(this.galaxy,this.player,this)).gameObject.placeIn(this.galaxy,e,t),t=e.getSector(4,0),(n=new T(this.galaxy,this.player,this)).gameObject.placeIn(this.galaxy,e,t),t=e.getSector(9,4),(n=new T(this.galaxy,this.player,this)).gameObject.placeIn(this.galaxy,e,t),t=e.getSector(4,9),(n=new T(this.galaxy,this.player,this)).gameObject.placeIn(this.galaxy,e,t),t=e.getSector(0,4),(n=new T(this.galaxy,this.player,this)).gameObject.placeIn(this.galaxy,e,t)}else{let e=this.galaxy.getRandomQuadrant(),t=e.getRandomSector();this.player.gameObject.placeIn(this.galaxy,e,t)}this.length=re,this.initialStarDate=100*(31*Math.random()+20),this.starDate=this.initialStarDate,this.timeRemaining=7,this.skill=le,this.secretPassword=null,this.resolveUserCommand=null,this.initialEnemies=null,this.initialKlingons=null,this.initialCommanders=null,this.initialSuperCommands=null,this.initialRomulans=null,this.fallenFoes=[],this.federationPowerRemaining=null}calculateKlingonStrength(){return this.galaxy.container.getCountOfGameObjects(T)+4*this.galaxy.container.getCountOfGameObjects(k)}decrementFederationPower(e){this.federationPowerRemaining-=e*this.calculateKlingonStrength()}recalculateTimeRemaining(){this.timeRemaining=this.federationPowerRemaining/this.calculateKlingonStrength()}elapseTime(e){this.starDate+=e,this.decrementFederationPower(e),this.recalculateTimeRemaining()}calculateScore(){let e=this.getNumberOfTypeKilled(S),t=10*this.getNumberOfTypeKilled(T)+50*this.getNumberOfTypeKilled(k)+200*this.getNumberOfTypeKilled(C);t+=20*this.getNumberOfTypeKilled(j);let n=this.starDate-this.initialStarDate;return 0===n&&(n=1),t+=500*(e/n),this.isVictory()&&(t+=100*this.skill),this.player.isDead()&&(t-=200),t}getGameLengthStr(){switch(this.length){case re:return"short";case oe:return"medium";case he:return"long";default:console.error("unknown game length")}}getDifficultyStr(){switch(this.skill){case le:return"novice";case ce:return"fair";case me:return"good";case ue:return"expert";case de:return"emeritus";default:console.error("unknown difficulty")}}killEnemy(e){this.fallenFoes.push(e)}getNumberOfTypeKilled(e){return this.fallenFoes.reduce((t,n)=>(n instanceof e&&t++,t),0)}setup(){this.makeCommands(),this.makeStars(),this.makePlanets(),this.makeBases(),this.makeBlackHoles(),this.makeEnemies(),this.timeRemaining=7*this.length,this.federationPowerRemaining=this.calculateKlingonStrength()*this.timeRemaining,this.registerCommands(),this.loop()}start(){this.setup();let e=this.galaxy.container.getGameObjectsOfType(I),t=e.map(e=>[e.gameObject.quadrant.x+1,e.gameObject.quadrant.y+1].join(" - ")).join("   "),n=`It is stardate ${this.starDate.toFixed(0)}. Federation is being attacked by\na deadly Klingon invasion force. As captain of the United\nStarship U.S.S. Enterprise, it is your mission to seek out\nand destroy this invasion force of ${this.numberOfKlingons} klingons.\n\nThe Klingons will overpower the Federation in ${this.timeRemaining} days, every Klingon you destroy will \nweaken this invasion force and buy us more time.\n\nYou will have ${e.length} supporting starbases.\nStarbase locations-   ${t}\n\nThe Enterprise is currently in ${this.player.gameObject.getLocation()}\n\nTRY TYPING "COMMANDS"\n\nGood Luck!\n`;this.terminal.$terminal.echo(n)}isInCombat(){return this.player.gameObject.quadrant.container.getCountOfGameObjects(x)>0}async loop(){let e=!1;for(;!this.isDefeat()&&!this.isVictory();){let t=!0,n=!1,i=!1,a=!1;for(;t&&!this.isVictory()&&!this.isDefeat();){let{command:s,commandObj:r}=await this.terminal.runUserCommand();s.isInfoCommand()||s.isInstantShipCommand()||(this.recalculateTimeRemaining(),i=(a=this.isInCombat())&&!e,a?s.isMoveCommand()?(!n&&e||(t=!1),n=!0):t=(s.isAttackCommand(),!1):n=!1)}if(this.isVictory()||this.isDefeat())break;a&&!i&&this.player.gameObject.quadrant.container.getGameObjectsOfType(x).forEach(e=>{e.ai.takeTurn()}),e=a,this.terminal.print(),this.recalculateTimeRemaining()}let t=this.isVictory(),n=this.isDefeat(),i=this.calculateScore();this.service.createGameLog(i,t),this.terminal.skipLine(2),t?(this.terminal.printLine("You win!"),this.terminal.printLine(`It is stardate ${this.starDate.toFixed(1)}.`),this.terminal.print()):n&&(this.terminal.printLine("You lose..."),this.terminal.printLine(`It is stardate ${this.starDate.toFixed(1)}.`),this.timeRemaining<=0?this.terminal.printLine("Your time has run out and the Federation has been conquered.\nWith your starship confiscated by the Klingon High Command, you relocate to a mining facility and learn to love gagh."):this.player.isDead()&&(this.terminal.printLine("The Enterprise has been destroyed in battle."),this.terminal.skipLine(),this.terminal.printLine("Dulce et decorum est pro patria mori.\nThe Federation will be destroyed."),this.terminal.skipLine()),this.terminal.print()),this.terminal.silent=!1,new W(this,this.terminal,this.player).run({}),this.terminal.print()}isDefeat(){return this.player.isDead()||this.timeRemaining<=0}isVictory(){return 0===this.galaxy.container.getCountOfGameObjects(S)}makeCommands(){this.commands=[];let e=new ne(this,this.terminal,this.player),t=new X(this,this.terminal),n=new ee(this,this.terminal,this.player,this.galaxy);this.commands.push(new z(this,this.terminal,this.player)),this.commands.push(t),this.commands.push(n),this.commands.push(new te(this,this.terminal,n)),this.commands.push(e),this.commands.push(new ie(this,this.terminal,e,n)),we&&this.commands.push(new ae(this,this.terminal,this.player)),this.commands.push(new J(this,this.terminal,t)),this.commands.push(new Z(this,this.terminal,this.player,this.galaxy)),this.commands.push(new V(this,this.terminal,this.player)),this.commands.push(new se(this,this.terminal,this.player)),this.commands.push(new B(this,this.terminal,this.player)),this.commands.push(new Q(this,this.terminal,this.galaxy,this.player)),this.commands.push(new W(this,this.terminal,this.player)),this.commands.push(new Y(this.terminal,this.player))}registerCommands(){this.commands.forEach(e=>{this.terminal.registerCommand(e)})}makeBlackHoles(){this.galaxy.quadrants.forEach(e=>{e.forEach(e=>{for(let t=0;t<3;t++){let t=e.getRandomEmptySector();(new q).gameObject.placeIn(this.galaxy,e,t)}})})}makeStars(){this.galaxy.quadrants.forEach((e,t)=>{e.forEach((e,t)=>{let n=Math.round(8*Math.random()+1);for(let t=0;t<n;t++){let t=new N,n=e.getRandomEmptySector();n.container.isEmpty(),t.gameObject.placeIn(this.galaxy,n.quadrant,n)}})})}makePlanets(){let e=Math.round(5+10/3*Math.random());console.log(`number of planets = ${e}`);for(let t=0;t<e;t++){let e;do{e=this.galaxy.getRandomQuadrant()}while(e.container.getCountOfGameObjects(P)>0);let t=e.getRandomEmptySector(),n=new P;n.randomlyGenerate(),n.gameObject.placeIn(this.galaxy,e,t),console.log(`planet at ${n.gameObject.getLocation()}`)}}makeBases(){let e=Math.round(3*Math.random()+2),t=[];for(;t.length<e;){let n=this.galaxy.getRandomQuadrant();if(0===n.container.getCountOfGameObjects(I)){let i=!1;for(let a=0;a<t.length;a++){let s=t[a].gameObject.quadrant,r=n.x-s.x,o=n.y-s.y;if(r*r+o*o<6*(6-e)&&Math.random()<.75){i=!0;break}}if(!i){console.log("making starbase");let e=new I,i=n.getRandomEmptySector();e.gameObject.placeIn(this.galaxy,n,i),t.push(e)}}}}makeEnemies(){let e=Math.round(14*this.length*((this.skill+1-2*Math.random())*this.skill*.1+.15));console.log(`number of enemies = ${e}`);let t=Math.round(this.skill+.0625*e*Math.random());t=Math.min(10,t);let n=this.skill>ce?1:0,i=e-t-n;this.numberOfKlingons=i;let a=Math.round(2*Math.random()*this.skill);this.initialEnemies=e,this.initialKlingons=i,this.initialCommanders=t,this.initialSuperCommands=n,this.initialRomulans=a,this.makeKlingons(i),this.makeKlingonCommanders(t),this.makeKlingonSuperCommanders(n),this.makeRomulans(a)}makeKlingonSuperCommanders(e){for(let t=0;t<e;t++){let e;do{e=this.galaxy.getRandomQuadrant()}while(e.container.getCountOfGameObjects(S)>0);let t=new C(this.galaxy,this.player,this),n=e.getRandomEmptySector();t.gameObject.placeIn(this.galaxy,e,n),console.log("placing super commander")}}makeKlingonCommanders(e){for(let t=0;t<e;t++){let e;do{e=this.galaxy.getRandomQuadrant()}while(e.container.getCountOfGameObjects(S)>0);let t=new k(this.galaxy,this.player,this),n=e.getRandomEmptySector();t.gameObject.placeIn(this.galaxy,e,n),console.log("placing commander")}}makeKlingons(e){let t=Math.min(.25*this.skill*(9-this.length)+1,9),n=this.galaxy.quadrants.flat();for(;e>0;){let i=Math.round(Math.random()*(n.length-1)),a=n.splice(i,1)[0];if(!a)break;let s=Math.random(),r=Math.round((1-s*s)*t);r=Math.min(r,e);for(let t=0;t<r&&!a.isFull();t++){let t=a.getRandomEmptySector();console.log("placing klingon"),new T(this.galaxy,this.player,this).gameObject.placeIn(this.galaxy,a,t),e--}}}makeRomulans(e){for(let t=0;t<e;t++){let e=this.galaxy.getRandomQuadrant(),t=e.getRandomEmptySector(),n=new j(this.galaxy,this.player,this);console.log("placing romulan"),n.gameObject.placeIn(this.galaxy,e,t)}}}class be{constructor(e){this.mode=null,this.length=null,this.difficulty=null,this.secretPassword=null,this.tournamentNumber=null,this.terminal=e,this.startGamePs="COMMAND>",this.game=null}skipLine(e){var t="";for(let n=0;n<e;n++)t+="\n";this.terminal.$terminal.echo(t)}start(){this.mode=null,this.length=null,this.difficulty=null,this.secretPassword=null,this.skipLine(2),this.terminal.$terminal.echo(`Latest update- ${ve}.`),this.skipLine(1),this.ask("Would you like a regular, tournament, or frozen game?",["regular","tournament","frozen"],this.chooseMode.bind(this))}chooseMode(e){e=e.toLowerCase(),/regular/.test(e)?(this.mode=pe,this.skipLine(1),this.ask("Would you like a Short, Medium, or Long game? ",["short","medium","long"],this.chooseLength.bind(this))):/tournament/.test(e)?(this.mode=ge,this.terminal.$terminal.echo("Sorry that's not implemented."),this.start()):/frozen/.test(e)&&(this.mode=fe,this.terminal.$terminal.echo("Sorry that's not implemented."),this.start())}chooseLength(e){e=e.toLowerCase(),/short/.test(e)?this.length=re:/medium/.test(e)?this.length=oe:/long/.test(e)&&(this.length=he),this.ask("Are you a Novice, Fair, Good, Expert, or Emeritus player? ",["novice","fair","good","expert","emeritus"],this.chooseDifficulty.bind(this))}chooseDifficulty(e){e=e.toLowerCase(),/novice/.test(e)?this.difficulty=le:/fair/.test(e)?this.difficulty=ce:/good/.test(e)?this.difficulty=me:/expert/.test(e)?this.difficulty=ue:/emeritus/.test(e)&&(this.difficulty=de),this.prompt("Please type in a secret password (9 characters maximum)-",this.chooseSecretPassword.bind(this),this.startGamePs)}chooseSecretPassword(e){this.secretPassword=e,this.finish()}finish(){this.terminal.$terminal.change_settings({ps:this.startGamePs}),this.game.skill=this.difficulty,this.game.length=this.length,this.game.secretPassword=this.secretPassword,this.game.start()}prompt(e,t,n){this.terminal.$terminal.echo(e),this.terminal.$terminal.register("command",{name:"ask",method:e=>{let i=this.terminal.$terminal.get_input();if(this.terminal.$terminal.unregister("command","ask"),setTimeout(()=>t(i),10),n)return{ps:n}},regex:new RegExp("[sS]*","i")})}ask(e,t,n){this.terminal.$terminal.echo(e),this.terminal.$terminal.register("command",{name:"ask",method:e=>{let t=this.terminal.$terminal.get_input();this.terminal.$terminal.unregister("command","ask"),setTimeout(()=>n(t),10)},regex:new RegExp(`(${t.join("|")})`,"i")})}}n.d(t,"DEBUG",(function(){return we})),n.d(t,"LAST_UPDATED_AT",(function(){return ve})),new i.a("error").init();const we=!0,ve="Oct 10 2019";$(document).ready((function(){(new a.a).init();o.$terminal=$("#terminal").Ptty({ps:we?"COMMAND>":"",autocomplete:!0,i18n:{welcome:"-SUPER- STAR TREK\n\n",error_not_found:"Command not recognized, try 'help'.",error_bad_methdo:"Command malformed. Try 'help'."}});let e=new ye(o),t=new be(o);t.game=e,o.silent=!1,we?(e.start(),window.game=e,window.terminal=o):t.start()}))}]);