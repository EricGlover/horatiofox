/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./web/js/games/superStarTrek.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./web/js/games/superStarTrek.js":
/*!***************************************!*\
  !*** ./web/js/games/superStarTrek.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_ptty_jquery_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/ptty.jquery.js */ \"./web/lib/ptty.jquery.js\");\n/* harmony import */ var _lib_ptty_jquery_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_ptty_jquery_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n$(document).ready(function() {\n  // todo:: setup\n  let $ptty = $(\"#terminal\").Ptty({\n    ps: \"\",\n    autocomplete: true,\n    il8n: {\n      welcome: \"-SUPER- STAR TREK\\n\\n\",\n      error_not_found: \"Command not recognized, try 'help'.\",\n      error_bad_methdo: \"Command malformed. Try 'help'.\"\n    }\n  });\n\n  // todo:: setup commands\n\n  // todo:: print welcome screen\n  $ptty.echo(\"SUPER STAR TREK\");\n  $ptty.echo(\"-SUPER- STAR TREK\");\n  $ptty.echo(\"\\n\\n\");\n});\n\n// set up terminal\n// import { Terminal } from \"xterm\";\n// var term = new Terminal({ cursorBlink: true });\n// let $term = $(\"#terminal\");\n// // $term.on(\"keypress\", e => {\n// //   debugger;\n// // });\n// term.open($term.eq(0)[0]);\n// term.write(\"SUPER STAR TREK\\n\");\n// term.write(\"Hello from \\x1B[1;3;31mxterm.js\\x1B[0m $ \");\n// term.on(\"key\", (key, ev) => {\n//   console.log(key.charCodeAt(0));\n//   if (key.charCodeAt(0) == 13) term.write(\"\\n\");\n//   term.write(key);\n// });\n// term.textarea.onkeypress = function(e) {\n//\n//   term.write(String.fromCharCode(e.keyCode));\n// };\n// let myBuffer = [];\n//\n// // This is an xterm.js instance\n// term.on('key', function(key, e) {\n//   myBuffer.push(key);\n// });\n//\n// term.on('lineFeed', function() {\n//   let keysEntered = myBuffer.join('');  // Or something like that\n//   myBuffer = [];  // Empty buffer\n// });\n\n\n//# sourceURL=webpack:///./web/js/games/superStarTrek.js?");

/***/ }),

/***/ "./web/lib/ptty.jquery.js":
/*!********************************!*\
  !*** ./web/lib/ptty.jquery.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @file   : ptty.jquery.js\n * @ver    : 0.0.5 (beta)\n * @author : Pachanka <social@pachanka.org>\n * @url    : http://goto.pachanka.org/ptty/docs\n * @desc   : Ptty (Pseudo teletype). A terminal emulator plugin for jQuery.\n * @license: WTFPL Version 2. (http://www.wtfpl.net/)\n **/\n\n( function( $ ) {\n\n    \"use strict\";\n\n    /**\n    * @method : Ptty\n    * @public\n    * @desc   : Sets up the terminal on the jQuery object that represents a\n                group of HTML nodes.\n    * @args   : object\n    **/\n    $.fn.Ptty = function(options) {\n\n        var version = \"0.0.5 beta\";\n\n        /**\n        * @function : get_defaults\n        * @returns  : Object\n        * @desc     : Returns Global Defaults\n        * */\n        var get_defaults = function() {\n\n            return {\n                // The HTTP Method that will be used for Ajax Requests\n                ajax_options : {\n                    url  : window.location.pathname,\n                    type : 'POST'\n                },\n\n                // The GET/POST parameter that should be used to make requests\n                param        : 'cmd',\n\n                // The Primary Prompt (it's better to edit this using css)\n                ps           : '$',\n\n                // Caret (the cursor)\n                caret        : '\\u25ae', // Black Vertical Rectangle â–®\n                caret_blink  : 800,\n\n                // use native css and default theme name.\n                native_css   : true,\n                theme        : 'boring',\n\n                // Register help, clear and history commands\n                native_cmds  : true,\n\n                // Is Autocomplete feature Enabled\n                autocomplete : true,\n\n                // Number of entries to be stored in history (0 = off)\n                history_max  : 800,\n\n                // Autofocus on input on load\n                autofocus    : true,\n\n                // Run this function before every command\n                before_cmd   : false,\n\n                // Run this function after every command\n                after_cmd    : false,\n\n                // Language\n                i18n : {\n                    // Message to be shown when the terminal is first\n                    welcome : 'Ptty ('+version+').<br> Type <b>help</b> to list the available commands.',\n                    // When command is not found: \"CMD\" will be replaced\n                    error_not_found : 'Command not found.',\n                    // If command method is not valid\n                    error_bad_method : 'Invalid command method.',\n                    // Ajax response failed\n                    error_ajax : 'Server error.'\n                }\n            };\n        };\n\n        // The public methods container\n        var public_methods = {};\n\n        // jQuery Plugin\n        this.each( function() {\n\n            // Ptty holder element\n            var el = $(this);\n\n            /**\n            * @property : commands\n            * @desc     : Stores command name and action to be taken when user enters a command.\n            **/\n            var commands = {};\n\n            /**\n            * @property : response\n            * @desc     : Stores the methods for command responses.\n            **/\n            var responses = {};\n\n            /**\n            * @property : callbacks\n            * @desc     : Callbacks object that stores callback methods.\n            **/\n            var callbacks = {};\n\n            /**\n            * @property : callbefores\n            * @desc     : Calls function before running through Ptty.\n            **/\n            var callbefores = {};\n\n            /**\n            * @property : history\n            * @desc     : Mantains the record of called commands\n            **/\n            var history  = [];\n\n            /**\n            * @property : cmd_opts\n            * @desc     : Options of current command.\n            **/\n            var cmd_opts = {\n                // The ps value\n                ps    : null,\n                // The command string\n                in    : null,\n                // The output of the command.\n                out   : null,\n                // The last command (can be object)\n                last  : null,\n                // Do this next (can be object)\n                next : null,\n                // All the rest of data.\n                data : null\n            };\n\n            // Merge options with defaults (if any)\n            var settings = $.extend( true, get_defaults(), options );\n\n            /**\n            * @method   : get_terminal\n            * @desc     : Returns the terminal element or a sub-element\n            **/\n            public_methods.get_terminal = function(selector){\n                return (!selector) ? el : el.find(selector);\n            };\n\n            /**\n            * @method   : native_style\n            * @desc     : Registers the native CSS rules.\n            **/\n            public_methods.native_style = function(el, theme){\n                var att = el.attr('id');\n                if(!att){\n                    att = '.'+el.attr('class').split(' ')[1];\n                }else{\n                    att = '#'+att;\n                }\n                if(theme === 'boring'){\n                    var boring_theme = [\n                        '.boring, .boring .prompt, .boring .content'+\n                            '{ font-family: \"Courier New\", Courier, monospace; background-color: #111; color: #ddd; }',\n                        '.boring .content'+\n                            '{ padding: 15px 15px 0 15px; }',\n                        '.boring .prompt'+\n                            '{ padding: 0 15px 15px 15px; }',\n                        '.boring .loading span::after'+\n                            '{content: \"\\u2699\"; color: #ddd; font-size: 10em; border-radius: 10em; opacity: 0.4;}',\n                        '.boring .content ul'+\n                            '{ margin: 0; }',\n\n                        '.boring .prompt .input.show-caret'+\n                            '{ color: #ddd; opacity: .85; }', // When edit mode is on show caret\n                        '.boring .prompt .input, .boring .prompt .input::before, .boring .prompt .input::after'+\n                            '{ color: transparent; text-shadow:0 0 0 #ddd; }', // Caret remover hack\n                        '.boring .content div .cmd_in .cmd_ps, .boring .prompt .input::before'+\n                            '{ padding-right: 10px; }',\n                        '.boring .content ul li'+\n                            '{ list-style-type: none; }',\n                        '.boring div.prompt div.input::after'+\n                            '{ font-size: 2em; }',\n                        '.boring div.prompt div.input, .boring div.content div div.cmd_in, .boring div.prompt div.input::before'+\n                            '{ line-height: 2em; }'\n                    ];\n                    boring_theme = boring_theme.join(\"\\n\");\n\n                    $('<style id=\"ptty-boring-theme\">'+boring_theme+'</style>').appendTo('head');\n                }\n\n                var rules = [\n                    att+\n                        '{ position: relative; display: block; overflow-X: hidden; height: 100%; }',\n                    'div.content div p'+\n                        '{ margin: 0; }',\n                    'div.content div'+\n                        '{ clear: both; white-space:pre-wrap; word-wrap:break-word; }',\n                    'div.content div ul'+\n                        '{ padding: 0; white-space: normal }',\n                    'div.content div ul li'+\n                        '{ list-style: none; }',\n                    'div.content div ul.sq-li li'+\n                        '{ display: inline-block; text-align: center; padding: 10px; min-width: 5%; }',\n\n                    'div.prompt div.input'+\n                        '{ width: 100%; white-space:pre-wrap; word-wrap:break-word; cursor: default; outline: none;}',\n                    'div.prompt div.input::before'+\n                        '{ vertical-align: middle; content: attr(data-ps); }',\n                    'div.prompt div.input::after'+\n                        '{ visibility : visible; vertical-align: middle; content: attr(data-caret); margin-left:-0.15em;}',\n                    'div.prompt div.input.blink::after'+\n                        '{ visibility : hidden; }',\n                    'div.prompt .hide'+\n                        '{ position:absolute; top: -9999em; }',\n\n                    'div.loading'+\n                        '{ display: none; }',\n                    'div.loading.working'+\n                        '{ display: block; display:flex; justify-content: center; align-items: center;'+\n                        'position: fixed;  width: inherit; height: inherit; }',\n                    'div.loading span'+\n                        '{ -webkit-animation: spin 4s linear infinite; -moz-animation: spin 4s linear infinite; '+\n                        '-ms-animation: spin 4s linear infinite; -o-animation: spin 4s linear infinite; '+\n                        'animation: spin 4s linear infinite; }'\n                ];\n                rules = rules.join(\"\\n\"+' '+att+' ');\n\n                // Loading spinning animation\n                rules += '@-moz-keyframes spin { 100% { -moz-transform: rotate(360deg); } }'+\n                    '@-webkit-keyframes spin { 100% { -webkit-transform: rotate(360deg); } }'+\n                    '@-ms-keyframes spin { 100% { -ms-transform: rotate(360deg); } }'+\n                    '@-o-keyframes spin { 100% { -o-transform: rotate(360deg); } }'+\n                    '@keyframes spin { 100% { transform: rotate(360deg); } }';\n\n                $('<style id=\"ptty-styles\">'+rules+'</style>').appendTo('head');\n            };\n\n            /**\n            * @method   : ptty_native_commands\n            * @desc     : Registers the native Ptty commands\n            **/\n            public_methods.native_commands = function(){\n\n                public_methods.register('command',{\n                    name : 'clear',\n                    method : function(cmd) {\n                        cmd.last = '';\n                        cmd.out = '';\n                        return cmd;\n                    },\n                    options : [],\n                    help : 'Cleans the screen leaving a new command prompt ready.'\n                });\n                public_methods.register('callback',{\n                    name : 'clear',\n                    method : function(cmd) {\n                        el.find('.content').html('');\n                        return cmd;\n                    }\n                });\n\n                public_methods.register('command',{\n                        name : 'history',\n                        method : function(cmd) {\n                            if(cmd.hasOwnProperty('clear')){\n                                history = [];\n                                cmd.out = 'History cleared.';\n                            }else if(history.length > 0){\n                                var i;\n                                cmd.out = '<ul>';\n                                for(var i = 0; i < history.length; i+=1) {\n                                    cmd.out += '<li>' + history[i] + '</li>';\n                                }\n                                cmd.out += '</ul>';\n                            }\n                            return cmd;\n                        },\n                        options : ['clear'],\n                        help : 'Shows list of typed in commands. Type <i>history clear</i> to clear your history.'\n                });\n\n                public_methods.register('command', {\n                        name : 'help',\n                        method : function(cmd) {\n                            var command_keys = Object.keys(commands);\n                            if(typeof cmd[1] === 'string' && cmd[1].length > 0){\n                                if(cmd.hasOwnProperty('-a') || cmd.hasOwnProperty('--all')){\n                                    cmd.out = '<b>Available commands:</b></br></br><ul>';\n                                    \n                                    for (var i = 0; i < command_keys.length; i+=1) {\n                                        cmd.out += '<li><p><b>'+i+'</b> - ';\n                                        cmd.out += commands[command_keys[i]].help+'</p></br></li>';\n                                    }\n                                    cmd.out += '</ul>'+\"\\n\";\n                                }else if(typeof commands[cmd[1]] !== 'undefined'){\n                                    cmd.out  = '<b>'+cmd[1]+'</b> - ';\n                                    if(commands[cmd[1]].help !== ''){\n                                        cmd.out += commands[cmd[1]].help+\"\\n\";\n                                    }else{\n                                        cmd.out += 'No help entry available.'+\"\\n\";\n                                    }\n                                }else{\n                                    cmd.out = 'help: The \"' + cmd[1] + '\" option does not exist.'+\"\\n\";\n                                }\n                            }else{\n                                cmd.out  = 'Use \"help [comand name]\" to display specific info about a command.</br>'+\"\\n\";\n                                cmd.out += 'Available commands are:</br><ul class=\"sq-li\">';\n                                for (var i = 0; i < command_keys.length; i+=1) {\n                                    cmd.out += '<li>'+command_keys[i]+'</li>';\n                                }\n                                cmd.out += '</ul>'+\"\\n\";\n                            }\n                            return cmd;\n                        },\n                        options : [1, '-a', '--all'],\n                        help : 'Displays a list of useful information. Usage: '+\n                        '<i>help command-name</i> to show <i>command-name</i>\\'s help.'+\n                        '<i>help -a</i> or <i>help --all</i> to display all help.'\n                });\n            };\n\n            /**\n            * @method   : ptty_native_responses\n            * @desc     : Registers the native Ptty commands\n            **/\n            public_methods.native_responses = function(cmd_opts){\n                for(var opt in cmd_opts){\n                    if (cmd_opts.hasOwnProperty(opt)) {\n                        public_methods.register('response', {\n                            name : opt,\n                            method : function(cmd){\n                                cmd_opts[opt] = cmd[opt];\n                                return cmd;\n                            }\n                        });\n                    }\n                }\n            };\n\n            /**\n            * @method : run_command\n            * @desc   : Takes a string and runs it as a command.\n            **/\n            public_methods.run_command = function(command, mute){\n                quiet = mute;\n                cmd_start(command);\n            };\n\n            /**\n            * @method : echo\n            * @desc   : Takes a string and\n            **/\n            public_methods.echo = function(out_str, no_scroll){\n                if(out_str){\n                    el.find('.content')\n                        .append('<div><div class=\"cmd_out\">'+out_str+'</div></div>');\n                }\n                if(!no_scroll){\n                    scroll_to_bottom();\n                }\n            };\n\n            /**\n            * @method : change_settings\n            * @desc   : Edits a property from the settings (not all settings are editable)\n            **/\n            public_methods.change_settings = function(settings_obj){\n                $.extend(true, settings, settings_obj);\n            };\n\n            /**\n            * @method : unregister\n            * @desc   : Removes a property from the method stack.\n            **/\n            public_methods.unregister = function(method_type, method_name){\n                var flag = false;\n                if(typeof method_name == 'object' && method_name.hasOwnProperty('name')){\n                    method_name = method_name.name;\n                }\n\n                if(method_type == 'callbefore' && callbefores.hasOwnProperty(method_name)){\n                    flag = true;\n                    delete callbefores[method_name];\n                }else if(method_type == 'command' && commands.hasOwnProperty(method_name)){\n                    flag = true;\n                    delete commands[method_name];\n                }else if(method_type == 'response' && responses.hasOwnProperty(method_name)){\n                    flag = true;\n                    delete responses[method_name];\n                }else if(method_type == 'callback' && callbacks.hasOwnProperty(method_name)){\n                    flag = true;\n                    delete callbacks[method_name];\n                }\n                return flag;\n            };\n\n            /**\n            * @method : register\n            * @desc   : Adds a method to the specified method stack.\n            * @return : boolean. True on success.\n            **/\n            public_methods.register = function(method_type, obj){\n                var ret = false;\n                if(obj){\n                    var method_name = (obj.hasOwnProperty('name')) ? obj.name : false,\n                        method_exe = (obj.hasOwnProperty('method')) ? obj.method : false,\n                        method_options = (obj.hasOwnProperty('options')) ? obj.options : [],\n                        method_help = (obj.hasOwnProperty('help')) ? obj.help : '';\n\n                    if(method_type == 'callbefore' && typeof method_exe === 'function' ){\n                            callbefores[ method_name ] = method_exe;\n                            ret = true;\n\n                    }else if(method_type == 'command' && ( typeof method_exe === 'string' || typeof method_exe === 'function' )){\n                            commands[ method_name ] = {'help' : method_help, 'options' : method_options, 'exe' : method_exe};\n                            ret = true;\n\n                    }else if(method_type == 'response' && typeof method_exe === 'function'){\n                            responses[method_name] = method_exe;\n                            ret = true;\n\n                    }else if(method_type == 'callback' && typeof method_exe === 'function' ){\n                            callbacks[ method_name ] = method_exe;\n                            ret = true;\n                    }\n                }\n\n                return ret;\n            };\n\n            /**\n            * @method : ptty_set_command_option\n            * @desc   : Edits the cmd_opts property.\n            * @option_obj : An object containing any of the cmd_opts attributes.\n            **/\n            public_methods.set_command_option = function(option_obj){\n                return $.extend(true, cmd_opts, option_obj);\n            };\n\n            /**\n            * @method : ptty_get_command_option\n            * @desc   : Returns the cmd_opts value for the property requested.\n            * @options_mix   : The name (str) or names (arr) of the wanted properties.\n            **/\n            public_methods.get_command_option = function(options_mix){\n                var out;\n                if(typeof options_mix === 'string'){\n                    out = (cmd_opts.hasOwnProperty(options_mix)) ? cmd_opts[options_mix] : false;\n                }else if(typeof options_mix === 'object'){\n                    out = {};\n                    for (var i = options_mix.length - 1; i >= 0; i--) {\n                        if(typeof cmd_opts[options_mix[i]] !== 'undefined'){\n                            out[options_mix[i]] = cmd_opts[options_mix[i]];\n                        }\n                    };\n                }else{\n                    out = cmd_opts;\n                }\n\n                return out;\n            };\n\n            /**\n            * @method : ptty_tokenize\n            * @desc   : Will attempt to return an array where text has been tokenized in a command line fashion.\n            * @command: A string, for example: first -s second \"argument.sh -xyz\" --foo=\"bar \\'baz\\' 123\" -abc\n            * @array  : An array with the options to look for eg. [1,'--option','-x','-y','-z']\n            * (integers in the options array return their position in the command entered)\n            **/\n            public_methods.tokenize = function(command, options_arr){\n                var out = {};\n                var cmd = $.trim(command).split( /\\s+/ );\n\n                if(typeof cmd[0] === 'undefined' || cmd[0] === ''){\n                    out = false;\n                }else if(typeof options_arr !== 'undefined'){\n                    var option = false,\n                        value = false, \n                        quote_type = false,\n                        quote_open = false,\n                        first_char = false,\n                        last_char = false,\n                        before_last = false;\n\n                    var wildcards = options_arr.filter(function(opt){\n                        if(typeof opt === 'number' && opt > 0 && typeof cmd[opt] !== 'undefined'){\n                            out[opt] = cmd[opt];\n                            return opt;\n                        }\n                    });\n                    // remove wildcards from options_arr\n                    options_arr = $(options_arr).not(wildcards).get();\n                    for (var i = 0; i < cmd.length; i++) {\n                        first_char = cmd[i].charAt(0);\n                        last_char = cmd[i].slice(-1);\n                        // before last to detect escapes\n                        before_last = cmd[i].charAt(cmd[i].length - 2);\n                        if($.inArray( cmd[i], options_arr ) >= 0){\n                            // Get option\n                            option = cmd[i];\n                            value = false;\n                        }else if(first_char == '\"' && quote_open === false && last_char !== '\"'){\n                            quote_type = '\"';\n                            quote_open = true;\n                            value = cmd[i];\n                        }else if(first_char == \"'\" && quote_open === false && last_char !== \"'\"){\n                            quote_type = \"'\";\n                            quote_open = true;\n                            value = cmd[i];\n                        }else if(last_char == quote_type && quote_open === true && before_last+last_char !== '\\\\'+quote_type){\n                            quote_open = false;\n                            value += ' '+cmd[i];\n                            // Trim & Strip any ecaping slashes\n                            value = $.trim(value.substring(1).slice(0,-1).replace(/\\\\(.)/mg, \"$1\"));\n                        }else if(quote_open === true){\n                            value += ' '+cmd[i];\n                        }else{\n                            if((first_char == \"'\" && last_char == \"'\") || (first_char == '\"' && last_char == '\"')){\n                                // Remove wrapping quotes\n                                 value = $.trim(cmd[i].substring(1).slice(0,-1));\n                            }else{\n                                value = cmd[i];\n                            }\n                        }\n                        // Add to output\n                        if(option && quote_open === false){\n                            out[option] = value;\n                        }\n                    }\n                }else{\n                    out[cmd[0]] = cmd;\n                }\n                return out;\n            };\n\n            // cleanup\n            el.html('');\n\n            // current history position\n            var hcurrent = null;\n\n            // current running command\n            var cmd_name = null;\n\n            // the tokenized command\n            var cmd_obj  = {};\n\n            // Some markup\n            el.append(\n                '<div class=\"loading\"><span></span></div>'+\n                '<div class=\"content\">'+\n                    '<div>' + settings.i18n.welcome + '</div>'+\n                '</div>'+\n                '<div class=\"prompt\">'+\n                    '<div class=\"input\" contenteditable '+\n                        'spellcheck=\"false\" '+\n                        'data-caret=\"'+settings.caret+'\" '+\n                        'data-ps=\"'+settings.ps+'\">'+\n                    '</div>'+\n                '</div>'\n            );\n\n            var input   = el.find('.prompt .input');\n            var content = el.find('.content');\n            var loading = el.find('.loading');\n\n            // Setup styles.\n            el.attr('data-theme', settings.theme).addClass( settings.theme );\n            if(settings.native_css){\n                public_methods.native_style(el, settings.theme);\n            }\n\n            var blinking = settings.autofocus;\n\n            // temporary switches for subroutines\n            var tab_comp = settings.autocomplete;\n            var save_to_history = settings.history_max;\n\n            // Set caret on the prompt\n            if(settings.autofocus){\n                input.focus();\n            }\n\n            el.bind('focus click', function(){\n                var text = '';\n                if (typeof window.getSelection != \"undefined\") {\n                    text = window.getSelection().toString();\n                } else if (typeof document.selection != \"undefined\" && document.selection.type == \"Text\") {\n                    text = document.selection.createRange().text;\n                }\n                if(text == ''){\n                    caret_to_end();\n                }\n            });\n\n            input.click(function() {\n                caret_to_end();\n            });\n            input.bind('blur', function(){\n                blinking = false;\n            });\n            if(settings.caret_blink > 0){\n                setInterval(function() {\n                    if(settings.caret_blink > 0 && blinking === true){\n                        input.toggleClass('blink');\n                    }\n                }, settings.caret_blink);\n            }\n\n            // Register native commands and responses\n            if(settings.native_cmds){\n                public_methods.native_commands();\n            }\n            public_methods.native_responses(cmd_opts);\n\n            // Quiet!\n            var quiet = null;\n\n            /* Command logic */\n            var cmd_start = function(direct_cmd){\n\n                loading.addClass('working');\n\n                var cmd;\n                if(typeof direct_cmd !== 'undefined'){\n                    cmd = direct_cmd;\n                }else{\n                    cmd = input.text();\n                }\n\n                tab_comp = settings.autocomplete;\n                save_to_history = settings.history_max;\n\n                // Option overrides\n                cmd_opts.last = cmd;\n                if(typeof cmd_opts.next == 'string'){\n                    cmd = cmd_opts.next.replace(/%cmd%/i, cmd);\n                    cmd_opts.next = null;\n                    save_to_history = 0;\n                }\n\n                if(!cmd || cmd == ''){\n                    return cmd_update();\n                }else{\n                    cmd_name = cmd.split( /\\s+/ )[0];\n                }\n\n                if(typeof commands[cmd_name] !== 'undefined'){\n                    cmd_obj = public_methods.tokenize(cmd, commands[cmd_name].options);\n                }else{\n                    if(!quiet){\n                        cmd_opts.out = cmd_name+' : '+settings.i18n.error_not_found;\n                    }\n                    return cmd_update();\n                }\n\n                // Run this before every *valid* command\n                if(typeof settings.before_cmd == 'function') {\n                    cmd_obj = cmd_response(settings.before_cmd(cmd_obj));\n                    if(!cmd_obj){\n                        return cmd_update();\n                    }\n                }\n\n                // Run callbefores for current command if any\n                if(typeof callbefores[cmd_name] == 'function'){\n                    cmd_obj = cmd_response(callbefores[cmd_name](cmd_obj));\n                    if(!cmd_obj){\n                        return cmd_update();\n                    }\n                }\n\n                // To modify history use a callbefore.\n                if(!quiet){\n                    add_to_history(cmd_opts.last);\n                }\n\n\n                // Call command\n                if( typeof commands[cmd_name].exe === 'function' ) {\n\n                    cmd_response(commands[cmd_name].exe(cmd_obj));\n                    return cmd_update();\n\n                }else if( typeof commands[cmd_name].exe === 'string' ){\n\n                    // Setup the defaults\n                    var ajax_defaults = {};\n                    if(!settings.ajax_options.data){\n                        var ajax_data = {};\n                        ajax_data[settings.param] = (cmd_opts.in !== null) ? cmd_opts.in : cmd_name;\n                        ajax_data[settings.param+'_data'] = (cmd_opts.data !== null) ? cmd_opts.data : cmd_obj;\n                        ajax_defaults.data = ajax_data;\n                    }\n\n                    // Merge defaults with settings\n                    var ajax_opts = $.extend(true, ajax_defaults, settings.ajax_options);\n                    if(commands[cmd_name].exe){\n                        ajax_opts.url = commands[cmd_name].exe;\n                    }\n\n                    // Do it.\n                    var jqxhr = $.ajax(ajax_opts);\n                    jqxhr.done(function( data ){\n                        cmd_obj = cmd_response(data);\n                    });\n\n                    jqxhr.fail(function(jqXHR, textStatus, errorThrown){\n                        cmd_opts.out = settings.i18n.error_ajax;\n                    });\n\n                    jqxhr.always(function(dataOrjqXHR, textStatus, jqXHRorErrorThrown){\n                        return cmd_update();\n                    });\n\n                }else{\n                    cmd_opts.out = settings.i18n.error_bad_method;\n                    return cmd_update();\n                }\n            };\n\n            var cmd_response = function(cmd_obj){\n                if(typeof cmd_obj === 'object'){\n                    // add cmd_obj to cmd_opts\n                    for(var res in cmd_obj){\n                        if(responses.hasOwnProperty(res)){\n                            $.extend(true, cmd_opts, responses[res](cmd_obj));\n                        }\n                    }\n                }\n                return cmd_obj;\n            };\n\n            var cmd_callback = function(){\n                if(cmd_obj){\n\n                    // run callback if any\n                    if(callbacks.hasOwnProperty(cmd_name)){\n                        cmd_response(callbacks[cmd_name](cmd_obj));\n                    }\n\n                    // Run this after every command\n                    if (typeof settings.after_cmd == 'function') {\n                        cmd_response(settings.after_cmd(cmd_obj));\n                    }\n                }\n            };\n\n            var cmd_update = function(){\n                // switches to original settings\n                tab_comp = settings.autocomplete;\n                save_to_history = settings.history_max;\n\n                var cmd_ps   = (!cmd_opts.ps)   ? settings.ps : cmd_opts.ps;\n                var cmd_out  = (!cmd_opts.out)  ? '' : cmd_opts.out;\n                var cmd_in   = (!cmd_opts.in)   ? '' : cmd_opts.in;\n                var cmd_last = (!cmd_opts.last) ? '' : cmd_opts.last;\n                var cmd_next = (!cmd_opts.next) ? null : cmd_opts.next;\n\n                if(!quiet){\n                    // output\n                    content.append(\n                        '<div>'+\n                            '<div class=\"cmd_in\"><span class=\"cmd_ps\">'+input.attr('data-ps')+'</span>'+cmd_last+'</div>'+\n                            '<div class=\"cmd_out\">'+cmd_out+'</div>'+\n                        '</div>'\n                    );\n                }else{\n                    content.append('<div><div class=\"cmd_out\">'+cmd_out+'</div></div>');\n                }\n\n                cmd_callback();\n\n                // input\n                input.attr('data-caret', settings.caret)\n                    .attr('data-ps', cmd_ps).text(cmd_in);\n                if(settings.caret_blink === 0){\n                    input.removeClass('blink');\n                }\n                if(input.hasClass('show-caret')){\n                    // hide \"real\" caret if showing\n                    input.removeClass('show-caret');\n                }\n\n                // Check if theme has changed.\n                if(!el.hasClass(settings.theme)){\n                    el.removeClass(el.attr('data-theme'))\n                        .addClass(settings.theme)\n                        .attr('data-theme', settings.theme);\n                }\n\n                // Reset options and save cmd_next\n                if(cmd_next){\n                    tab_comp = false;\n                    save_to_history = 0;\n                }\n                quiet = null;\n\n                cmd_opts = {\n                    ps : null, in : null, out : null,\n                    last : null, next : cmd_next, data : null\n                };\n\n                cmd_obj = cmd_opts;\n\n                cmd_end();\n            };\n\n            var cmd_end = function(){\n                scroll_to_bottom();\n                caret_to_end();\n                loading.removeClass('working');\n            };\n\n            /* Helper functions: */\n\n            // Add to history\n            var add_to_history = function(str) {\n                if( typeof commands[cmd_name] !== 'undefined' && str !== '' && save_to_history > 0) {\n\n                    if( history.length > settings.history_entries ){\n                        history.shift();\n                    }\n                    history.push( $.trim(str) );\n                }\n                // Reset history position\n                hcurrent = 0;\n            };\n\n            /**\n            * @method   : scroll_to_bottom\n            * @desc     : I give up. Done is better than perfect.\n            **/\n            var scroll_to_bottom = function(){\n                el.scrollTop(el.height() + 100000000000000000);\n            };\n\n            // Set caret to end of input\n            var caret_to_end = function () {\n                input.focus();\n                blinking = true;\n                if (typeof window.getSelection != \"undefined\" && typeof document.createRange != \"undefined\") {\n                    var range = document.createRange();\n                    range.selectNodeContents(input.get(0));\n                    range.collapse(false);\n                    var sel = window.getSelection();\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                } else if (typeof document.body.createTextRange != \"undefined\") {\n                    var textRange = document.body.createTextRange();\n                    textRange.moveToElementText(input.get(0));\n                    textRange.collapse(false);\n                    textRange.select();\n                }\n            };\n\n            var tab_completion = function(current_value) {\n                var cmds = [ ];\n\n                if( current_value.match( /^[^\\s]{0,}$/ ) ) {\n                    for(var i in commands ) {\n                        if( current_value == '' ) {\n                            cmds.push( i );\n                        } else if( i.indexOf( current_value ) == 0 ) {\n                            cmds.push( i );\n                        }\n                    }\n\n                    if( cmds.length > 1 ) {\n                        cmd_opts.out = '<ul><li>'+cmds.join( '</li><li>' )+'</li></ul>';\n                        cmd_opts.in = current_value;\n                        cmd_update();\n                    } else if( cmds.length == 1 ) {\n                        input.text(cmds.pop() + ' ');\n                    }\n                }\n            };\n\n            /**\n            * @method   : Anonymous\n            * @desc     : Add event handlers to the input field\n            * @event_handler\n            **/\n            input.keydown( function( e ) {\n                var keycode = e.keyCode;\n                switch( keycode ) {\n                    // Command Completion Tab\n                    case 9:\n                        e.preventDefault();\n                        if(tab_comp) {\n                            tab_completion($.trim( input.text() ));\n                            cmd_end();\n                        }\n                        break;\n\n                    // Left and right arrows\n                    case 37:\n                    case 39:\n                        if(settings.caret_blink > 0){\n                            blinking = false;\n                            // Add real caret\n                            input.addClass('blink show-caret');\n                        }\n                        break;\n\n                    // History Up\n                    case 38:\n                        e.preventDefault();\n                        if(save_to_history > 0){\n                            hcurrent = ( hcurrent === null || hcurrent == 0 ) ? history.length - 1 : hcurrent - 1;\n                            input.text(history[ hcurrent ]);\n                            cmd_end();\n                        }\n                        break;\n\n                    // History Down\n                    case 40:\n                        e.preventDefault();\n                        if(save_to_history > 0){\n                            if( hcurrent === null || hcurrent == (history.length - 1 ) ){\n                                input.html('');\n                                break;\n                            }\n                            hcurrent++;\n                            input.text(history[ hcurrent ]);\n                            cmd_end();\n                        }\n                        break;\n\n                    // Backspace and delete\n                    case 46:\n                    case 8:\n                        // Funny glitch with <br>s being inserted\n                        if(input.text().length === 1 || window.getSelection().toString() == input.text()){\n                            input.html('');\n                        }\n                        break;\n\n                    // On Enter\n                    case 13:\n                        e.preventDefault();\n                        document.execCommand('insertHTML', false, '');\n                        cmd_start(); // important!\n                        break;\n                    // Escape key\n                    case 27:\n                        cmd_opts = {\n                            ps : null, in : null, out : null,\n                            last : null, next : null, data : null\n                        };\n                        input.text('');\n                        cmd_start();\n                        break;\n\n                }\n            });\n        });\n\n        return public_methods;\n    };\n})(jQuery);\n\n//# sourceURL=webpack:///./web/lib/ptty.jquery.js?");

/***/ })

/******/ });